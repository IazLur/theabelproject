<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vanara.PInvoke.SearchApi</name>
    </assembly>
    <members>
        <member name="T:Vanara.PInvoke.SearchApi">
            <summary>Functions, structures, constants and interfaces from Windows Search API.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.AUTH_TYPE">
            <summary>Describes authentication types for content access.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.AUTH_TYPE.eAUTH_TYPE_ANONYMOUS">
            <summary>Anonymous.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.AUTH_TYPE.eAUTH_TYPE_NTLM">
            <summary>NTLM challenge/response.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.AUTH_TYPE.eAUTH_TYPE_BASIC">
            <summary>Basic authentication.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.CatalogPausedReason">
            <summary>Used by ISearchCatalogManager::GetCatalogStatus to determine the reason the catalog is paused.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogPausedReason.CATALOG_PAUSED_REASON_NONE">
            <summary>Not paused.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogPausedReason.CATALOG_PAUSED_REASON_HIGH_IO">
            <summary>Paused due to high I/O.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogPausedReason.CATALOG_PAUSED_REASON_HIGH_CPU">
            <summary>Paused due to high CPU usage.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogPausedReason.CATALOG_PAUSED_REASON_HIGH_NTF_RATE">
            <summary>Paused due to high NTF rate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogPausedReason.CATALOG_PAUSED_REASON_LOW_BATTERY">
            <summary>Paused due to low battery.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogPausedReason.CATALOG_PAUSED_REASON_LOW_MEMORY">
            <summary>Paused due to low memory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogPausedReason.CATALOG_PAUSED_REASON_LOW_DISK">
            <summary>Paused due to low disk space.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogPausedReason.CATALOG_PAUSED_REASON_DELAYED_RECOVERY">
            <summary>Paused due to need for delayed recovery.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogPausedReason.CATALOG_PAUSED_REASON_USER_ACTIVE">
            <summary>Paused due to user activity.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogPausedReason.CATALOG_PAUSED_REASON_EXTERNAL">
            <summary>Paused by external request.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogPausedReason.CATALOG_PAUSED_REASON_UPGRADING">
            <summary>Paused by upgrading.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.CatalogStatus">
            <summary>Used by ISearchCatalogManager::GetCatalogStatus to determine the current state of the catalog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogStatus.CATALOG_STATUS_IDLE">
            <summary>Index is current; no indexing needed. Queries can be processed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogStatus.CATALOG_STATUS_PAUSED">
            <summary>
            Indexer is paused. This can happen either because the user paused indexing or the indexer back-off criteria have been met.
            Queries can be processed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogStatus.CATALOG_STATUS_RECOVERING">
            <summary>Index is recovering; queries and indexing are processed while in this state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogStatus.CATALOG_STATUS_FULL_CRAWL">
            <summary>
            Indexer is currently executing a full crawl and will index everything it is configured to index. Queries can be processed
            while indexing.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogStatus.CATALOG_STATUS_INCREMENTAL_CRAWL">
            <summary>
            Indexer is preforming a crawl to see if anything has changed or requires indexing. Queries can be processed while indexing.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogStatus.CATALOG_STATUS_PROCESSING_NOTIFICATIONS">
            <summary>Indexer is processing the notification queue. This is done before resuming any crawl.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CatalogStatus.CATALOG_STATUS_SHUTTING_DOWN">
            <summary>Indexer is shutting down and is not indexing. Indexer can't be queried.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.CHUNK_BREAKTYPE">
            <summary>Describes the type of break that separates the current chunk from the previous chunk.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CHUNK_BREAKTYPE.CHUNK_NO_BREAK">
            <summary>No break is placed between the current chunk and the previous chunk. The chunks are glued together.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CHUNK_BREAKTYPE.CHUNK_EOW">
            <summary>
            A word break is placed between this chunk and the previous chunk having the same attribute. Use of CHUNK_EOW should be
            minimized because the choice of word breaks is language-dependent, so determining word breaks is best left to the search engine.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CHUNK_BREAKTYPE.CHUNK_EOS">
            <summary>A sentence break is placed between this chunk and the previous chunk having the same attribute.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CHUNK_BREAKTYPE.CHUNK_EOP">
            <summary>A paragraph break is placed between this chunk and the previous chunk having the same attribute.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CHUNK_BREAKTYPE.CHUNK_EOC">
            <summary>A chapter break is placed between this chunk and the previous chunk having the same attribute.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.CHUNKSTATE">
            <summary>Specifies whether the current chunk is a text-type property or a value-type property.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CHUNKSTATE.CHUNK_TEXT">
            <summary>The current chunk is a text-type property.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CHUNKSTATE.CHUNK_VALUE">
            <summary>The current chunk is a value-type property.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CHUNKSTATE.CHUNK_FILTER_OWNED_VALUE">
            <summary>Reserved.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.CLUSION_REASON">
            <summary>
            These flags enumerate reasons why URLs are included or excluded from the current crawl scope. The
            ISearchCrawlScopeManager::IncludedInCrawlScopeEx method returns a pointer to this enumeration to explain why a specified URL is
            either included or excluded from the current crawl scope.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CLUSION_REASON.CLUSIONREASON_UNKNOWNSCOPE">
            <summary>
            The URL has been excluded because its scope in unknown. There is no scope that would include or exclude this URL so it is
            excluded by default.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CLUSION_REASON.CLUSIONREASON_DEFAULT">
            <summary>The URL has been included or excluded by a default rule. Default rules are set during setup or first run.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CLUSION_REASON.CLUSIONREASON_USER">
            <summary>
            The URL has been included or excluded by a user rule. User rules are set either by the user through Control Panel or by a
            calling application through the ISearchCrawlScopeManager interface.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CLUSION_REASON.CLUSIONREASON_GROUPPOLICY">
            <summary>Not Supported.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.FOLLOW_FLAGS">
            <summary>
            Used to help define behavior when crawling or indexing. These flags are used by the ISearchCrawlScopeManager::AddDefaultScopeRule
            and ISearchCrawlScopeManager::AddUserScopeRule methods.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.FOLLOW_FLAGS.FF_INDEXCOMPLEXURLS">
            <summary>Specifies whether complex URLs (those containing a '?') should be indexed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.FOLLOW_FLAGS.FF_SUPPRESSINDEXING">
            <summary>Follow but do not index this URL.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IFILTER_FLAGS">
            <summary>
            Indicates whether the caller should use the IPropertySetStorage and IPropertyStorage interfaces to locate additional properties.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.IFILTER_FLAGS.IFILTER_FLAGS_OLE_PROPERTIES">
            <summary>
            The caller should use the IPropertySetStorage and IPropertyStorage interfaces to locate additional properties. When this flag
            is set, properties available through COM enumerators should not be returned from <c>IFilter</c>.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IFILTER_INIT">
            <summary>
            <para>Contains flags that control:</para>
            <para>The <c>Init</c> method uses these flags to control the filtering process.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.IFILTER_INIT.IFILTER_INIT_CANON_PARAGRAPHS">
            <summary>Paragraph breaks should be marked with the Unicode PARAGRAPH SEPARATOR (0x2029).</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.IFILTER_INIT.IFILTER_INIT_HARD_LINE_BREAKS">
            <summary>
            Soft returns, such as the newline character in Word, should be replaced by hard returns?LINE SEPARATOR (0x2028). Existing
            hard returns can be doubled. A carriage return (0x000D), line feed (0x000A), or the carriage return and line feed in
            combination should be considered a hard return. The intent is to enable pattern-expression matching against observed line breaks.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.IFILTER_INIT.IFILTER_INIT_CANON_HYPHENS">
            <summary>
            Various word-processing programs have forms of hyphens that are not represented in the host character set, such as optional
            hyphens (appearing only at the end of a line) and nonbreaking hyphens. This flag indicates that optional hyphens are to be
            converted to nulls, and non-breaking hyphens are to be converted to normal hyphens (0x2010), or HYPHEN-MINUSES (0x002D).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.IFILTER_INIT.IFILTER_INIT_CANON_SPACES">
            <summary>All special space characters, such as nonbreaking spaces, are converted to the standard space character (0x0020).</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.IFILTER_INIT.IFILTER_INIT_APPLY_INDEX_ATTRIBUTES">
            <summary>The client requires that text is split into chunks that represent internal value-type properties.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.IFILTER_INIT.IFILTER_INIT_APPLY_CRAWL_ATTRIBUTES">
            <summary>The client wants text split into chunks representing properties determined during the indexing process.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.IFILTER_INIT.IFILTER_INIT_APPLY_OTHER_ATTRIBUTES">
            <summary>
            Any properties not covered by the IFILTER_INIT_APPLY_INDEX_ATTRIBUTES and IFILTER_INIT_APPLY_CRAWL_ATTRIBUTES flags should be emitted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.IFILTER_INIT.IFILTER_INIT_INDEXING_ONLY">
            <summary>The client calls the <c>Init</c> method only once, optimizing <c>IFilter</c> for indexing.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.IFILTER_INIT.IFILTER_INIT_SEARCH_LINKS">
            <summary>
            The text extraction process must recursively search all linked objects within the document. If a link is unavailable, the
            <c>GetChunk</c> call that would have obtained the first chunk of the link should return FILTER_E_LINK_UNAVAILABLE.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.IFILTER_INIT.IFILTER_INIT_FILTER_OWNED_VALUE_OK">
            <summary>The content indexing process can return property values set by the filter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.IFILTER_INIT.IFILTER_INIT_FILTER_AGGRESSIVE_BREAK">
            <summary>Text should be broken in chunks more aggressively than normal.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.IFILTER_INIT.IFILTER_INIT_DISABLED_EMBEDDED">
            <summary>The <c>IFilter</c> should not return chunks from embedded content.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.IFILTER_INIT.IFILTER_INIT_EMIT_FORMATTING">
            <summary>The <c>IFilter</c> should emit formatting info.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.PRIORITIZE_FLAGS">
            <summary>Used by PrioritizeMatchingURLs to specify how to process items the indexer has previously failed to index.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.PRIORITIZE_FLAGS.PRIORITIZE_FLAG_RETRYFAILEDITEMS">
            <summary>Indicates that the indexer should reattempt to index items that it failed to index previously.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.PRIORITIZE_FLAGS.PRIORITIZE_FLAG_IGNOREFAILURECOUNT">
            <summary>
            Indicates that the indexer should continue to reattempt indexing items regardless of the number of times the indexer has
            failed to index them previously.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.PRIORITY_LEVEL">
            <summary>
            Used by the IRowsetPrioritization interface to sets or retrieve the current indexer prioritization level for the scope specified
            by a query.
            </summary>
            <remarks>
            The SearchEvents code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to prioritize indexing events.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.PRIORITY_LEVEL.PRIORITY_LEVEL_FOREGROUND">
            <summary>Indicates that the indexer should process items as fast as the machine allows.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.PRIORITY_LEVEL.PRIORITY_LEVEL_HIGH">
            <summary>Indicates that the indexer should process items in this scope first, and as quickly as possible.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.PRIORITY_LEVEL.PRIORITY_LEVEL_LOW">
            <summary>
            Indicates that the indexer should process items in this scope before those at the normal rate, but after any other
            prioritization requests.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.PRIORITY_LEVEL.PRIORITY_LEVEL_DEFAULT">
            <summary>Indicates that the indexer should process items at the normal indexer rate.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.PROXY_ACCESS">
            <summary>Used by ISearchManager to state proxy use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.PROXY_ACCESS.PROXY_ACCESS_PRECONFIG">
            <summary>Use proxy as set by Internet settings.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.PROXY_ACCESS.PROXY_ACCESS_DIRECT">
            <summary>Do not use a proxy.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.PROXY_ACCESS.PROXY_ACCESS_PROXY">
            <summary>Use the specified proxy.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ROWSETEVENT_ITEMSTATE">
            <summary>Describes whether an item that matches the search criteria of a rowset is currently in that rowset.</summary>
            <remarks>
            <para>This enumeration is used by IRowsetEvents to describe the state of rows in a rowset held by a client.</para>
            <para>
            The SearchEvents code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to prioritize indexing events.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.ROWSETEVENT_ITEMSTATE.ROWSETEVENT_ITEMSTATE_NOTINROWSET">
            <summary>The item is definitely not in the rowset.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.ROWSETEVENT_ITEMSTATE.ROWSETEVENT_ITEMSTATE_INROWSET">
            <summary>The item is definitely contained within the rowset.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.ROWSETEVENT_ITEMSTATE.ROWSETEVENT_ITEMSTATE_UNKNOWN">
            <summary>The item may be in the rowset.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ROWSETEVENT_TYPE">
            <summary>Describes the type of change to the rowset's data.</summary>
            <remarks>
            <para>This enumeration is used in the IRowsetEvents::OnRowsetEvent method to describe the type of event that affects a rowset.</para>
            <para>
            The <c>ROWSETEVENT_TYPE_SCOPESTATISTICS</c> event gives you the same information available from the
            IRowsetPrioritization::GetScopeStatistics method call, but through a push mechanic, as follows:
            </para>
            <list type="bullet">
            <item>
            <term>
            The event arises if the prioritization API has been used to request a non-default prioritization level, and a non-zero statistics
            event frequency.
            </term>
            </item>
            <item>
            <term>
            The event arises only when statistics actually change, and the interval specified in the IRowsetPrioritization has elapsed (the
            interval does not guarantee the frequency of the event).
            </term>
            </item>
            <item>
            <term>
            This event is guaranteed to raise a "bounce zero" state (zero items remaining to be added, zero modifies remaining), provided
            that a non-zero event has been raised.
            </term>
            </item>
            <item>
            <term>The indexer may process items without sending this event, if the queue empties before the statistics event frequency.</term>
            </item>
            </list>
            <para>
            The SearchEvents code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to prioritize indexing events.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.ROWSETEVENT_TYPE.ROWSETEVENT_TYPE_DATAEXPIRED">
            <summary>Indicates that data backing the rowset has expired, and that a new rowset should be requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.ROWSETEVENT_TYPE.ROWSETEVENT_TYPE_FOREGROUNDLOST">
            <summary>
            Indicates that an item that did have foreground priority in the prioritization stack has been demoted, because someone else
            prioritized themselves ahead of this query.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.ROWSETEVENT_TYPE.ROWSETEVENT_TYPE_SCOPESTATISTICS">
            <summary>Indicates that the scope statistics are to be obtained.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.SEARCH_INDEXING_PHASE">
            <summary>Specifies the status of the current search indexing phase.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_INDEXING_PHASE.SEARCH_INDEXING_PHASE_GATHERER">
            <summary>
            Sent in the event that an error occurs while a notification is in the gatherer. For instance, if the notification fails the
            exclusion-rule tests, a status update will be sent with the error.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_INDEXING_PHASE.SEARCH_INDEXING_PHASE_QUERYABLE">
            <summary>The document will be returned in queries. It is currently only in the volatile indexes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_INDEXING_PHASE.SEARCH_INDEXING_PHASE_PERSISTED">
            <summary>The document has moved from the volatile index to the persisted-file-based index.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.SEARCH_KIND_OF_CHANGE">
            <summary>Indicates the kind of change affecting an item when a source sink notifies a client that an item has been changed.</summary>
            <remarks>
            SEARCH_CHANGE_ADD, SEARCH_CHANGE_DELETE, and SEARCH_CHANGE_MODIFY are mutually exclusive. Only one of them can be used at a time.
            However, any one of them can be combined with the remaining flags.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_KIND_OF_CHANGE.SEARCH_CHANGE_ADD">
            <summary>An item was added.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_KIND_OF_CHANGE.SEARCH_CHANGE_DELETE">
            <summary>An item was deleted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_KIND_OF_CHANGE.SEARCH_CHANGE_MODIFY">
            <summary>An item was modified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_KIND_OF_CHANGE.SEARCH_CHANGE_MOVE_RENAME">
            <summary>An item was moved or renamed. Not currently supported for use with ISearchPersistentItemsChangedSink::OnItemsChanged.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_KIND_OF_CHANGE.SEARCH_CHANGE_SEMANTICS_DIRECTORY">
            <summary>An item is a directory. The item needs to be crawled rather than just reindexed as a document would be.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_KIND_OF_CHANGE.SEARCH_CHANGE_SEMANTICS_SHALLOW">
            <summary>Index directory properties were changed for an item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_KIND_OF_CHANGE.SEARCH_CHANGE_SEMANTICS_UPDATE_SECURITY">
            <summary>Security on an item was changed.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.SEARCH_NOTIFICATION_PRIORITY">
            <summary>Indicates the priority of processing an item that has changed.</summary>
            <remarks>
            <para>Set the <c>priority</c> member of the SEARCH_ITEM_CHANGE structure to one of these flags.</para>
            <para>
            As the indexer crawls, it builds a list of items that need to be indexed. These flags indicate the placement of changed items in
            the indexer's queue. Higher priority items are placed at the front of the queue.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_NOTIFICATION_PRIORITY.SEARCH_NORMAL_PRIORITY">
            <summary>The changed item is added to the end of the indexer's queue.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_NOTIFICATION_PRIORITY.SEARCH_HIGH_PRIORITY">
            <summary>The changed item is placed ahead of other queued items in the indexer's queue, to be processed as soon as possible.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.SEARCH_QUERY_SYNTAX">
            <summary>Specifies the type of query syntax.</summary>
            <remarks>
            <para>This enumerated type is used by the ISearchQueryHelper::get_QuerySyntax and ISearchQueryHelper::put_QuerySyntax methods.</para>
            <para><c>Note</c> In Windows 7, the names are prefixed with SQS_ instead of SEARCH_.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_QUERY_SYNTAX.SEARCH_NO_QUERY_SYNTAX">
            <summary>No syntax.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_QUERY_SYNTAX.SEARCH_ADVANCED_QUERY_SYNTAX">
            <summary>Specifies the Advanced Query Syntax. For example, "kind:email to:david to:bill".</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_QUERY_SYNTAX.SEARCH_NATURAL_QUERY_SYNTAX">
            <summary>
            Specifies the Natural Query Syntax. This syntax removes the requirement for a colon between properties and values, for
            example, "email from david to bill".
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.SEARCH_TERM_EXPANSION">
            <summary>
            Indicates wildcard options on search terms. Used by ISearchQueryHelper::get_QueryTermExpansion and
            ISearchQueryHelper::put_QueryTermExpansion methods.
            </summary>
            <remarks>
            While the <c>SEARCH_TERM_EXPANSION</c> enumerated type lets you specify stem expansion, Windows Search does not currently support
            its use with the ISearchQueryHelper interface.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_TERM_EXPANSION.SEARCH_TERM_NO_EXPANSION">
            <summary>No expansion is applied to search terms.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_TERM_EXPANSION.SEARCH_TERM_PREFIX_ALL">
            <summary>All search terms are expanded.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_TERM_EXPANSION.SEARCH_TERM_STEM_ALL">
            <summary>Stem expansion is applied to all terms.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IEnumSearchRoots">
            <summary>Provides methods to enumerate the search roots of a catalog, for example, SystemIndex.</summary>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK, demonstrates
            how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IEnumSearchRoots.Next(System.UInt32,Vanara.PInvoke.SearchApi.ISearchRoot[],System.UInt32@)">
            <summary>Retrieves the specified number of ISearchRoot elements.</summary>
            <param name="celt">
            <para>Type: <c>ULONG</c></para>
            <para>The number of elements to retrieve.</para>
            </param>
            <param name="rgelt">
            <para>Type: <c>ISearchRoot**</c></para>
            <para>Retrieves a pointer to an array of ISearchRoot elements.</para>
            </param>
            <param name="pceltFetched">
            <para>Type: <c>ULONG*</c></para>
            <para>
            Retrieves a pointer to the actual number of elements retrieved. Can be <c>NULL</c> if celt == 1; otherwise it must not be <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            Returns S_OK if successful, S_FALSE if there were not enough items left in the enumeration to be returned, or an error value otherwise.
            </para>
            </returns>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IEnumSearchRoots.Skip(System.UInt32)">
            <summary>Skips the specified number of elements.</summary>
            <param name="celt">
            <para>Type: <c>ULONG</c></para>
            <para>The number of elements to skip.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, S_FALSE if there were not enough items left in the enumeration to skip, or an error value.</para>
            </returns>
            <remarks>
            <para>
            <c>IEnumSearchRoots::Skip</c> moves the internal counter forward a specified number of elements so that a subsequent call to
            IEnumSearchRoots::Next starts from that point.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IEnumSearchRoots.Reset">
            <summary>
            Moves the internal counter to the beginning of the list so a subsequent call to IEnumSearchRoots::Next retrieves from the beginning.
            </summary>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IEnumSearchRoots.Clone">
            <summary>Creates a copy of the IEnumSearchRoots object with the same contents and state as the current one.</summary>
            <returns>
            <para>Type: <c>IEnumSearchRoots**</c></para>
            <para>
            Returns a pointer to the new IEnumSearchRoots object. The calling application must free the new object by calling its
            IUnknown::Release method.
            </para>
            </returns>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IEnumSearchScopeRules">
            <summary>Enumerates scope rules.</summary>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK, demonstrates
            how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IEnumSearchScopeRules.Next(System.UInt32,Vanara.PInvoke.SearchApi.ISearchScopeRule[],System.UInt32@)">
            <summary>Retrieves the specified number of ISearchScopeRule elements.</summary>
            <remarks>
            <para>
            Internally, this method updates a counter to move forward the number of elements actually retrieved; subsequent calls to
            <c>IEnumSearchScopeRules::Next</c> will start from that number.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IEnumSearchScopeRules.Skip(System.UInt32)">
            <summary>Skips the specified number of elements.</summary>
            <remarks>
            <para>
            Moves the internal counter a specified number of elements forward so that a subsequent call to IEnumSearchScopeRules::Next
            starts from that number.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IEnumSearchScopeRules.Reset">
            <summary>
            Moves the internal counter to the beginning of the list so that a subsequent call to IEnumSearchScopeRules::Next retrieves
            from the beginning.
            </summary>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IEnumSearchScopeRules.Clone">
            <summary>Creates a copy of this IEnumSearchScopeRules object with the same contents and state as the current one.</summary>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IFilter">
            <summary>
            <para>
            [Indexing Service is no longer supported as of Windows XP and is unavailable for use as of Windows 8. Instead, use Windows Search
            for client side search and Microsoft Search Server Express for server side search.]
            </para>
            <para>
            Scans documents for text and properties (also called attributes). It extracts chunks of text from these documents, filtering out
            embedded formatting and retaining information about the position of the text. It also extracts chunks of values, which are
            properties of an entire document or of well-defined parts of a document. <c>IFilter</c> provides the foundation for building
            higher-level applications such as document indexers and application-independent viewers.
            </para>
            <para>
            For introductory information about how the <c>IFilter</c> interface works with documents and document properties, see Properties
            of Documents. For a synopsis and an example of how the <c>IFilter</c> interface processes a document, see Property Filtering and
            Property Indexing.
            </para>
            </summary>
            <remarks>
            <c>IFilter</c> components for Indexing Service run in the Local Security context and should be written to manage buffers and to
            stack correctly. All string copies must have explicit checks to guard against buffer overruns. You should always verify the
            allocated size of the buffer and test the size of the data against the size of the buffer.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IFilter.Init(Vanara.PInvoke.SearchApi.IFILTER_INIT,System.UInt32,Vanara.PInvoke.SearchApi.FULLPROPSPEC[],Vanara.PInvoke.SearchApi.IFILTER_FLAGS@)">
            <summary>
            <para>
            [Indexing Service is no longer supported as of Windows XP and is unavailable for use as of Windows 8. Instead, use Windows
            Search for client side search and Microsoft Search Server Express for server side search.]
            </para>
            <para>Initializes a filtering session.</para>
            </summary>
            <param name="grfFlags">
            Values from the IFILTER_INIT enumeration for controlling text standardization, property output, embedding scope, and IFilter
            access patterns.
            </param>
            <param name="cAttributes">
            The size of the attributes array. When nonzero, cAttributes takes precedence over attributes specified in grfFlags. If no
            attribute flags are specified and cAttributes is zero, the default is given by the PSGUID_STORAGE storage property set, which
            contains the date and time of the last write to the file, size, and so on; and by the PID_STG_CONTENTS 'contents' property,
            which maps to the main contents of the file. For more information about properties and property sets, see Property Sets.
            </param>
            <param name="aAttributes">
            Pointer to an array of FULLPROPSPEC structures for the requested properties. When cAttributes is nonzero, only the properties
            in aAttributes are returned.
            </param>
            <param name="pFlags">Information about additional properties available to the caller; from the IFILTER_FLAGS enumeration.</param>
            <returns>This method can return one of these values.</returns>
            <remarks>
            <para>
            The <c>Init</c> method sets the state of the filter object. The content filter positions at the beginning of the object and
            the object state is frozen until the object is released. You can pass the filter object the set of properties you would like
            returned by setting up their property set and property identifier (ID) descriptions in the aAttributes array. For more
            information, see Filtering File Properties.
            </para>
            <para>Notes to Callers</para>
            <para>Call the <c>Init</c> method before calling all other IFilter methods.</para>
            <para>Notes to Implementers</para>
            <para>Chunk IDs must remain consistent across multiple calls to the <c>Init</c> method with the same parameters.</para>
            <para>
            For some implementations of the IFilter interface, detection of failure to access a document may not be possible (or may be
            computationally expensive) until the <c>Init</c> method has been called, or possibly even later.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IFilter.GetChunk(Vanara.PInvoke.SearchApi.STAT_CHUNK@)">
            <summary>
            <para>
            [Indexing Service is no longer supported as of Windows XP and is unavailable for use as of Windows 8. Instead, use Windows
            Search for client side search and Microsoft Search Server Express for server side search.]
            </para>
            <para>
            Positions the filter at the beginning of the next chunk, or at the first chunk if this is the first call to the
            <c>GetChunk</c> method, and returns a description of the current chunk.
            </para>
            </summary>
            <param name="pStat">A pointer to a STAT_CHUNK structure containing a description of the current chunk.</param>
            <returns>This method can return one of these values.</returns>
            <remarks>
            <para>
            If upon return pStat points to a STAT_CHUNK structure with the <c>breakType</c> member equal to CHUNK_NO_BREAK, only the
            <c>idChunk</c> member will be updated with the new chunk identifier (ID) value. The other members of the <c>STAT_CHUNK</c>
            structure remain unchanged.
            </para>
            <para>
            Internal value-type properties (chunks with a CHUNKSTATE enumeration value of CHUNK_VALUE) cannot be concatenated using
            CHUNK_NO_BREAK. A single word cannot span more than two glued chunks.
            </para>
            <para>Chunk ID zero is invalid.</para>
            <para>
            Before the <c>GetChunk</c> method is called for the first time, there is no current chunk. After an error return code of
            anything other than FILTER_E_END_OF_CHUNKS the next call to the <c>GetChunk</c> method nevertheless retrieves the next chunk
            after the unavailable one.
            </para>
            <para>Notes to Callers</para>
            <para>
            When the <c>GetChunk</c> method finishes, the chunk described in *pStat is the current chunk. The chunk descriptor is owned
            by the routine calling the <c>GetChunk</c> method, but the property name pointer, which can be set in the property
            specification, is owned by the <c>GetChunk</c> method and should not be freed.
            </para>
            <para>Notes to Implementers</para>
            <para>
            If a call to the <c>GetChunk</c> method of the content filter of a linked or embedded object returns FILTER_E_END_OF_CHUNKS,
            the implementation should return the next chunk of the linking or embedding object. For example, if a document has two
            embedded objects and the first has returned FILTER_E_END_OF_CHUNKS, then the outer content filter must call the
            <c>GetChunk</c> method of the content filter for the embedded object.
            </para>
            <para>
            Before returning the results of a call to the <c>GetChunk</c> method on an embedded or linked object, check to make sure that
            the chunk ID is unique. If not, the implementer must renumber the chunk and keep a mapping of the new chunk ID.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IFilter.GetText(System.UInt32@,System.Text.StringBuilder)">
            <summary>
            <para>
            [Indexing Service is no longer supported as of Windows XP and is unavailable for use as of Windows 8. Instead, use Windows
            Search for client side search and Microsoft Search Server Express for server side search.]
            </para>
            <para>Retrieves text (text-type properties) from the current chunk, which must have a CHUNKSTATE enumeration value of CHUNK_TEXT.</para>
            </summary>
            <param name="pcwcBuffer">
            On entry, the size of awcBuffer array in wide/Unicode characters. On exit, the number of Unicode characters written to awcBuffer.
            </param>
            <param name="awcBuffer">
            Text retrieved from the current chunk. Do not terminate the buffer with a character. Use a null-terminated string. The
            null-terminated string should not exceed the size of the destination buffer.
            </param>
            <returns>This method can return one of these values.</returns>
            <remarks>
            If the current chunk is too large for the awcBuffer array, more than one call to the <c>GetText</c> method can be required to
            retrieve all the text in the current chunk. Each call to the <c>GetText</c> method retrieves text that immediately follows
            the text from the last call to the <c>GetText</c> method. The last character from one call can be in the middle of a word,
            and the first character in the next call would continue that word. Search engines must handle this situation.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IFilter.GetValue(Vanara.PInvoke.Ole32.PROPVARIANT@)">
            <summary>
            <para>
            [Indexing Service is no longer supported as of Windows XP and is unavailable for use as of Windows 8. Instead, use Windows
            Search for client side search and Microsoft Search Server Express for server side search.]
            </para>
            <para>Retrieves a value (internal value-type property) from a chunk, which must have a CHUNKSTATE enumeration value of CHUNK_VALUE.</para>
            </summary>
            <param name="ppPropValue">
            A pointer to an output variable that receives a pointer to the PROPVARIANT structure that contains the value-type property.
            </param>
            <returns>This method can return one of these values.</returns>
            <remarks>
            <para>Call the <c>GetValue</c> method only once per chunk.</para>
            <para>
            Note that the effect of producing the same value from more than one chunk is undefined. Only the last setting of the value is valid.
            </para>
            <para>Notes to Callers</para>
            <para>
            Allocate the PROPVARIANT structure with CoTaskMemAlloc. Some <c>PROPVARIANT</c> structures contain pointers, which can be
            freed by calling the PropVariantClear function. It is up to the caller of the <c>GetValue</c> method to call <c>PropVariantClear</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IFilter.BindRegion(Vanara.PInvoke.SearchApi.FILTERREGION,System.Guid@,System.Object@)">
            <summary>
            <para>
            [Indexing Service is no longer supported as of Windows XP and is unavailable for use as of Windows 8. Instead, use Windows
            Search for client side search and Microsoft Search Server Express for server side search.]
            </para>
            <para>Retrieves an interface representing the specified portion of object. Currently reserved for future use.</para>
            </summary>
            <param name="origPos">A FILTERREGION structure that contains the position of the text.</param>
            <param name="riid">A reference to the requested interface identifier.</param>
            <param name="ppunk">
            A pointer to a variable that receives the interface pointer requested in riid. Upon successful return, *ppunk contains the
            requested interface pointer.
            </param>
            <returns>This method can return one of these values.</returns>
            <remarks>
            <para>
            If it is impossible for the <c>BindRegion</c> method to bind an interface to the specified region, return
            FILTER_W_REGION_CLIPPED. This situation can occur when the next such chunk is in a linked object or an embedded object.
            </para>
            <para>
            Not all filters are capable of supporting the <c>BindRegion</c> method in a rational way. Filters that are implemented by
            viewing applications will benefit the most from this method. The method is intended to be a way to pass cookies through the
            search engine and back to the IFilter interface implementation.
            </para>
            <para>Notes to Implementers</para>
            <para>This method is currently reserved for future use. Always return E_NOTIMPL.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ILoadFilter">
            <summary>
            Defines methods and properties that are implemented by the FilterRegistration object, which provides methods for loading a filter.
            </summary>
            <remarks>A filter, also known as a filter handler, is an implementation of the IFilter interface.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ILoadFilter.LoadIFilter(System.String,Vanara.PInvoke.SearchApi.FILTERED_DATA_SOURCES@,System.Object,System.Boolean,System.Guid@,System.IntPtr,System.IntPtr,Vanara.PInvoke.SearchApi.IFilter@)">
            <summary>Retrieves and loads the most appropriate filter that is mapped to a Shell data source.</summary>
            <param name="pwcsPath">
            Pointer to a comma-delimited null-terminated Unicode string buffer that specifies the path of the file to be filtered. This
            parameter can be null.
            </param>
            <param name="pFilteredSources">
            Pointer to the FILTERED_DATA_SOURCES structure that specifies parameters for a Shell data source for which a filter is
            loaded. This parameter cannot be null.
            </param>
            <param name="pUnkOuter">
            If the object is being created as part of an aggregate, specify a pointer to the controlling IUnknown interface of the aggregate.
            </param>
            <param name="fUseDefault">
            If <c>TRUE</c>, use the default filter; if <c>FALSE</c>, proceed with the most appropriate filter that is available.
            </param>
            <param name="pFilterClsid">
            Pointer to the CLSID (CLSID_FilterRegistration) that receives the class identifier of the returned filter.
            </param>
            <param name="SearchDecSize">Not implemented.</param>
            <param name="pwcsSearchDesc">Not implemented.</param>
            <param name="ppIFilt">The address of a pointer to an implementation of an IFilter interface that <c>LoadIFilter</c> selects.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
            <remarks>
            <para>A filter, also known as a filter handler, is an implementation of the IFilter interface.</para>
            <para>
            <c>ILoadFilter</c> attempts to load a filter that can process a Shell data source of the type specified in the
            pFilteredSources parameter through the pwcsPath parameter.If an appropriate filter for the data source is not found, and
            fUseDefault is <c>false</c>, this method returns null in the ppIFilt parameter. If an appropriate filter for the data source
            is not found, and fUseDefault is <c>true</c>, the IFilter interface on the default <c>IFilter</c> is returned in the ppIFilt parameter.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ILoadFilter.LoadIFilterFromStorage(Vanara.PInvoke.Ole32.IStorage,System.Object,System.String,System.Boolean,System.Guid@,System.IntPtr,System.IntPtr,Vanara.PInvoke.SearchApi.IFilter@)">
            <summary>
            <para>Not implemented.</para>
            <para>Do not use: this method is not implemented.</para>
            </summary>
            <param name="pStg"/>
            <param name="pUnkOuter"/>
            <param name="pwcsOverride"/>
            <param name="fUseDefault"/>
            <param name="pFilterClsid"/>
            <param name="SearchDecSize"/>
            <param name="pwcsSearchDesc"/>
            <param name="ppIFilt"/>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ILoadFilter.LoadIFilterFromStream(System.Runtime.InteropServices.ComTypes.IStream,Vanara.PInvoke.SearchApi.FILTERED_DATA_SOURCES@,System.Object,System.Boolean,System.Guid@,System.IntPtr,System.IntPtr,Vanara.PInvoke.SearchApi.IFilter@)">
            <summary>
            <para>Not implemented.</para>
            <para>Do not use: this method is not implemented.</para>
            </summary>
            <param name="pStm"/>
            <param name="pFilteredSources"/>
            <param name="pUnkOuter"/>
            <param name="fUseDefault"/>
            <param name="pFilterClsid"/>
            <param name="SearchDecSize"/>
            <param name="pwcsSearchDesc"/>
            <param name="ppIFilt"/>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IOpLockStatus">
            <summary>
            <para>
            Provides methods to check the opportunistic lock that is used by Microsoft Windows Desktop Search (WDS) on items while indexing.
            If another process locks the file in an incompatible manner, WDS will lose its lock and allow the other process to have the file.
            This mechanism allows WDS to run in the background. Consequently, WDS needs to check its locks to ensure another process has not
            taken precedence while WDS indexes the item.
            </para>
            <para>
            A third-party IUrlAccessor object can implement this interface if the underlying data store provides a mechanism to track
            concurrent access to items. If this interface is exposed by <c>IUrlAccessor</c>, WDS will check the <c>IOpLockStatus</c> while
            indexing items from that store.
            </para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IOpLockStatus.IsOplockValid">
            <summary>Checks the status of the opportunistic lock (OpLock) on the item being indexed.</summary>
            <returns>
            <para>Type: <c>BOOL*</c></para>
            <para>Receives a pointer to a <c>BOOL</c> value that indicates whether the OpLock is successfully taken.</para>
            </returns>
            <remarks>
            <para>
            An OpLock is an opportunistic lock that allows the indexer to lock the item when another process is not accessing it. The
            indexer releases the item, invalidating or breaking the lock, when another process requests an incompatible access mode. This
            enables the indexer to run in the background and not impede access to these items by other processes.
            </para>
            <para>
            An OpLock is never taken after the underlying IUrlAccessor object is initialized, and any call to this method yields the same
            output value on the same object.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IOpLockStatus.IsOplockBroken">
            <summary>Checks the status of the opportunistic lock (OpLock) on the item being indexed.</summary>
            <returns>
            <para>Type: <c>BOOL*</c></para>
            <para>
            Receives a pointer to a <c>BOOL</c> value that indicates whether the OpLock is broken: <c>TRUE</c> if OpLock was taken and
            then broken, <c>FALSE</c> otherwise (including the case when OpLock was not taken).
            </para>
            </returns>
            <remarks>
            An OpLock is an opportunistic lock that allows the indexer to lock the item when another process isn't accessing it. The
            indexer releases the item, invalidating or breaking the lock, when another process requests an incompatible access mode. This
            enables the indexer to run in the background and not impede access to these items by other processes.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IOpLockStatus.GetOplockEventHandle">
            <summary>
            Gets the event handle of the opportunistic lock (OpLock). The event object is set to the signaled state when the OpLock is
            broken, enabling the indexer to stop all operations on the underlying IUrlAccessor object.
            </summary>
            <returns>
            <para>Type: <c>HANDLE*</c></para>
            <para>Receives a pointer to the handle of the event associated with the OpLock, or <c>NULL</c> if no OpLock was taken.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IProtocolHandlerSite">
            <summary>
            Provides methods for a protocol handler's IUrlAccessor object to query the Filter Daemon for the appropriate filter for the URL item.
            </summary>
            <remarks>
            When a protocol handler encounters items with embedded documents, the protocol handler requests additional filters from the
            Filter Daemon by calling the IProtocolHandlerSite::GetFilter method.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IProtocolHandlerSite.GetFilter(System.Guid@,System.String,System.String)">
            <summary>Retrieves the appropriate IFilteraccording to the supplied parameters.</summary>
            <param name="pclsidObj">
            <para>Type: <c>CLSID*</c></para>
            <para>
            Pointer to the CLSID of the document type from the registry. This is used for items with embedded documents to indicate the
            appropriate IFilterto use for that embedded document.
            </para>
            </param>
            <param name="pcwszContentType">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            Pointer to a null-terminated Unicode string that contains the type of the document. This is used to retrieve IFilter <c>s</c>
            that are mapped according to MIME type.
            </para>
            </param>
            <param name="pcwszExtension">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            Pointer to a null-terminated Unicode string that contains the file name extension, without the preceding period. This is used
            to retrieve IFilterobjects that are mapped according to the file name extension.
            </para>
            </param>
            <returns>
            <para>Type: <c>IFilter**</c></para>
            <para>Receives the address of a pointer to the IFilterthat the protocol handler uses.</para>
            </returns>
            <remarks>
            <para>This method queries the Filter Host to identify the appropriate IFilterobject to use for the URL item.</para>
            <para>
            The choice of filter is based on the file name extension, a CLSID that identifies the file's content type in the registry, or
            on the MIME content type. You need to provide only one of the three parameters to this method. If you provide multiple
            parameters, they are tested in the following order: pcwszContentType, pclsidObj, pcwszExtension. The first valid parameter is
            used to select the appropriate IFilter; the others are ignored.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IRowsetEvents">
            <summary>
            Exposes methods for receiving event notifications. When clients implement this interface, the indexer can notify the clients of
            changes to items in their rowsets: including the addition of new items, the deletion of items, and the modifcation to item data.
            </summary>
            <remarks>
            <para>When to Implement</para>
            <para>
            Implement <c>IRowsetEvents</c> if your provider needs to receive notifications of rowset events. <c>IRowsetEvents</c> exposes
            methods for receiving event notifications, and must be implemented to receive the following notifications on events:
            OnChangedItem, OnDeletedItem, OnNewItem and OnRowsetEvent. The ROWSETEVENT_ITEMSTATE and ROWSETEVENT_TYPE enumeratiors capture
            the item state and rowset event, respectively.
            </para>
            <para>
            Indexer eventing is a new feature for Windows 7 that allows providers to receive notifications on their rowsets. Providers can
            use eventing to maintain their rowsets in such a way that they behave akin to actual file system locations.
            </para>
            <para>The <c>IRowsetEvents</c> interface is registered by connection point with an open indexer rowset.</para>
            <para>
            <c>DBPROP_ENABLEROWSETEVENTS</c> must be set to <c>TRUE</c> with the OLE DB ICommandProperties::SetProperties method prior to
            executing the query in order to use rowset eventing.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IRowsetEvents.OnNewItem(Vanara.PInvoke.Ole32.PROPVARIANT,Vanara.PInvoke.SearchApi.ROWSETEVENT_ITEMSTATE)">
            <summary>
            Called by the indexer to notify clients of a new item that may match some (or all) of the criteria for the client rowset.
            </summary>
            <param name="itemID">
            <para>Type: <c>REFPROPVARIANT</c></para>
            <para>The new item that may match the original search criteria of the rowset.</para>
            </param>
            <param name="newItemState">
            <para>Type: <c>ROWSETEVENT_ITEMSTATE</c></para>
            <para>Specifies whether the new item matches all or some of the criteria for your rowset, as a ROWSETEVENT_ITEMSTATE enumeration.</para>
            </param>
            <remarks>
            The ROWSETEVENT_ITEMSTATE indicates the degree to which the new item may match the original search criteria of a rowset:
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IRowsetEvents.OnChangedItem(Vanara.PInvoke.Ole32.PROPVARIANT,Vanara.PInvoke.SearchApi.ROWSETEVENT_ITEMSTATE,Vanara.PInvoke.SearchApi.ROWSETEVENT_ITEMSTATE)">
            <summary>
            Called by the indexer to notify clients that an item has been modified. This item may have matched some (or all) of the
            criteria for the client rowset.
            </summary>
            <param name="itemID">
            <para>Type: <c>REFPROPVARIANT</c></para>
            <para>Specifies the item in the rowset that has changed.</para>
            </param>
            <param name="rowsetItemState">
            <para>Type: <c>ROWSETEVENT_ITEMSTATE</c></para>
            <para>Specifies whether the changed item was originally in the rowset.</para>
            </param>
            <param name="changedItemState">
            <para>Type: <c>ROWSETEVENT_ITEMSTATE</c></para>
            <para>Specifies whether the changed item is currently in the rowset, as a result of the change.</para>
            </param>
            <remarks>
            <para>The ROWSETEVENT_ITEMSTATE for rowsetItemState indicates whether the item was contained in the original rowset:</para>
            <list type="bullet">
            <item>
            <term>ROWSETEVENT_ITEMSTATE_INROWSET indicates that the item is definitely contained within your rowset.</term>
            </item>
            <item>
            <term>
            ROWSETEVENT_ITEMSTATE_UNKNOWN indicates that the item may be contained within your rowset. The containment status is not
            known because your rowset is not fully evaluated.
            </term>
            </item>
            <item>
            <term>ROWSETEVENT_ITEMSTATE_NOTINROWSET indicates indicates that the item was not originally in your rowset</term>
            </item>
            </list>
            <para>
            The ROWSETEVENT_ITEMSTATE for changedItemState indicates whether the newly modified item now matches the degree to which the
            new item may match the original search criteria of a rowset:
            </para>
            <list type="bullet">
            <item>
            <term>ROWSETEVENT_ITEMSTATE_INROWSET indicates that the item definitely belongs in your rowset.</term>
            </item>
            <item>
            <term>ROWSETEVENT_ITEMSTATE_UNKNOWN indicates that the item may now belong in your rowset.</term>
            </item>
            <item>
            <term>ROWSETEVENT_ITEMSTATE_NOTINROWSET indicates that the item does not belong in your rowset.</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IRowsetEvents.OnDeletedItem(Vanara.PInvoke.Ole32.PROPVARIANT,Vanara.PInvoke.SearchApi.ROWSETEVENT_ITEMSTATE)">
            <summary>
            Called by the indexer to notify clients that an item has been deleted. This item may have matched some (or all) of the search
            criteria for the client rowset.
            </summary>
            <param name="itemID">
            <para>Type: <c>REFPROPVARIANT</c></para>
            <para>Specifies the item in the rowset that has been deleted.</para>
            </param>
            <param name="deletedItemState">
            <para>Type: <c>ROWSETEVENT_ITEMSTATE</c></para>
            <para>Specifies whether the deleted item is currently in the rowset, as a ROWSETEVENT_ITEMSTATE enumeration.</para>
            </param>
            <remarks>The ROWSETEVENT_ITEMSTATE indicates whether or not the item was contained in the original rowset:</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IRowsetEvents.OnRowsetEvent(Vanara.PInvoke.SearchApi.ROWSETEVENT_TYPE,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>Called by the indexer to notify clients of an event related to the client rowset.</summary>
            <param name="eventType">
            <para>Type: <c>ROWSETEVENT_TYPE</c></para>
            <para>The event triggering the notification as the ROWSETEVENT_TYPE enumeration.</para>
            </param>
            <param name="eventData">
            <para>Type: <c>REFPROPVARIANT</c></para>
            <para>The expected value of the event data for the event type.</para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IRowsetPrioritization">
            <summary>Sets or retrieves the current indexer prioritization level for the scope specified by this query.</summary>
            <remarks>
            <para>
            This interface is acquired with IUnknown::QueryInterface Method on an indexer rowset. <c>DBPROP_ENABLEROWSETEVENTS</c> must be
            set to <c>TRUE</c> with the OLE DB ICommandProperties::SetProperties method prior to executing the query in order to use rowset prioritization.
            </para>
            <para>
            IRowsetPrioritization::SetScopePriority sets the prioritization for the scopes belonging to the query, and the interval the scope
            statistics event is raised when there are outstanding documents to be indexed within the query scopes. This event is raised if
            the priority level is set to default.
            </para>
            <para>
            IRowsetPrioritization::GetScopeStatistics can be used to get the number of indexed items in the scope, the number of outstanding
            documents to be added in the scope, and the number of documents that need to be re-indexed within this scope.
            </para>
            <para>
            The SearchEvents code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to prioritize indexing events.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IRowsetPrioritization.SetScopePriority(Vanara.PInvoke.SearchApi.PRIORITY_LEVEL,System.UInt32)">
            <summary>Sets the current indexer prioritization level for the scope specified by this query.</summary>
            <param name="priority">
            <para>Type: <c>PRIORITY_LEVEL</c></para>
            <para>Specifies the new indexer prioritization level to be set as the PRIORITY_LEVEL enumeration.</para>
            </param>
            <param name="scopeStatisticsEventFrequency">
            <para>Type: <c>DWORD</c></para>
            <para>
            Specifies the occurrence interval of the scope statistics event when there are outstanding documents to be indexed within the
            query scopes.
            </para>
            </param>
            <remarks>
            The SearchEvents code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to prioritize indexing events.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IRowsetPrioritization.GetScopePriority(Vanara.PInvoke.SearchApi.PRIORITY_LEVEL@,System.UInt32@)">
            <summary>Retrieves the current indexer prioritization level for the scope specified by this query.</summary>
            <param name="priority">
            <para>Type: <c>PRIORITY_LEVEL*</c></para>
            <para>The current indexer prioritization level as the PRIORITY_LEVEL enumeration.</para>
            </param>
            <param name="scopeStatisticsEventFrequency">
            <para>Type: <c>DWORD*</c></para>
            <para>
            The occurrence interval of the scope statistics event when there are outstanding documents to be indexed within the query scopes.
            </para>
            </param>
            <remarks>
            The SearchEvents code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to prioritize indexing events.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IRowsetPrioritization.GetScopeStatistics(System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Gets information describing the scope specified by this query.</summary>
            <param name="indexedDocumentCount">
            <para>Type: <c>DWORD*</c></para>
            <para>The total number of documents currently indexed in the scope.</para>
            </param>
            <param name="oustandingAddCount">
            <para>Type: <c>DWORD*</c></para>
            <para>The total number of documents yet to be indexed in the scope. These documents are not yet included in indexedDocumentCount.</para>
            </param>
            <param name="oustandingModifyCount">
            <para>Type: <c>DWORD*</c></para>
            <para>The total number of documents indexed in the scope that need to be re-indexed. These documents are included in indexedDocumentCount.</para>
            </param>
            <remarks>
            <para>
            Returns S_OK if successful, <c>HRESULT_FROM_WIN32(ERROR_PATH_NOT_FOUND)</c> if there are no indexed documents in the scope,
            or an error value otherwise.
            </para>
            <para>
            The <c>GetScopeStatistics</c> event can be used to get the number of indexed items in the scope, the number of outstanding
            docs to be added in the scope, and the number of docs that need to be re-indexed within this scope.
            </para>
            <para>
            The SearchEvents code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to prioritize indexing events.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchCatalogManager">
            <summary>Provides methods to manage a search catalog for purposes such as re-indexing or setting timeouts.</summary>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchCatalogManager.Name">
            <summary>Gets the name of the current catalog.</summary>
            <value>
            <para>Receives the name of the current catalog.</para>
            </value>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.GetParameter(System.String)">
            <summary>Not implemented.</summary>
            <param name="pszName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of the parameter to be retrieved.</para>
            </param>
            <returns>
            <para>Type: <c>PROPVARIANT**</c></para>
            <para>Receives a pointer to the value of the parameter.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.SetParameter(System.String,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>Sets a name/value parameter for the catalog.</summary>
            <param name="pszName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of the parameter to change.</para>
            </param>
            <param name="pValue">
            <para>Type: <c>PROPVARIANT*</c></para>
            <para>A pointer to the new value for the parameter.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.GetCatalogStatus(Vanara.PInvoke.SearchApi.CatalogStatus@,Vanara.PInvoke.SearchApi.CatalogPausedReason@)">
            <summary>Gets the status of the catalog.</summary>
            <param name="pStatus">
            <para>Type: <c>CatalogStatus*</c></para>
            <para>
            Receives a pointer to a value from the CatalogStatus enumeration. If pStatus is CATALOG_STATUS_PAUSED, further information
            can be obtained from the pPausedReason parameter.
            </para>
            </param>
            <param name="pPausedReason">
            <para>Type: <c>CatalogPausedReason*</c></para>
            <para>
            Receives a pointer to a value from the CatalogPausedReason enumeration describing why the catalog is paused. If the catalog
            status is not CATALOG_STATUS_PAUSED, this parameter receives the value CATALOG_PAUSED_REASON_NONE.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.Reset">
            <summary>Resets the underlying catalog by rebuilding the databases and performing a full indexing.</summary>
            <remarks>Resetting can take a very long time, during which little or no information is available to be searched.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.Reindex">
            <summary>Re-indexes all URLs in the catalog.</summary>
            <remarks>Old information remains in the catalog until replaced by new information during re-indexing.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.ReindexMatchingURLs(System.String)">
            <summary>Reindexes all items that match the provided pattern. This method was not implemented prior to Windows 7.</summary>
            <param name="pszPattern">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A pointer to the pattern to be matched for reindexing. The pattern can be a standard pattern such as or a pattern in the form
            of a URL such as .
            </para>
            </param>
            <remarks>This method is fully implemented for Windows 7.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.ReindexSearchRoot(System.String)">
            <summary>Re-indexes all URLs from a specified root.</summary>
            <param name="pszRootURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            Pointer to a null-terminated, Unicode buffer that contains the URL on which the search is rooted. This URL must be a search
            root previously registered with ISearchCrawlScopeManager::AddRoot.
            </para>
            </param>
            <remarks>
            <para>The indexer begins an incremental crawl of all start pages under pszRootURL upon successful return of method.</para>
            <para>Old information remains in the catalog until replaced by new information during the re-indexing.</para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchCatalogManager.ConnectTimeout">
            <summary>Gets or sets the connection time-out value in the TIMEOUT_INFO structure, in seconds.</summary>
            <value>
            <para>The number of seconds to wait for a connection response.</para>
            </value>
            <remarks>
            The indexer expects the first chunk of the document to be received within the connection time-out interval and any subsequent
            chunks to be received within the data time-out interval. These time-out values help prevent filters and protocol handlers
            from failing or causing performance issues.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchCatalogManager.DataTimeout">
            <summary>
            Sets the time-out value for data transactions between the indexer and the search filter host. This information is stored in
            the TIMEOUT_INFO structure and is measured in seconds.
            </summary>
            <value>
            <para>The number of seconds that the indexer will wait between chunks of data.</para>
            </value>
            <remarks>
            The indexer expects the first chunk of the document to be received within the connection time-out interval and any subsequent
            chunks to be received within the data time-out interval. These time-out values help prevent filters and protocol handlers
            from failing or causing performance issues.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.NumberOfItems">
            <summary>Gets the number of items in the catalog.</summary>
            <returns>
            <para>The number of items in the catalog.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.NumberOfItemsToIndex(System.Int32@,System.Int32@,System.Int32@)">
            <summary>Gets the number of items to be indexed within the catalog.</summary>
            <param name="plIncrementalCount">
            <para>Type: <c>LONG*</c></para>
            <para>Receives a pointer to the number of items to be indexed in the next incremental index.</para>
            </param>
            <param name="plNotificationQueue">
            <para>Type: <c>LONG*</c></para>
            <para>Receives a pointer to the number of items in the notification queue.</para>
            </param>
            <param name="plHighPriorityQueue">
            <para>Type: <c>LONG*</c></para>
            <para>
            Receives a pointer to the number of items in the high-priority queue. Items in the plHighPriorityQueue are indexed first.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.URLBeingIndexed">
            <summary>Gets the URL that is currently being indexed. If no indexing is currently in process, pszUrl is set to <c>NULL</c>.</summary>
            <returns>
            <para>The URL that is currently being indexed.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.GetURLIndexingState(System.String)">
            <summary>Not implemented.</summary>
            <param name="pszUrl">The URL.</param>
            <returns>The state.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.GetPersistentItemsChangedSink">
            <summary>
            Gets the change notification event sink interface for a client. This method is used by client applications and protocol
            handlers to notify the indexer of changes.
            </summary>
            <returns>
            <para>Receives the address of a pointer to a new ISearchPersistentItemsChangedSink interface for this catalog.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.RegisterViewForNotification(System.String,Vanara.PInvoke.SearchApi.ISearchViewChangedSink,System.UInt32@)">
            <summary>Not implemented.</summary>
            <param name="pszView">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to the name of the view.</para>
            </param>
            <param name="pViewChangedSink">
            <para>Type: <c>ISearchViewChangedSink*</c></para>
            <para>Pointer to the ISearchViewChangedSink object to receive notifications.</para>
            </param>
            <param name="pdwCookie">Type: <c>DWORD*</c></param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.GetItemsChangedSink(Vanara.PInvoke.SearchApi.ISearchNotifyInlineSite,System.Guid@,System.Object@,System.Guid@,System.Guid@,System.UInt32@)">
            <summary>Gets the change notification sink interface.</summary>
            <param name="pISearchNotifyInlineSite">
            <para>Type: <c>ISearchNotifyInlineSite*</c></para>
            <para>A pointer to your ISearchNotifyInlineSite interface.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>The UUID of the ISearchItemsChangedSink interface.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void*</c></para>
            <para>Receives a pointer to the ISearchItemsChangedSink interface.</para>
            </param>
            <param name="pGUIDCatalogResetSignature">
            <para>Type: <c>GUID*</c></para>
            <para>Receives a pointer to the GUID representing the catalog reset. If this GUID changes, all notifications must be resent.</para>
            </param>
            <param name="pGUIDCheckPointSignature">
            <para>Type: <c>GUID*</c></para>
            <para>Receives a pointer to the GUID representing a checkpoint.</para>
            </param>
            <param name="pdwLastCheckPointNumber">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number indicating the last checkpoint to be saved.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.UnregisterViewForNotification(System.UInt32)">
            <summary>Not implemented.</summary>
            <param name="dwCookie">Type: <c>DWORD</c></param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.SetExtensionClusion(System.String,System.Boolean)">
            <summary>Not implemented.</summary>
            <param name="pszExtension">Type: <c>LPCWSTR</c></param>
            <param name="fExclude">Type: <c>BOOL</c></param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.EnumerateExcludedExtensions">
            <summary>Not implemented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.GetQueryHelper">
            <summary>Gets the ISearchQueryHelper interface for the current catalog.</summary>
            <returns>
            <para>Type: <c>ISearchQueryHelper**</c></para>
            <para>Receives the address of a pointer to a new instance of the ISearchQueryHelper interface with default settings.</para>
            </returns>
            <remarks>
            After the ISearchQueryHelper interface is created, use the put... methods for this interface to change settings. Settings for
            the <c>ISearchQueryHelper</c> object are relevant only until the settings are changed again or the item is released. When the
            item is next created, settings are set to default values.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchCatalogManager.DiacriticSensitivity">
            <summary>
            Gets or sets a value that determines whether the catalog is sensitive to diacritics. A diacritic is a mark added to a letter
            to indicate a special phonetic value or pronunciation.
            </summary>
            <value>
            <para>
            A Boolean value that determines whether the catalog is sensitive to diacritics. <c>TRUE</c> if the catalog is sensitive to
            and recognizes diacritics; otherwise, <c>FALSE</c>.
            </para>
            </value>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager.GetCrawlScopeManager">
            <summary>Gets an ISearchCrawlScopeManager interface for this search catalog.</summary>
            <returns>
            <para>Receives a pointer to a new ISearchCrawlScopeManager interface.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchCatalogManager2">
            <summary>
            Extends the ISearchCatalogManager interface to manage a search catalog, for purposes such as re-indexing or setting timeouts.
            Applications can use this interface to attempt to reindex items that failed to be indexed previously, using the PrioritizeMatchingURLs.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.Name">
            <summary>Gets the name of the current catalog.</summary>
            <value>
            <para>Receives the name of the current catalog.</para>
            </value>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.GetParameter(System.String)">
            <summary>Not implemented.</summary>
            <param name="pszName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of the parameter to be retrieved.</para>
            </param>
            <returns>
            <para>Type: <c>PROPVARIANT**</c></para>
            <para>Receives a pointer to the value of the parameter.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.SetParameter(System.String,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>Sets a name/value parameter for the catalog.</summary>
            <param name="pszName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of the parameter to change.</para>
            </param>
            <param name="pValue">
            <para>Type: <c>PROPVARIANT*</c></para>
            <para>A pointer to the new value for the parameter.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.GetCatalogStatus(Vanara.PInvoke.SearchApi.CatalogStatus@,Vanara.PInvoke.SearchApi.CatalogPausedReason@)">
            <summary>Gets the status of the catalog.</summary>
            <param name="pStatus">
            <para>Type: <c>CatalogStatus*</c></para>
            <para>
            Receives a pointer to a value from the CatalogStatus enumeration. If pStatus is CATALOG_STATUS_PAUSED, further information
            can be obtained from the pPausedReason parameter.
            </para>
            </param>
            <param name="pPausedReason">
            <para>Type: <c>CatalogPausedReason*</c></para>
            <para>
            Receives a pointer to a value from the CatalogPausedReason enumeration describing why the catalog is paused. If the catalog
            status is not CATALOG_STATUS_PAUSED, this parameter receives the value CATALOG_PAUSED_REASON_NONE.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.Reset">
            <summary>Resets the underlying catalog by rebuilding the databases and performing a full indexing.</summary>
            <remarks>Resetting can take a very long time, during which little or no information is available to be searched.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.Reindex">
            <summary>Re-indexes all URLs in the catalog.</summary>
            <remarks>Old information remains in the catalog until replaced by new information during re-indexing.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.ReindexMatchingURLs(System.String)">
            <summary>Reindexes all items that match the provided pattern. This method was not implemented prior to Windows 7.</summary>
            <param name="pszPattern">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A pointer to the pattern to be matched for reindexing. The pattern can be a standard pattern such as or a pattern in the form
            of a URL such as .
            </para>
            </param>
            <remarks>This method is fully implemented for Windows 7.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.ReindexSearchRoot(System.String)">
            <summary>Re-indexes all URLs from a specified root.</summary>
            <param name="pszRootURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            Pointer to a null-terminated, Unicode buffer that contains the URL on which the search is rooted. This URL must be a search
            root previously registered with ISearchCrawlScopeManager::AddRoot.
            </para>
            </param>
            <remarks>
            <para>The indexer begins an incremental crawl of all start pages under pszRootURL upon successful return of method.</para>
            <para>Old information remains in the catalog until replaced by new information during the re-indexing.</para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.ConnectTimeout">
            <summary>Gets or sets the connection time-out value in the TIMEOUT_INFO structure, in seconds.</summary>
            <value>
            <para>The number of seconds to wait for a connection response.</para>
            </value>
            <remarks>
            The indexer expects the first chunk of the document to be received within the connection time-out interval and any subsequent
            chunks to be received within the data time-out interval. These time-out values help prevent filters and protocol handlers
            from failing or causing performance issues.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.DataTimeout">
            <summary>
            Sets the time-out value for data transactions between the indexer and the search filter host. This information is stored in
            the TIMEOUT_INFO structure and is measured in seconds.
            </summary>
            <value>
            <para>The number of seconds that the indexer will wait between chunks of data.</para>
            </value>
            <remarks>
            The indexer expects the first chunk of the document to be received within the connection time-out interval and any subsequent
            chunks to be received within the data time-out interval. These time-out values help prevent filters and protocol handlers
            from failing or causing performance issues.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.NumberOfItems">
            <summary>Gets the number of items in the catalog.</summary>
            <returns>
            <para>The number of items in the catalog.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.NumberOfItemsToIndex(System.Int32@,System.Int32@,System.Int32@)">
            <summary>Gets the number of items to be indexed within the catalog.</summary>
            <param name="plIncrementalCount">
            <para>Type: <c>LONG*</c></para>
            <para>Receives a pointer to the number of items to be indexed in the next incremental index.</para>
            </param>
            <param name="plNotificationQueue">
            <para>Type: <c>LONG*</c></para>
            <para>Receives a pointer to the number of items in the notification queue.</para>
            </param>
            <param name="plHighPriorityQueue">
            <para>Type: <c>LONG*</c></para>
            <para>
            Receives a pointer to the number of items in the high-priority queue. Items in the plHighPriorityQueue are indexed first.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.URLBeingIndexed">
            <summary>Gets the URL that is currently being indexed. If no indexing is currently in process, pszUrl is set to <c>NULL</c>.</summary>
            <returns>
            <para>The URL that is currently being indexed.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.GetURLIndexingState(System.String)">
            <summary>Not implemented.</summary>
            <param name="pszUrl">The URL.</param>
            <returns>The state.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.GetPersistentItemsChangedSink">
            <summary>
            Gets the change notification event sink interface for a client. This method is used by client applications and protocol
            handlers to notify the indexer of changes.
            </summary>
            <returns>
            <para>Receives the address of a pointer to a new ISearchPersistentItemsChangedSink interface for this catalog.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.RegisterViewForNotification(System.String,Vanara.PInvoke.SearchApi.ISearchViewChangedSink,System.UInt32@)">
            <summary>Not implemented.</summary>
            <param name="pszView">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to the name of the view.</para>
            </param>
            <param name="pViewChangedSink">
            <para>Type: <c>ISearchViewChangedSink*</c></para>
            <para>Pointer to the ISearchViewChangedSink object to receive notifications.</para>
            </param>
            <param name="pdwCookie">Type: <c>DWORD*</c></param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.GetItemsChangedSink(Vanara.PInvoke.SearchApi.ISearchNotifyInlineSite,System.Guid@,System.Object@,System.Guid@,System.Guid@,System.UInt32@)">
            <summary>Gets the change notification sink interface.</summary>
            <param name="pISearchNotifyInlineSite">
            <para>Type: <c>ISearchNotifyInlineSite*</c></para>
            <para>A pointer to your ISearchNotifyInlineSite interface.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>The UUID of the ISearchItemsChangedSink interface.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void*</c></para>
            <para>Receives a pointer to the ISearchItemsChangedSink interface.</para>
            </param>
            <param name="pGUIDCatalogResetSignature">
            <para>Type: <c>GUID*</c></para>
            <para>Receives a pointer to the GUID representing the catalog reset. If this GUID changes, all notifications must be resent.</para>
            </param>
            <param name="pGUIDCheckPointSignature">
            <para>Type: <c>GUID*</c></para>
            <para>Receives a pointer to the GUID representing a checkpoint.</para>
            </param>
            <param name="pdwLastCheckPointNumber">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number indicating the last checkpoint to be saved.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.UnregisterViewForNotification(System.UInt32)">
            <summary>Not implemented.</summary>
            <param name="dwCookie">Type: <c>DWORD</c></param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.SetExtensionClusion(System.String,System.Boolean)">
            <summary>Not implemented.</summary>
            <param name="pszExtension">Type: <c>LPCWSTR</c></param>
            <param name="fExclude">Type: <c>BOOL</c></param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.EnumerateExcludedExtensions">
            <summary>Not implemented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.GetQueryHelper">
            <summary>Gets the ISearchQueryHelper interface for the current catalog.</summary>
            <returns>
            <para>Type: <c>ISearchQueryHelper**</c></para>
            <para>Receives the address of a pointer to a new instance of the ISearchQueryHelper interface with default settings.</para>
            </returns>
            <remarks>
            After the ISearchQueryHelper interface is created, use the put... methods for this interface to change settings. Settings for
            the <c>ISearchQueryHelper</c> object are relevant only until the settings are changed again or the item is released. When the
            item is next created, settings are set to default values.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.DiacriticSensitivity">
            <summary>
            Gets or sets a value that determines whether the catalog is sensitive to diacritics. A diacritic is a mark added to a letter
            to indicate a special phonetic value or pronunciation.
            </summary>
            <value>
            <para>
            A Boolean value that determines whether the catalog is sensitive to diacritics. <c>TRUE</c> if the catalog is sensitive to
            and recognizes diacritics; otherwise, <c>FALSE</c>.
            </para>
            </value>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.GetCrawlScopeManager">
            <summary>Gets an ISearchCrawlScopeManager interface for this search catalog.</summary>
            <returns>
            <para>Receives a pointer to a new ISearchCrawlScopeManager interface.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCatalogManager2.PrioritizeMatchingURLs(System.String,Vanara.PInvoke.SearchApi.PRIORITIZE_FLAGS)">
            <summary>
            Instructs the indexer to give a higher priority to indexing items that have URLs that match a specified pattern. These items
            will then have a higher priority than other indexing tasks.
            </summary>
            <param name="pszPattern">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A string specifying the URL pattern that defines items that failed indexing and need re-indexing.</para>
            </param>
            <param name="dwPrioritizeFlags">
            <para>Type: <c>PRIORITIZE_FLAGS</c></para>
            <para>A value from the PRIORITIZE_FLAGS enumeration that specifies how to process items that the indexer has failed to index.</para>
            </param>
            <remarks>
            <para>
            The pszPattern string must specify a pattern than matches the entire item URL. You can use the asterisk wildcard character to
            create your pattern string.
            </para>
            <para>
            The PRIORITIZE_FLAG_IGNOREFAILURECOUNT flag is valid only in combination with the PRIORITIZE_FLAG_RETRYFAILEDITEMS flag.
            </para>
            <para>Examples</para>
            <para>The following examples show the use of the asterisk wildcard character and of the PRIORITIZE_FLAG_IGNOREFAILURECOUNT.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager">
            <summary>
            Provides methods that notify the search engine of containers to crawl and/or watch, and items under those containers to include
            or exclude when crawling or watching.
            </summary>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK, demonstrates
            how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager.AddDefaultScopeRule(System.String,System.Boolean,Vanara.PInvoke.SearchApi.FOLLOW_FLAGS)">
            <summary>Adds a URL as the default scope for this rule.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to a null-terminated, Unicode buffer that contains the URL to use as a default scope.</para>
            </param>
            <param name="fInclude">
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if pszUrl should be included in indexing; <c>FALSE</c> if it should be excluded.</para>
            </param>
            <param name="fFollowFlags">
            <para>Type: <c>DWORD</c></para>
            <para>Sets the FOLLOW_FLAGS to specify whether to follow complex URLs and whether a URL is to be indexed or just followed.</para>
            </param>
            <remarks>
            <para>
            Default scope rules provide an initial set of scope rules. User scope rules always take precedence over default scope rules,
            unless user-defined rules are reverted in which case the default scope rules are reinstated.
            </para>
            <para>
            URLs passed in as parameters to <c>ISearchCrawlScopeManager::AddDefaultScopeRule</c> are expected to be fully URL-decoded and
            without URL control codes. For example, file:c:\My Documents is fully URL-decoded, whereas file:c:\My%20Documents is not.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager.AddRoot(Vanara.PInvoke.SearchApi.ISearchRoot)">
            <summary>Adds a new search root to the search engine.</summary>
            <param name="pSearchRoot">
            <para>Type: <c>ISearchRoot*</c></para>
            <para>An ISearchRoot describing the new search root to add.</para>
            </param>
            <remarks>
            <para>Overrides any existing root definition for the URL.</para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager.RemoveRoot(System.String)">
            <summary>Removes a search root from the search engine.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The URL of a search root to be removed.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful; S_FALSE if the root is not found.</para>
            </returns>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager.EnumerateRoots(Vanara.PInvoke.SearchApi.IEnumSearchRoots@)">
            <summary>Returns an enumeration of all the roots of which this instance of the ISearchCrawlScopeManager is aware.</summary>
            <remarks>
            <para>ppSearchRoots is set to <c>NULL</c> if there are no roots to enumerate.</para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager.AddHierarchicalScope(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Adds a hierarchical scope to the search engine.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The URL of the scope to be added.</para>
            </param>
            <param name="fInclude">
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if this is an inclusion scope, <c>FALSE</c> if this is an exclusion scope.</para>
            </param>
            <param name="fDefault">
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if this is to be the default scope, <c>FALSE</c> if this is not a default scope.</para>
            </param>
            <param name="fOverrideChildren">
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if this scope overrides all of the child URL rules, <c>FALSE</c> otherwise.</para>
            </param>
            <remarks>
            <para>
            This method overrides existing scope rules for the URL.The preferred methods for such functionality are
            ISearchCrawlScopeManager::AddDefaultScopeRule and ISearchCrawlScopeManager::AddUserScopeRule.
            </para>
            <para>
            URLs passed in as parameters to <c>ISearchCrawlScopeManager::AddHierarchicalScope</c> are expected to be fully URL-decoded
            and without URL control codes. For example, file:c:\My Documents is fully URL-decoded, whereas file:c:\My%20Documents is not.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager.AddUserScopeRule(System.String,System.Boolean,System.Boolean,Vanara.PInvoke.SearchApi.FOLLOW_FLAGS)">
            <summary>Adds a new crawl scope rule when the user creates a new rule or adds a URL to be indexed.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The URL to be indexed.</para>
            </param>
            <param name="fInclude">
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if this should be included in all pszUrl searches; otherwise, <c>FALSE</c>.</para>
            </param>
            <param name="fOverrideChildren">
            <para>Type: <c>BOOL</c></para>
            <para>
            A <c>BOOL</c> value specifying whether child rules should be overridden. If set to <c>TRUE</c>, this essentially removes all
            child rules.
            </para>
            </param>
            <param name="fFollowFlags">
            <para>Type: <c>DWORD</c></para>
            <para>Sets the FOLLOW_FLAGS to specify whether to follow complex URLs and whether a URL is to be indexed or just followed.</para>
            </param>
            <remarks>
            <para>A scope rule can be a fully qualified URL or a rule with a pattern.</para>
            <para><c>ISearchCrawlScopeManager::AddUserScopeRule</c> overrides any existing scope rule for the URL or pattern.</para>
            <para>
            URLs passed in as parameters to <c>ISearchCrawlScopeManager::AddUserScopeRule</c> are expected to be fully URL-decoded and
            without URL control codes. For example, file:c:\My Documents is fully URL-decoded, whereas file:c:\My%20Documents is not.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager.RemoveScopeRule(System.String)">
            <summary>Removes a scope rule from the search engine.</summary>
            <param name="pszRule">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The URL or pattern of a scope rule to be removed.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful; returns S_FALSE if the scope rule is not found.</para>
            </returns>
            <remarks>
            <para>
            URLs passed in as parameters to <c>ISearchCrawlScopeManager::RemoveScopeRule</c> are expected to be fully URL-decoded and
            without URL control codes. For example, file:///c:\My Documents is fully URL-decoded, whereas file:///c:\My%20Documents is not.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager.EnumerateScopeRules(Vanara.PInvoke.SearchApi.IEnumSearchScopeRules@)">
            <summary>
            Returns an enumeration of all the scope rules of which this instance of the ISearchCrawlScopeManager interface is aware.
            </summary>
            <param name="ppSearchScopeRules">Returns a pointer to an IEnumSearchScopeRules interface.</param>
            <returns>Returns S_OK if successful, S_FALSE if there are no rules to enumerate, or an error value otherwise.</returns>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager.HasParentScopeRule(System.String)">
            <summary>Identifies whether a given URL has a parent rule in scope.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A string containing the URL to check for a parent rule. The string can contain wildcard characters, such as asterisks (*).
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL*</c></para>
            <para><c>TRUE</c> if pszURL has a parent rule; otherwise, <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager.HasChildScopeRule(System.String)">
            <summary>Identifies whether a given URL has a child rule in scope.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A string containing the URL to check for a child rule. The string can contain wildcard characters, such as asterisks (*).
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL*</c></para>
            <para><c>TRUE</c> if pszURL has a child rule; otherwise, <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager.IncludedInCrawlScope(System.String)">
            <summary>Retrieves an indicator of whether the specified URL is included in the crawl scope.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A string containing the URL to check for inclusion in the crawl scope.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL*</c></para>
            <para>A pointer to a <c>BOOL</c> value: <c>TRUE</c> if pszURL is included in the crawl scope; otherwise, <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            For hierarchical sources, the most immediate parent is included. For non-hierarchical sources like URLs, this will be only
            the URL rule itself. Other URLs that might be indexed will cause this method to retrieve <c>FALSE</c> because there is no way
            to tell whether they are in the scope.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager.ISearchCrawlScopeManager(System.String,System.Boolean@,Vanara.PInvoke.SearchApi.CLUSION_REASON@)">
            <summary>Retrieves an indicator of whether and why the specified URL is included in the crawl scope.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A string value indicating the URL to check for inclusion in the crawl scope.</para>
            </param>
            <param name="pfIsIncluded">
            <para>Type: <c>BOOL*</c></para>
            <para>A pointer to a <c>BOOL</c> value: <c>TRUE</c> if pszURL is included in the crawl scope; otherwise, <c>FALSE</c>.</para>
            </param>
            <param name="pReason">
            <para>Type: <c>CLUSION_REASON*</c></para>
            <para>
            Retrieves a pointer to a value from the CLUSION_REASON enumeration that indicates the reason that the specified URL was
            included in or excluded from the crawl scope.
            </para>
            </param>
            <remarks>
            <para>
            For hierarchical sources, the most immediate parent is included. For non-hierarchical sources like URLs, this will be only
            the URL rule itself. Other URLs that might be indexed will cause this method to retrieve <c>FALSE</c> because there is no way
            to tell whether they are in the scope.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager.RevertToDefaultScopes">
            <summary>Reverts to the default scopes.</summary>
            <remarks>
            <para>This method removes all user-defined rules and reverts the working set of crawls scope rules to the default rules.</para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager.SaveAll">
            <summary>Commits all changes to the search engine.</summary>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager.GetParentScopeVersionId(System.String)">
            <summary>Gets the version ID of the parent inclusion URL.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A string containing the current URL.</para>
            </param>
            <returns>
            <para>Type: <c>LONG*</c></para>
            <para>On return, contains a pointer to the version ID of the parent inclusion URL for <c>pszUrl</c>.</para>
            </returns>
            <remarks>
            <para>
            Use this method to determine whether the indexer is aware of a change in a data store or scope (for example, a data store is
            removed and then re-added to the index), potentially requiring a new push of the hierarchical parent of the store's URL.
            </para>
            <para>
            This ID can change if a scope rule is removed and then added again. This method returns <c>S_FALSE</c> if no parent inclusion
            URL was found.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager.RemoveDefaultScopeRule(System.String)">
            <summary>Removes a default scope rule from the search engine.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A string identifying the URL or pattern of the default rule to be removed.</para>
            </param>
            <remarks>
            <para>
            URLs passed in as parameters to <c>ISearchCrawlScopeManager::RemoveDefaultScopeRule</c> are expected to be fully URL-decoded
            and without URL control codes. For example, file:c:\My Documents is fully URL-decoded, whereas file:c:\My%20Documents is not.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2">
            <summary>
            Extends the ISearchCatalogManager interface to manage a search catalog, for purposes such as re-indexing or setting timeouts.
            Applications can use this interface to attempt to reindex items that failed to be indexed previously, using the PrioritizeMatchingURLs.
            </summary>
            <seealso cref="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.ISearchCrawlScopeManager(System.String,System.Boolean@,Vanara.PInvoke.SearchApi.CLUSION_REASON@)"/>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.AddDefaultScopeRule(System.String,System.Boolean,Vanara.PInvoke.SearchApi.FOLLOW_FLAGS)">
            <summary>Adds a URL as the default scope for this rule.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to a null-terminated, Unicode buffer that contains the URL to use as a default scope.</para>
            </param>
            <param name="fInclude">
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if pszUrl should be included in indexing; <c>FALSE</c> if it should be excluded.</para>
            </param>
            <param name="fFollowFlags">
            <para>Type: <c>DWORD</c></para>
            <para>Sets the FOLLOW_FLAGS to specify whether to follow complex URLs and whether a URL is to be indexed or just followed.</para>
            </param>
            <remarks>
            <para>
            Default scope rules provide an initial set of scope rules. User scope rules always take precedence over default scope rules,
            unless user-defined rules are reverted in which case the default scope rules are reinstated.
            </para>
            <para>
            URLs passed in as parameters to <c>ISearchCrawlScopeManager::AddDefaultScopeRule</c> are expected to be fully URL-decoded and
            without URL control codes. For example, file:c:\My Documents is fully URL-decoded, whereas file:c:\My%20Documents is not.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.AddRoot(Vanara.PInvoke.SearchApi.ISearchRoot)">
            <summary>Adds a new search root to the search engine.</summary>
            <param name="pSearchRoot">
            <para>Type: <c>ISearchRoot*</c></para>
            <para>An ISearchRoot describing the new search root to add.</para>
            </param>
            <remarks>
            <para>Overrides any existing root definition for the URL.</para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.RemoveRoot(System.String)">
            <summary>Removes a search root from the search engine.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The URL of a search root to be removed.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful; S_FALSE if the root is not found.</para>
            </returns>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.EnumerateRoots(Vanara.PInvoke.SearchApi.IEnumSearchRoots@)">
            <summary>Returns an enumeration of all the roots of which this instance of the ISearchCrawlScopeManager is aware.</summary>
            <remarks>
            <para>ppSearchRoots is set to <c>NULL</c> if there are no roots to enumerate.</para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.AddHierarchicalScope(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Adds a hierarchical scope to the search engine.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The URL of the scope to be added.</para>
            </param>
            <param name="fInclude">
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if this is an inclusion scope, <c>FALSE</c> if this is an exclusion scope.</para>
            </param>
            <param name="fDefault">
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if this is to be the default scope, <c>FALSE</c> if this is not a default scope.</para>
            </param>
            <param name="fOverrideChildren">
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if this scope overrides all of the child URL rules, <c>FALSE</c> otherwise.</para>
            </param>
            <remarks>
            <para>
            This method overrides existing scope rules for the URL.The preferred methods for such functionality are
            ISearchCrawlScopeManager::AddDefaultScopeRule and ISearchCrawlScopeManager::AddUserScopeRule.
            </para>
            <para>
            URLs passed in as parameters to <c>ISearchCrawlScopeManager::AddHierarchicalScope</c> are expected to be fully URL-decoded
            and without URL control codes. For example, file:c:\My Documents is fully URL-decoded, whereas file:c:\My%20Documents is not.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.AddUserScopeRule(System.String,System.Boolean,System.Boolean,Vanara.PInvoke.SearchApi.FOLLOW_FLAGS)">
            <summary>Adds a new crawl scope rule when the user creates a new rule or adds a URL to be indexed.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The URL to be indexed.</para>
            </param>
            <param name="fInclude">
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if this should be included in all pszUrl searches; otherwise, <c>FALSE</c>.</para>
            </param>
            <param name="fOverrideChildren">
            <para>Type: <c>BOOL</c></para>
            <para>
            A <c>BOOL</c> value specifying whether child rules should be overridden. If set to <c>TRUE</c>, this essentially removes all
            child rules.
            </para>
            </param>
            <param name="fFollowFlags">
            <para>Type: <c>DWORD</c></para>
            <para>Sets the FOLLOW_FLAGS to specify whether to follow complex URLs and whether a URL is to be indexed or just followed.</para>
            </param>
            <remarks>
            <para>A scope rule can be a fully qualified URL or a rule with a pattern.</para>
            <para><c>ISearchCrawlScopeManager::AddUserScopeRule</c> overrides any existing scope rule for the URL or pattern.</para>
            <para>
            URLs passed in as parameters to <c>ISearchCrawlScopeManager::AddUserScopeRule</c> are expected to be fully URL-decoded and
            without URL control codes. For example, file:c:\My Documents is fully URL-decoded, whereas file:c:\My%20Documents is not.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.RemoveScopeRule(System.String)">
            <summary>Removes a scope rule from the search engine.</summary>
            <param name="pszRule">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The URL or pattern of a scope rule to be removed.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful; returns S_FALSE if the scope rule is not found.</para>
            </returns>
            <remarks>
            <para>
            URLs passed in as parameters to <c>ISearchCrawlScopeManager::RemoveScopeRule</c> are expected to be fully URL-decoded and
            without URL control codes. For example, file:///c:\My Documents is fully URL-decoded, whereas file:///c:\My%20Documents is not.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.EnumerateScopeRules(Vanara.PInvoke.SearchApi.IEnumSearchScopeRules@)">
            <summary>
            Returns an enumeration of all the scope rules of which this instance of the ISearchCrawlScopeManager interface is aware.
            </summary>
            <param name="ppSearchScopeRules">Returns a pointer to an IEnumSearchScopeRules interface.</param>
            <returns>Returns S_OK if successful, S_FALSE if there are no rules to enumerate, or an error value otherwise.</returns>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.HasParentScopeRule(System.String)">
            <summary>Identifies whether a given URL has a parent rule in scope.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A string containing the URL to check for a parent rule. The string can contain wildcard characters, such as asterisks (*).
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL*</c></para>
            <para><c>TRUE</c> if pszURL has a parent rule; otherwise, <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.HasChildScopeRule(System.String)">
            <summary>Identifies whether a given URL has a child rule in scope.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A string containing the URL to check for a child rule. The string can contain wildcard characters, such as asterisks (*).
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL*</c></para>
            <para><c>TRUE</c> if pszURL has a child rule; otherwise, <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.IncludedInCrawlScope(System.String)">
            <summary>Retrieves an indicator of whether the specified URL is included in the crawl scope.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A string containing the URL to check for inclusion in the crawl scope.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL*</c></para>
            <para>A pointer to a <c>BOOL</c> value: <c>TRUE</c> if pszURL is included in the crawl scope; otherwise, <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            For hierarchical sources, the most immediate parent is included. For non-hierarchical sources like URLs, this will be only
            the URL rule itself. Other URLs that might be indexed will cause this method to retrieve <c>FALSE</c> because there is no way
            to tell whether they are in the scope.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.ISearchCrawlScopeManager(System.String,System.Boolean@,Vanara.PInvoke.SearchApi.CLUSION_REASON@)">
            <summary>Retrieves an indicator of whether and why the specified URL is included in the crawl scope.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A string value indicating the URL to check for inclusion in the crawl scope.</para>
            </param>
            <param name="pfIsIncluded">
            <para>Type: <c>BOOL*</c></para>
            <para>A pointer to a <c>BOOL</c> value: <c>TRUE</c> if pszURL is included in the crawl scope; otherwise, <c>FALSE</c>.</para>
            </param>
            <param name="pReason">
            <para>Type: <c>CLUSION_REASON*</c></para>
            <para>
            Retrieves a pointer to a value from the CLUSION_REASON enumeration that indicates the reason that the specified URL was
            included in or excluded from the crawl scope.
            </para>
            </param>
            <remarks>
            <para>
            For hierarchical sources, the most immediate parent is included. For non-hierarchical sources like URLs, this will be only
            the URL rule itself. Other URLs that might be indexed will cause this method to retrieve <c>FALSE</c> because there is no way
            to tell whether they are in the scope.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.RevertToDefaultScopes">
            <summary>Reverts to the default scopes.</summary>
            <remarks>
            <para>This method removes all user-defined rules and reverts the working set of crawls scope rules to the default rules.</para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.SaveAll">
            <summary>Commits all changes to the search engine.</summary>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.GetParentScopeVersionId(System.String)">
            <summary>Gets the version ID of the parent inclusion URL.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A string containing the current URL.</para>
            </param>
            <returns>
            <para>Type: <c>LONG*</c></para>
            <para>On return, contains a pointer to the version ID of the parent inclusion URL for <c>pszUrl</c>.</para>
            </returns>
            <remarks>
            <para>
            Use this method to determine whether the indexer is aware of a change in a data store or scope (for example, a data store is
            removed and then re-added to the index), potentially requiring a new push of the hierarchical parent of the store's URL.
            </para>
            <para>
            This ID can change if a scope rule is removed and then added again. This method returns <c>S_FALSE</c> if no parent inclusion
            URL was found.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.RemoveDefaultScopeRule(System.String)">
            <summary>Removes a default scope rule from the search engine.</summary>
            <param name="pszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A string identifying the URL or pattern of the default rule to be removed.</para>
            </param>
            <remarks>
            <para>
            URLs passed in as parameters to <c>ISearchCrawlScopeManager::RemoveDefaultScopeRule</c> are expected to be fully URL-decoded
            and without URL control codes. For example, file:c:\My Documents is fully URL-decoded, whereas file:c:\My%20Documents is not.
            </para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchCrawlScopeManager2.GetVersion(System.Int32@,Vanara.PInvoke.HFILE@)">
            <summary>
            Causes file mapping to be mapped into the address space of the calling process, and informs clients if the state of the Crawl
            Scope Manager (CSM) has changed.
            </summary>
            <param name="plVersion">
            <para>Type: <c>LONG**</c></para>
            <para>Receives a pointer to the address of a memory mapped file that contains the crawl scope version.</para>
            </param>
            <param name="phFileMapping">
            <para>Type: <c>HANDLE*</c></para>
            <para>
            Receives a pointer to the handle of the file mapping object, with read-only access, that was used to create the memory mapped
            file that contains the crawl scope version.
            </para>
            </param>
            <remarks>
            <para>
            The version number that is retrieved is always current, and changes as the state of the CSM, such as whether additions or
            removals were made to the crawl scope, for example. Hence, <c>ISearchCrawlScopeManager2::GetVersion</c> needs to be called
            only once, because the current version always remains available through the retrieved pointer.
            </para>
            <para>
            <c>ISearchCrawlScopeManager2::GetVersion</c> does not result in a cross-process call. If the method succeeds, then the client
            must perform the following actions to destroy all file views in its address space, and then close the file mapping object's
            handle and the file on disk:
            </para>
            <list type="bullet">
            <item>
            <term>Call <c>UnmapViewOfFile</c> using the pointer of the memory-mapped file provided by plVersion</term>
            </item>
            <item>
            <term>Call <c>CloseHandle</c> using the handle of the file mapping object</term>
            </item>
            </list>
            <para>The client must perform these steps when finished using the memory mapped file, to prevent memory leaks.</para>
            <para>
            The CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to define command
            line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchItemsChangedSink">
            <summary>
            Provides notifications for changes to indexed items. Also provides notification of the hierarchical scope that is being monitored
            for changed items.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchItemsChangedSink.StartedMonitoringScope(System.String)">
            <summary>Permits an index-managed notification source to add itself to a list of "monitored scopes".</summary>
            <param name="pszUrl">The PSZ URL.</param>
            <remarks>
            When a notification agent comes online it calls StartedMonitoringScope which adds the scope to the list of sources. If the
            source is new (removed previously by StoppedMonitoringScope, or never created in the first place) the indexer starts an
            incremental crawl of the corresponding document store. This is designed to pick up any changes in the store that occurred
            while the notification agent was offline.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchItemsChangedSink.StoppedMonitoringScope(System.String)">
            <summary>Not implemented.</summary>
            <param name="pszUrl">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The pointer to a null-terminated, Unicode string containing the start address for the scope of monitoring.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchItemsChangedSink.OnItemsChanged(System.UInt32,Vanara.PInvoke.SearchApi.SEARCH_ITEM_CHANGE[],System.UInt32[],Vanara.PInvoke.HRESULT[])">
            <summary>Call this method to notify an indexer to re-index some changed items.</summary>
            <param name="dwNumberOfChanges">
            <para>Type: <c>DWORD</c></para>
            <para>The number of items that have changed.</para>
            </param>
            <param name="rgDataChangeEntries">
            <para>Type: <c>SEARCH_ITEM_CHANGE[]</c></para>
            <para>An array of SEARCH_ITEM_CHANGE structures, describing the type of changes to and the paths or URLs of each item.</para>
            </param>
            <param name="rgdwDocIds">
            <para>Type: <c>DWORD[]</c></para>
            <para>Receives a pointer to an array of document identifiers for the items that changed.</para>
            </param>
            <param name="rghrCompletionCodes">
            <para>Type: <c>HRESULT[]</c></para>
            <para>Receives a pointer to an array of completion codes for rgdwDocIds indicating whether each item was accepted for indexing.</para>
            </param>
            <remarks>
            When there are multiple change notifications, the <c>priority</c> member of the SEARCH_ITEM_CHANGE structure indicates the
            priority of processing.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchLanguageSupport">
            <summary>Provides methods for accessing thesaurus information.</summary>
            <remarks>
            A thesaurus file contains a word and a list of words to substitute when querying. It is specific to a catalog and can be defined
            in more than one file.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchLanguageSupport.SetDiacriticSensitivity(System.Boolean)">
            <summary>
            Sets a value that indicates whether an implemented ISearchLanguageSupport interface is sensitive to diacritics. A diacritic
            is an accent mark added to a letter to indicate a special phonetic value or pronunciation.
            </summary>
            <param name="fDiacriticSensitive">
            <para>Type: <c>BOOL</c></para>
            <para>
            A Boolean value that indicates whether the interface is sensitive to diacritics. The default setting is <c>FALSE</c>,
            indicating that the interface ignores diacritical characters.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchLanguageSupport.GetDiacriticSensitivity">
            <summary>
            Gets the sensitivity of an implemented ISearchLanguageSupport interface to diacritics. A diacritic is an accent mark added to
            a letter to indicate a special phonetic value or pronunciation.
            </summary>
            <returns>
            <para>Type: <c>BOOL*</c></para>
            <para>
            On return, contains a pointer to the sensitivity setting. <c>FALSE</c> indicates that the interface ignores diacritics;
            <c>TRUE</c> indicates the interface recognizes diacritics.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchLanguageSupport.LoadWordBreaker(System.UInt32,System.Guid@,System.Object@,System.UInt32@)">
            <summary>Retrieves an interface to the word breaker registered for the specified language code identifier (LCID).</summary>
            <param name="lcid">
            <para>Type: <c>LCID</c></para>
            <para>The LCID requested.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>IID of the interface to be queried.</para>
            </param>
            <param name="ppWordBreaker">
            <para>Type: <c>void**</c></para>
            <para>On return, contains the address of a pointer to the interface of the LCID contained in pLcidUsed.</para>
            </param>
            <param name="pLcidUsed">
            <para>Type: <c>LCID*</c></para>
            <para>On return, contains a pointer to the actual LCID used.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchLanguageSupport.LoadStemmer(System.UInt32,System.Guid@,System.Object@,System.UInt32@)">
            <summary>Retrieves an interface to the word stemmer registered for the specified language code identifier (LCID).</summary>
            <param name="lcid">
            <para>Type: <c>LCID</c></para>
            <para>The LCID requested.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>IID of the interface to be queried.</para>
            </param>
            <param name="ppStemmer">
            <para>Type: <c>void**</c></para>
            <para>On return, contains the address of a pointer to the interface of the LCID contained in pLcidUsed.</para>
            </param>
            <param name="pLcidUsed">
            <para>Type: <c>LCID*</c></para>
            <para>On return, contains a pointer to the actual LCID used.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchLanguageSupport.IsPrefixNormalized(System.String,System.UInt32,System.String,System.UInt32,System.UInt32@)">
            <summary>
            Determines whether the query token is a prefix of the document token, disregarding case, width, and (optionally) diacritics.
            </summary>
            <param name="pwcsQueryToken">
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to the prefix to search for.</para>
            </param>
            <param name="cwcQueryToken">
            <para>Type: <c>ULONG</c></para>
            <para>The size of pwcsQueryToken.</para>
            </param>
            <param name="pwcsDocumentToken">
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to the document to be searched.</para>
            </param>
            <param name="cwcDocumentToken">
            <para>Type: <c>ULONG</c></para>
            <para>The size of pwcsDocumentToken.</para>
            </param>
            <param name="pulPrefixLength">
            <para>Type: <c>ULONG*</c></para>
            <para>
            Returns a pointer to the number of characters matched in pwcsDocumentToken. Typically, but not necessarily, the number of
            characters in pwcsQueryToken.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            If pwcsQueryToken is a prefix of pwcsDocumentToken, returns S_OK; otherwise returns S_FALSE, and pulPrefixLength is set to zero.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchManager">
            <summary>
            Provides methods for controlling the Search service. This interface manages settings and objects that affect the search engine
            across catalogs.
            </summary>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which files to
            re-index and how.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchManager.GetIndexerVersionStr">
            <summary>Retrieves the version of the current indexer as a single string.</summary>
            <returns>The version of the current indexer.</returns>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchManager.GetIndexerVersion(System.UInt32@,System.UInt32@)">
            <summary>
            Retrieves the version of the current indexer in two chunks: the major version signifier and the minor version signifier.
            </summary>
            <param name="pdwMajor">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives the major version signifier (the number to the left of the dot).</para>
            </param>
            <param name="pdwMinor">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives the minor version signifier (the number to the right of the dot).</para>
            </param>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchManager.GetParameter(System.String)">
            <summary>
            <para>Not supported.</para>
            <para>This method returns E_INVALIDARG when called.</para>
            </summary>
            <param name="pszName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>There are currently no valid parameters in this version of search (WDS 3.0).</para>
            </param>
            <returns>
            <para>Type: <c>PROPVARIANT**</c></para>
            <para>Returns a value in an undefined state as there are no properties currently defined to retrieve values from.</para>
            </returns>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchManager.SetParameter(System.String,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>
            <para>Not supported.</para>
            <para>This method returns E_INVALIDARG when called.</para>
            </summary>
            <param name="pszName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>There are currently no valid parameters to pass or retrieve.</para>
            </param>
            <param name="pValue">
            <para>Type: <c>PROPVARIANT*</c></para>
            <para>As there are no valid parameters currently configured, there are no valid parameters to pass to this method.</para>
            </param>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchManager.ProxyName">
            <summary>Retrieves the proxy name to be used by the protocol handler.</summary>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchManager.BypassList">
            <summary>
            Gets a proxy bypass list from the indexer. This list is used to determine which items or URLs are local and do not need to go
            through the proxy server. This list is set by calling ISearchManager::SetProxy.
            </summary>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>Receives a pointer to the proxy bypass list that is stored in the indexer.</para>
            </returns>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchManager.SetProxy(Vanara.PInvoke.SearchApi.PROXY_ACCESS,System.Boolean,System.UInt32,System.String,System.String)">
            <summary>Stores information in the indexer that determines how the indexer will work and communicate with a proxy server.</summary>
            <param name="sUseProxy">
            <para>Type: <c>PROXY_ACCESS</c></para>
            <para>Sets whether and how to use a proxy, using one of the values enumerated in PROXY_ACCESS.</para>
            </param>
            <param name="fLocalByPassProxy">
            <para>Type: <c>BOOL</c></para>
            <para>Sets whether the proxy server should be bypassed for local items and URLs.</para>
            </param>
            <param name="dwPortNumber">
            <para>Type: <c>DWORD</c></para>
            <para>Sets the port number that the index will use to talk to the proxy server.</para>
            </param>
            <param name="pszProxyName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A null-terminated Unicode string containing the name of the proxy server to use.</para>
            </param>
            <param name="pszByPassList">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A null-terminated Unicode string containing a comma-delimited list of items that are considered local by the indexer and are
            not to be accessed through a proxy server.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchManager.GetCatalog(System.String)">
            <summary>Retrieves a catalog by name and creates a new ISearchCatalogManager object for that catalog.</summary>
            <param name="pszCatalog">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of the catalog to be retrieved.</para>
            </param>
            <returns>
            <para>Type: <c>ISearchCatalogManager**</c></para>
            <para>Receives the address of a pointer to the ISearchCatalogManager object that is named in pszCatalog.</para>
            </returns>
            <remarks>
            <para>Currently Microsoft Windows Desktop Search (WDS) 3.0 supports only one catalog and it is named SystemIndex.</para>
            <para>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchManager.UserAgent">
            <summary>Gets or sets the user agent string.</summary>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchManager.UseProxy">
            <summary>Retrieves the proxy server to be used.</summary>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchManager.LocalBypass">
            <summary>Retrieves a value that determines whether the proxy server should be bypassed to find the item or URL.</summary>
            <remarks>
            <para>
            Proxy servers are used as a gateway between the local area network (LAN) and the Internet, primarily for security. A proxy
            server accepts requests for information (on other networks or the Internet) from internal systems such as servers or work
            stations. The proxy server then forwards the request to the Internet resource, which keeps the address of the requesting
            system anonymous. When the information returns from the Internet resource, the proxy server routes the information back to
            the requesting system. For content on the LAN, it is not necessary to go through the proxy server to access your content;
            this potentially saves time and extra steps.
            </para>
            <para>
            The value retrieved by this method helps the indexer identify how to work with content that is on a local domain or network.
            For nonlocal content, going through the proxy server may be appropriate, if not necessary.
            </para>
            <para>
            The setting to bypass the proxy for local domains is stored in the indexer and is set by calling the ISearchManager::SetProxy method.
            </para>
            <para>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchManager.PortNumber">
            <summary>
            Retrieves the port number used to communicate with the proxy server. This port number is stored in the indexer and is set by
            the ISearchManager::SetProxy method.
            </summary>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchManager2">
            <summary>Enabled applications to create and delete custom catalogs in the Windows Search indexer</summary>
            <remarks>
            <para>ISearchManager interface ref: http://msdn.microsoft.com/en-us/library/bb231485(VS.85).aspx Managing the Index ref: http://msdn.microsoft.com/en-us/library/bb266516(VS.85).aspx</para>
            <para>The new functionality is exposed through the new ISearchManager2 interface. Apps can call QueryInterface on the existing ISearchManager interface to get the new interface. On older versions of Windows where this functionality does not exist the QueryInterface call will fail, and not return the new interface. The existing ISearchManager interface can be used unchanged.</para>
            <para>Errors are returned through HRESULTs returned on each method in the standard way COM. ISupportErrorInfo / IErrorInfo are not supported. No exceptions are thrown.</para>
            <para>These methods can be called in any COM apartment, and the behavior will not be impacted by the type of apartment. These APIs is safe to call on a UI thread but this is not recommended practice as the APIs involve cross-process IO and other potentially long-running operations.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchManager2.GetIndexerVersionStr">
            <summary>Retrieves the version of the current indexer as a single string.</summary>
            <returns>The version of the current indexer.</returns>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchManager2.GetIndexerVersion(System.UInt32@,System.UInt32@)">
            <summary>
            Retrieves the version of the current indexer in two chunks: the major version signifier and the minor version signifier.
            </summary>
            <param name="pdwMajor">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives the major version signifier (the number to the left of the dot).</para>
            </param>
            <param name="pdwMinor">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives the minor version signifier (the number to the right of the dot).</para>
            </param>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchManager2.GetParameter(System.String)">
            <summary>
            <para>Not supported.</para>
            <para>This method returns E_INVALIDARG when called.</para>
            </summary>
            <param name="pszName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>There are currently no valid parameters in this version of search (WDS 3.0).</para>
            </param>
            <returns>
            <para>Type: <c>PROPVARIANT**</c></para>
            <para>Returns a value in an undefined state as there are no properties currently defined to retrieve values from.</para>
            </returns>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchManager2.SetParameter(System.String,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>
            <para>Not supported.</para>
            <para>This method returns E_INVALIDARG when called.</para>
            </summary>
            <param name="pszName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>There are currently no valid parameters to pass or retrieve.</para>
            </param>
            <param name="pValue">
            <para>Type: <c>PROPVARIANT*</c></para>
            <para>As there are no valid parameters currently configured, there are no valid parameters to pass to this method.</para>
            </param>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchManager2.ProxyName">
            <summary>Retrieves the proxy name to be used by the protocol handler.</summary>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchManager2.BypassList">
            <summary>
            Gets a proxy bypass list from the indexer. This list is used to determine which items or URLs are local and do not need to go
            through the proxy server. This list is set by calling ISearchManager::SetProxy.
            </summary>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>Receives a pointer to the proxy bypass list that is stored in the indexer.</para>
            </returns>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchManager2.SetProxy(Vanara.PInvoke.SearchApi.PROXY_ACCESS,System.Boolean,System.UInt32,System.String,System.String)">
            <summary>Stores information in the indexer that determines how the indexer will work and communicate with a proxy server.</summary>
            <param name="sUseProxy">
            <para>Type: <c>PROXY_ACCESS</c></para>
            <para>Sets whether and how to use a proxy, using one of the values enumerated in PROXY_ACCESS.</para>
            </param>
            <param name="fLocalByPassProxy">
            <para>Type: <c>BOOL</c></para>
            <para>Sets whether the proxy server should be bypassed for local items and URLs.</para>
            </param>
            <param name="dwPortNumber">
            <para>Type: <c>DWORD</c></para>
            <para>Sets the port number that the index will use to talk to the proxy server.</para>
            </param>
            <param name="pszProxyName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A null-terminated Unicode string containing the name of the proxy server to use.</para>
            </param>
            <param name="pszByPassList">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A null-terminated Unicode string containing a comma-delimited list of items that are considered local by the indexer and are
            not to be accessed through a proxy server.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchManager2.GetCatalog(System.String)">
            <summary>Retrieves a catalog by name and creates a new ISearchCatalogManager object for that catalog.</summary>
            <param name="pszCatalog">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of the catalog to be retrieved.</para>
            </param>
            <returns>
            <para>Type: <c>ISearchCatalogManager**</c></para>
            <para>Receives the address of a pointer to the ISearchCatalogManager object that is named in pszCatalog.</para>
            </returns>
            <remarks>
            <para>Currently Microsoft Windows Desktop Search (WDS) 3.0 supports only one catalog and it is named SystemIndex.</para>
            <para>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchManager2.UserAgent">
            <summary>Gets or sets the user agent string.</summary>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchManager2.UseProxy">
            <summary>Retrieves the proxy server to be used.</summary>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchManager2.LocalBypass">
            <summary>Retrieves a value that determines whether the proxy server should be bypassed to find the item or URL.</summary>
            <remarks>
            <para>
            Proxy servers are used as a gateway between the local area network (LAN) and the Internet, primarily for security. A proxy
            server accepts requests for information (on other networks or the Internet) from internal systems such as servers or work
            stations. The proxy server then forwards the request to the Internet resource, which keeps the address of the requesting
            system anonymous. When the information returns from the Internet resource, the proxy server routes the information back to
            the requesting system. For content on the LAN, it is not necessary to go through the proxy server to access your content;
            this potentially saves time and extra steps.
            </para>
            <para>
            The value retrieved by this method helps the indexer identify how to work with content that is on a local domain or network.
            For nonlocal content, going through the proxy server may be appropriate, if not necessary.
            </para>
            <para>
            The setting to bypass the proxy for local domains is stored in the indexer and is set by calling the ISearchManager::SetProxy method.
            </para>
            <para>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchManager2.PortNumber">
            <summary>
            Retrieves the port number used to communicate with the proxy server. This port number is stored in the indexer and is set by
            the ISearchManager::SetProxy method.
            </summary>
            <remarks>
            The ReindexMatchingUrls code sample, available on Code Gallery and the Windows 7 SDK, demonstrates ways to specify which
            files to re-index and how.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchManager2.CreateCatalog(System.String,Vanara.PInvoke.SearchApi.ISearchCatalogManager@)">
            <summary>Creates a new custom catalog in the Windows Search indexer and returns a reference to it.</summary>
            <param name="pszCatalog">
            Name of catalog to create. Can be any name selected by the caller, must contain only standard alphanumeric characters and underscore.
            </param>
            <param name="ppCatalogManager">
            On success a reference to the created catalog is returned as an ISearchCatalogManager interface pointer. The Release() must
            be called on this interface after the calling application has finished using it.
            </param>
            <returns>
            HRESULT indicating status of operation: S_OK - Catalog did not previously exist and was created.Reference to catalog
            returned. S_FALSE - Catalog previously existed, reference to catalog returned.
            </returns>
            <remarks>
            Called to create a new catalog in the Windows Search indexer. After creation, the methods on the returned
            <c>ISearchCatalog</c> manager can be used to add locations to be indexed, monitor indexing process, and construct queries to
            send to the indexer and get results. See the “Managing the Index” documentation for more info: https://msdn.microsoft.com/en-us/library/bb266516(VS.85).aspx
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchManager2.DeleteCatalog(System.String)">
            <summary>Deletes an existing catalog and all associated indexed data from the Windows Search indexer.</summary>
            <param name="pszCatalog">
            <para>Type: <c>LPCWSTR</c></para>
            <para>Name of catalog to delete. The catalog must at some prior time have been created with a call to CreateCatalog().</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>HRESULT indicating status of operation:</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>Catalog previously existed and has now been successfully deleted.</term>
            </item>
            <item>
            <term>S_FALSE</term>
            <term>Catalog did not previously existed, no change.</term>
            </item>
            </list>
            <para>FAILED HRESULT: Failure deleting catalog or invalid arguments passed.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchNotifyInlineSite">
            <summary>Provides methods the Search service uses to send updates on catalog and index status to notification providers.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchNotifyInlineSite.OnItemIndexedStatusChange(Vanara.PInvoke.SearchApi.SEARCH_INDEXING_PHASE,System.UInt32,Vanara.PInvoke.SearchApi.SEARCH_ITEM_INDEXING_STATUS[])">
            <summary>Called by the search service to notify the client when the status of a particular document or item changes.</summary>
            <param name="sipStatus">
            <para>Type: <c>SEARCH_INDEXING_PHASE</c></para>
            <para>The SEARCH_INDEXING_PHASE status of each document in the array being sent.</para>
            </param>
            <param name="dwNumEntries">
            <para>Type: <c>DWORD</c></para>
            <para>The number of entries in rgItemStatusEntries.</para>
            </param>
            <param name="rgItemStatusEntries">
            <para>Type: <c>SEARCH_ITEM_INDEXING_STATUS[]</c></para>
            <para>An array of SEARCH_ITEM_INDEXING_STATUS structures containing status update information.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchNotifyInlineSite.OnCatalogStatusChange(System.Guid@,System.Guid@,System.UInt32)">
            <summary>Called by the search service to notify a client when the status of the catalog changes.</summary>
            <param name="guidCatalogResetSignature">
            <para>Type: <c>REFGUID</c></para>
            <para>A GUID representing the catalog reset. If this GUID changes, all notifications must be resent.</para>
            </param>
            <param name="guidCheckPointSignature">
            <para>Type: <c>REFGUID</c></para>
            <para>
            A GUID representing the last checkpoint restored. If this GUID changes, all notifications accumulated since the last saved
            checkpoint must be resent.
            </para>
            </param>
            <param name="dwLastCheckPointNumber">
            <para>Type: <c>DWORD</c></para>
            <para>A number indicating the last checkpoint saved.</para>
            </param>
            <remarks>
            <para>
            When a catalog checkpoint occurs, the search service updates the dwLastCheckPointNumber, and all notifications sent prior to
            that checkpoint are safe and recoverable in the event of a service failure. Notification providers need to track only those
            notifications sent between checkpoints and must resend them if the catalog is restored or reset.
            </para>
            <para>
            If a catalog restore occurs, the search service rolls back the catalog to the last saved checkpoint and updates the
            guidCheckPointSignature. In this situation, notification providers must resend all notifications accumulated since the most
            recent saved checkpoint, as identified by the dwLastCheckPointNumber parameter.
            </para>
            <para>
            If a catalog reset occurs, the search service resets the entire catalog and updates the guidCatalogResetSignature. The
            notification provider must resend its entire crawl scope.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchPersistentItemsChangedSink">
            <summary>Provides methods for passing change notifications to alert the indexer that items need to be updated.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchPersistentItemsChangedSink.StartedMonitoringScope(System.String)">
            <summary>
            Called by a notifications provider to notify the indexer to monitor changes to items within a specified hierarchical scope.
            </summary>
            <param name="pszUrl">
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to a null-terminated Unicode string that is the start address for the scope to be monitored.</para>
            </param>
            <remarks>
            <para>
            When notification loss occurs, a notification agent comes online and calls StartedMonitoringScope, which permits an
            index-managed notification source to add itself to a list of "monitored scopes". The indexer starts an incremental crawl of
            the corresponding document store. The indexer crawls these scopes incrementally until the extreme conditions that caused the
            loss of notifications are no longer present. This method ensures that any changes in the store that occur during a period of
            notification loss are detected.
            </para>
            <para>
            Under normal circumstances, the list of monitored scopes is not used. Notification loss is rare, and usually occurs only when
            disk space is extremely low.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchPersistentItemsChangedSink.StoppedMonitoringScope(System.String)">
            <summary>
            Called by a notifications provider to notify the indexer to stop monitoring changes to items within a specified hierarchical scope.
            </summary>
            <param name="pszUrl">
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to a null-terminated Unicode string that is the address for the scope to stop monitoring.</para>
            </param>
            <remarks>
            When the notifications provider responsible for monitoring changes in the document store goes offline, it calls
            <c>ISearchPersistentItemsChangedSink::StoppedMonitoringScope</c> to remove the scope from the list of notification sources.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchPersistentItemsChangedSink.OnItemsChanged(System.UInt32,Vanara.PInvoke.SearchApi.SEARCH_ITEM_PERSISTENT_CHANGE[],Vanara.PInvoke.HRESULT[])">
            <summary>Notifies the indexer to index changed items.</summary>
            <param name="dwNumberOfChanges">
            <para>Type: <c>DWORD</c></para>
            <para>The number of changes being reported.</para>
            </param>
            <param name="DataChangeEntries">
            <para>Type: <c>SEARCH_ITEM_PERSISTENT_CHANGE[]</c></para>
            <para>An array of structures of type SEARCH_ITEM_PERSISTENT_CHANGE identifying the details for each change.</para>
            </param>
            <param name="hrCompletionCodes">
            <para>Type: <c>HRESULT[]</c></para>
            <para>Indicates whether each URL was accepted for indexing.</para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchProtocol">
            <summary>
            <para>
            Provides methods for invoking, initializing, and managing IUrlAccessor objects. Methods in this interface are called by the
            protocol host when processing URLs from the gatherer.
            </para>
            <para>
            The protocol handler implements the protocol for accessing a content source in its native format. Use this interface to implement
            a custom protocol handler to expand the data sources that can be indexed.
            </para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchProtocol.Init(Vanara.PInvoke.SearchApi.TIMEOUT_INFO@,Vanara.PInvoke.SearchApi.IProtocolHandlerSite,Vanara.PInvoke.SearchApi.PROXY_INFO@)">
            <summary>Initializes a protocol handler.</summary>
            <param name="pTimeoutInfo">
            <para>Type: <c>TIMEOUT_INFO*</c></para>
            <para>Pointer to a TIMEOUT_INFO structure that contains information about connection time-outs.</para>
            </param>
            <param name="pProtocolHandlerSite">
            <para>Type: <c>IProtocolHandlerSite*</c></para>
            <para>Pointer to an IProtocolHandlerSite interface that enables protocol handlers to access IFiltearwithin the filter host.</para>
            </param>
            <param name="pProxyInfo">
            <para>Type: <c>PROXY_INFO*</c></para>
            <para>
            Pointer to a PROXY_INFO structure that contains information about the proxy settings necessary for accessing items in the
            content source.
            </para>
            </param>
            <remarks>
            <para>
            After the protocol handler is created, this method is called to perform any initialization specific to the protocol handler.
            This method is not called again.
            </para>
            <para>
            Because the protocol host may unexpectedly terminate before calling ISearchProtocol::ShutDown, protocol handlers with
            persistent information, such as temporary files and registry entries, should do an initial clean-up of resources previously
            opened in this method before starting the current instance.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchProtocol.CreateAccessor(System.String,Vanara.PInvoke.SearchApi.AUTHENTICATION_INFO@,Vanara.PInvoke.SearchApi.INCREMENTAL_ACCESS_INFO@,Vanara.PInvoke.SearchApi.ITEM_INFO@)">
            <summary>Creates and initializes an IUrlAccessor object.</summary>
            <param name="pcwszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to a null-terminated Unicode string containing the URL of the item being accessed.</para>
            </param>
            <param name="pAuthenticationInfo">
            <para>Type: <c>AUTHENTICATION_INFO*</c></para>
            <para>
            Pointer to an AUTHENTICATION_INFO structure that contains authentication information necessary for accessing this item in the
            content source.
            </para>
            </param>
            <param name="pIncrementalAccessInfo">
            <para>Type: <c>INCREMENTAL_ACCESS_INFO*</c></para>
            <para>
            Pointer to an INCREMENTAL_ACCESS_INFO structure that contains incremental access information, such as the last time the file
            was accessed by the gatherer.
            </para>
            </param>
            <param name="pItemInfo">
            <para>Type: <c>ITEM_INFO*</c></para>
            <para>
            Pointer to an ITEM_INFO structure that contains information about the URL item, such as the name of the item's workspace catalog.
            </para>
            </param>
            <returns>
            <para>Type: <c>IUrlAccessor**</c></para>
            <para>
            Receives the address of a pointer to the IUrlAccessor object created by this method. This object contains information about
            the URL item, such as the item's file name.
            </para>
            </returns>
            <remarks>
            The protocol host calls this method on the protocol handler once for every URL processed by the gatherer and retrieves a
            pointer to the IUrlAccessor object. This method creates and initializes an <c>IUrlAccessor</c> object to process an item
            currently being accessed by the gatherer.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchProtocol.CloseAccessor(Vanara.PInvoke.SearchApi.IUrlAccessor)">
            <summary>Closes a previously created IUrlAccessor object.</summary>
            <param name="pAccessor">
            <para>Type: <c>IUrlAccessor*</c></para>
            <para>Pointer to the IUrlAccessor object that was used to process the current URL item.</para>
            </param>
            <remarks>
            <para>
            The protocol host will release the pAccessor pointer passed to this method when this method returns. Use this method to
            release any resources associated with the IUrlAccessor object, freeing it for reuse by the protocol handler.
            </para>
            <para>
            Accessors can be created and maintained in a pool, as resources to be used by protocol handlers when needed, and this might
            improve performance. If you are implementing a pool of IUrlAccessor objects, use IUnknown::AddRef to add an
            <c>IUrlAccessor</c> to your pool.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchProtocol.ShutDown">
            <summary>Shuts down the protocol handler.</summary>
            <remarks>
            <para>This method is called by the protocol host to enable the protocol handler to clean up and release any associated resources.</para>
            <para>
            The protocol host makes one call to this method before it exits. After this method is called, this instance will not be used
            any more. However, it is also possible for the protocol host process to terminate abruptly without calling this method.
            Protocol handlers that have persisted global states, such as registry entries and temporary files, should verify that those
            resources are cleaned up in the ISearchProtocol::Init method before initialization.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchProtocol2">
            <summary>
            Provides methods for invoking, initializing, and managing IUrlAccessor objects. Methods in this interface are called by the
            protocol host when processing URLs from the gatherer.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchProtocol2.Init(Vanara.PInvoke.SearchApi.TIMEOUT_INFO@,Vanara.PInvoke.SearchApi.IProtocolHandlerSite,Vanara.PInvoke.SearchApi.PROXY_INFO@)">
            <summary>Initializes a protocol handler.</summary>
            <param name="pTimeoutInfo">
            <para>Type: <c>TIMEOUT_INFO*</c></para>
            <para>Pointer to a TIMEOUT_INFO structure that contains information about connection time-outs.</para>
            </param>
            <param name="pProtocolHandlerSite">
            <para>Type: <c>IProtocolHandlerSite*</c></para>
            <para>Pointer to an IProtocolHandlerSite interface that enables protocol handlers to access IFiltearwithin the filter host.</para>
            </param>
            <param name="pProxyInfo">
            <para>Type: <c>PROXY_INFO*</c></para>
            <para>
            Pointer to a PROXY_INFO structure that contains information about the proxy settings necessary for accessing items in the
            content source.
            </para>
            </param>
            <remarks>
            <para>
            After the protocol handler is created, this method is called to perform any initialization specific to the protocol handler.
            This method is not called again.
            </para>
            <para>
            Because the protocol host may unexpectedly terminate before calling ISearchProtocol::ShutDown, protocol handlers with
            persistent information, such as temporary files and registry entries, should do an initial clean-up of resources previously
            opened in this method before starting the current instance.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchProtocol2.CreateAccessor(System.String,Vanara.PInvoke.SearchApi.AUTHENTICATION_INFO@,Vanara.PInvoke.SearchApi.INCREMENTAL_ACCESS_INFO@,Vanara.PInvoke.SearchApi.ITEM_INFO@)">
            <summary>Creates and initializes an IUrlAccessor object.</summary>
            <param name="pcwszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to a null-terminated Unicode string containing the URL of the item being accessed.</para>
            </param>
            <param name="pAuthenticationInfo">
            <para>Type: <c>AUTHENTICATION_INFO*</c></para>
            <para>
            Pointer to an AUTHENTICATION_INFO structure that contains authentication information necessary for accessing this item in the
            content source.
            </para>
            </param>
            <param name="pIncrementalAccessInfo">
            <para>Type: <c>INCREMENTAL_ACCESS_INFO*</c></para>
            <para>
            Pointer to an INCREMENTAL_ACCESS_INFO structure that contains incremental access information, such as the last time the file
            was accessed by the gatherer.
            </para>
            </param>
            <param name="pItemInfo">
            <para>Type: <c>ITEM_INFO*</c></para>
            <para>
            Pointer to an ITEM_INFO structure that contains information about the URL item, such as the name of the item's workspace catalog.
            </para>
            </param>
            <returns>
            <para>Type: <c>IUrlAccessor**</c></para>
            <para>
            Receives the address of a pointer to the IUrlAccessor object created by this method. This object contains information about
            the URL item, such as the item's file name.
            </para>
            </returns>
            <remarks>
            The protocol host calls this method on the protocol handler once for every URL processed by the gatherer and retrieves a
            pointer to the IUrlAccessor object. This method creates and initializes an <c>IUrlAccessor</c> object to process an item
            currently being accessed by the gatherer.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchProtocol2.CloseAccessor(Vanara.PInvoke.SearchApi.IUrlAccessor)">
            <summary>Closes a previously created IUrlAccessor object.</summary>
            <param name="pAccessor">
            <para>Type: <c>IUrlAccessor*</c></para>
            <para>Pointer to the IUrlAccessor object that was used to process the current URL item.</para>
            </param>
            <remarks>
            <para>
            The protocol host will release the pAccessor pointer passed to this method when this method returns. Use this method to
            release any resources associated with the IUrlAccessor object, freeing it for reuse by the protocol handler.
            </para>
            <para>
            Accessors can be created and maintained in a pool, as resources to be used by protocol handlers when needed, and this might
            improve performance. If you are implementing a pool of IUrlAccessor objects, use IUnknown::AddRef to add an
            <c>IUrlAccessor</c> to your pool.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchProtocol2.ShutDown">
            <summary>Shuts down the protocol handler.</summary>
            <remarks>
            <para>This method is called by the protocol host to enable the protocol handler to clean up and release any associated resources.</para>
            <para>
            The protocol host makes one call to this method before it exits. After this method is called, this instance will not be used
            any more. However, it is also possible for the protocol host process to terminate abruptly without calling this method.
            Protocol handlers that have persisted global states, such as registry entries and temporary files, should verify that those
            resources are cleaned up in the ISearchProtocol::Init method before initialization.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchProtocol2.CreateAccessorEx(System.String,Vanara.PInvoke.SearchApi.AUTHENTICATION_INFO@,Vanara.PInvoke.SearchApi.INCREMENTAL_ACCESS_INFO@,Vanara.PInvoke.SearchApi.ITEM_INFO@,Vanara.PInvoke.Ole32.BLOB@)">
            <summary>
            Creates and initializes an IUrlAccessor object. This method has the same basic functionality as the
            ISearchProtocol::CreateAccessor method, but it includes an additional <c>pUserData</c> parameter to supply additional data to
            the protocol handler.
            </summary>
            <param name="pcwszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to a null-terminated Unicode string containing the URL of the item being accessed.</para>
            </param>
            <param name="pAuthenticationInfo">
            <para>Type: <c>AUTHENTICATION_INFO*</c></para>
            <para>
            Pointer to an AUTHENTICATION_INFO structure that contains authentication information necessary for accessing this item in the
            content source.
            </para>
            </param>
            <param name="pIncrementalAccessInfo">
            <para>Type: <c>INCREMENTAL_ACCESS_INFO*</c></para>
            <para>
            Pointer to an INCREMENTAL_ACCESS_INFO structure that contains incremental access information, such as the last time the file
            was accessed by the gatherer.
            </para>
            </param>
            <param name="pItemInfo">
            <para>Type: <c>ITEM_INFO*</c></para>
            <para>
            Pointer to an ITEM_INFO structure that contains information about the URL item, such as the name of the item's workspace catalog.
            </para>
            </param>
            <param name="pUserData">
            <para>Type: <c>const BLOB*</c></para>
            <para>
            Pointer to user information. This data can be whatever the notification originator decides. If the protocol handler
            implements this interface, it will receive this data. Not all notifications have this blob set.
            </para>
            </param>
            <returns>
            <para>Type: <c>IUrlAccessor**</c></para>
            <para>
            Receives the address of a pointer to the IUrlAccessor object created by this method. This object contains information about
            the URL item, such as the item's file name.
            </para>
            </returns>
            <remarks>
            This method creates and initializes an IUrlAccessor object to process an item currently being accessed by the gatherer. The
            protocol host calls this method on the protocol handler. This method is called once for every URL processed by the gatherer
            and retrieves a pointer to the <c>IUrlAccessor</c> object.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchProtocolThreadContext">
            <summary>
            This optional interface enables the protocol handler to perform an action on the thread used for filtering in the protocol host.
            When the protocol host starts, it first initializes all the protocol handlers, and then it creates the filtering thread(s). The
            methods on this interface enable protocol handlers to manage their resources that are used by a filtering thread.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchProtocolThreadContext.ThreadInit">
            <summary>Initializes communication between the protocol handler and the protocol host.</summary>
            <remarks>
            After being created by the protocol host, a thread calls this method on the protocol handler to initialize communication
            between the protocol handler and its host. Depending on the protocol handler, the host might need to provide some per-thread
            context (for example, a logon session).
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchProtocolThreadContext.ThreadShutdown">
            <summary>Notifies the protocol handler that the thread is being shut down.</summary>
            <remarks>
            When the protocol host is shut down, it calls this method as the last operation before terminating the filtering thread.
            Depending on the protocol handler, there might be some per-thread context, such as a logon session, that the protocol handler
            needs to clean up.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchProtocolThreadContext.ThreadIdle(System.UInt32)">
            <summary>
            Notifies the protocol handler that the filtering thread is idle, so that the protocol handler can clean up any cache it might
            have built up.
            </summary>
            <param name="dwTimeElaspedSinceLastCallInMS">
            <para>Type: <c>DWORD</c></para>
            <para>Passes the idle time, in milliseconds, to the protocol handler.</para>
            </param>
            <remarks>
            This method is called when the filtering thread is waiting for new requests from the indexer service so the protocol handler
            can use this idle time to clean up.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchQueryHelper">
            <summary>
            Provides methods for building a query from user input, converting a query to Windows Search SQL, and obtaining a connection
            string to initialize a connection to the Window Search index.
            </summary>
            <remarks>
            <para>
            This interface is obtained by calling ISearchCatalogManager::GetQueryHelper. Implement this interface as a helper class to ISearchCatalogManager.
            </para>
            <para>
            This interface facilitates the generation of SQL queries using Advanced Query Syntax (AQS) or Natural Query Syntax (NQS). Clients
            can submit the SQL query to the Window Search engine by using OLE DB or Microsoft ActiveX Data Objects (ADO).
            </para>
            <para>
            ISearchQueryHelper::GenerateSQLFromUserQuery uses regional locale settings. However, <c>ISearchQueryHelper</c> does not use the
            regional locale settings. As a result, there are inconsistencies in the SQL returned from
            <c>ISearchQueryHelper::GenerateSQLFromUserQuery</c> and <c>ISearchQueryHelper</c> for region specific settings such as date
            formats, for example.
            </para>
            <para>
            The DSearch code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to create a class for a static console
            application to query Windows Search using the Microsoft.Search.Interop assembly for <c>ISearchQueryHelper</c>.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchQueryHelper.ConnectionString">
            <summary>Returns the OLE DB connection string for the Window Search index.</summary>
            <value>
            A string that is a valid OLE DB connection string. This connection string can be used to initialize a connection to the
            Windows Search index and submit the SQL query returned by ISearchQueryHelper::GenerateSQLFromUserQuery.
            </value>
            <remarks>
            <para>
            A connection string is a string version of the initialization properties needed to connect to a data store. The string can
            include such things as a data source, data source name, or user ID and password.
            </para>
            <para>
            The DSearch code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to create a class for a static
            console application to query Windows Search using the Microsoft.Search.Interop assembly for ISearchQueryHelper.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchQueryHelper.QueryContentLocale">
            <summary>Gets or sets the language code identifier (LCID) of the query.</summary>
            <value>
            <para>The LCID of the query.</para>
            </value>
            <remarks>
            <para>
            The locale identifier has the components necessary to uniquely identify one of the installed system-defined locales. The LCID
            controls a number of settings including numeric format, date format, currency format, uppercase and lowercase mapping,
            dictionary sort ordering, tokenization, and others. Although these settings help Windows operating system and Windows Search
            API provide excellent localized support, unexpected results can occur when documents from one locale are searched by a system
            set for another locale.
            </para>
            <para>
            When the IFilter object processes a document's text properties and content, it reports the language of that document to the
            content indexer. Using this information, the Search API can apply the appropriate word breaker and noise-words list.
            </para>
            <para>
            The locale is used for word breaking, normalizing, and stemming the string values that are extracted from the query string.
            If this method is not used (so the content locale is not set), ISearchQueryHelper::get_QueryContentLocale returns the active
            input locale.
            </para>
            <para>
            The DSearch code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to create a class for a static
            console application to query Windows Search using the Microsoft.Search.Interop assembly for ISearchQueryHelper.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchQueryHelper.QueryKeywordLocale">
            <summary>
            Gets or sets the language code identifier (LCID) for the locale to use when parsing Advanced Query Syntax (AQS) keywords.
            </summary>
            <value>The LCID for the locale to use when parsing Advanced Query Syntax (AQS) keywords.</value>
            <remarks>
            The DSearch code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to create a class for a static
            console application to query Windows Search using the Microsoft.Search.Interop assembly for ISearchQueryHelper.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchQueryHelper.QueryTermExpansion">
            <summary>Gets or sets a value that specifies how query terms are to be expanded.</summary>
            <value>
            <para>Value from the SEARCH_TERM_EXPANSION enumeration that specifies the search term expansion. The default value is SEARCH_TERM_PREFIX_ALL.</para>
            </value>
            <remarks>
            <para>
            The <c>ISearchQueryHelper::put_QueryTermExpansion</c> method allows for expansion of some query terms with wildcard
            characters, similar to regular expression expansion.
            </para>
            <para>
            While the SEARCH_TERM_EXPANSION enumerated type lets you specify stem expansion, Windows Search does not currently support
            its use with the ISearchQueryHelper interface.
            </para>
            <para>
            The DSearch code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to create a class for a static
            console application to query Windows Search using the Microsoft.Search.Interop assembly for ISearchQueryHelper.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchQueryHelper.QuerySyntax">
            <summary>Gets or sets the syntax of the query.</summary>
            <value>
            <para>
            Flag that specifies the search query syntax. For a list of possible values, see the description of the SEARCH_QUERY_SYNTAX
            enumerated type.
            </para>
            </value>
            <remarks>
            <para>
            The allowed syntaxes are Simple, Natural Query Syntax (NQS), and Advanced Query Syntax (AQS). If not set, the default query
            syntax is SEARCH_ADVANCED_QUERY_SYNTAX.
            </para>
            <para>
            The DSearch code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to create a class for a static
            console application to query Windows Search using the Microsoft.Search.Interop assembly for ISearchQueryHelper.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchQueryHelper.QueryContentProperties">
            <summary>Gets or sets the properties to include in the query if search terms do not explicitly specify properties.</summary>
            <value>
            <para>
            Pointer to a comma-delimited, null-terminated Unicode string of one or more properties. Separate column specifiers with
            commas: "Content,DocAuthor".
            </para>
            <para>Set ppszContentProperties to <c>NULL</c> to use all properties.</para>
            </value>
            <remarks>
            <para>
            Search terms may or may not be explicitly prefixed by a property ("author:Irina" or just "Irina"). If
            SEARCH_ADVANCED_QUERY_SYNTAX or NO_QUERY_SYNTAX is set in ISearchQueryHelper::put_QuerySyntax, all search terms not prefixed
            by a property keyword are matched against the list of properties in ppszContentProperties.
            </para>
            <para>
            The DSearch code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to create a class for a static
            console application to query Windows Search using the Microsoft.Search.Interop assembly for ISearchQueryHelper.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchQueryHelper.QuerySelectColumns">
            <summary>Gets or sets the columns (or properties) requested in the select statement.</summary>
            <value>
            <para>
            A comma-delimited, null-terminated string that specifies one or more columns in the property store. Separate multiple column
            specifiers with commas: "System.Document.Author,System.Document.Title".
            </para>
            </value>
            <remarks>
            <para>
            No defined and fixed set of properties applies to all documents. For this reason, the SQL asterisk is not permitted in the
            &lt;columns&gt; setting. For a list of valis Shell system properties, refer to System Properties.
            </para>
            <para>
            The DSearch code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to create a class for a static
            console application to query Windows Search using the Microsoft.Search.Interop assembly for ISearchQueryHelper.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchQueryHelper.QueryWhereRestrictions">
            <summary>Gets or sets the restrictions appended to a query in WHERE clauses.</summary>
            <value>
            <para>
            A comma-delimited null-terminated string that specifies one or more query restrictions appended to the query in generated
            WHERE clause.
            </para>
            </value>
            <remarks>
            <para>pszRestrictions must be a valid WHERE clause for Windows Search SQL (without the WHERE keyword).</para>
            <para>
            When you create pszRestrictions with multiple restrictions, additional "WHERE" clauses concatenated to the first must start
            with "AND" or "OR". For example: "and contains(*, 'qqq')"
            </para>
            <para>
            The DSearch code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to create a class for a static
            console application to query Windows Search using the Microsoft.Search.Interop assembly for ISearchQueryHelper.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchQueryHelper.QuerySorting">
            <summary>Sets the sort order for the query result set.</summary>
            <value>
            <para>A comma-delimited, null-terminated Unicode string that specifies the sort order.</para>
            </value>
            <remarks>
            <para>
            ppszSorting must be a valid ORDER BY clause (without the ORDER BY keyword). Windows Search SQL supports sorting on multiple
            properties, in either ascending (ASC) or descending (DESC) order on each property. For example, ppszSorting might contain the following:
            </para>
            <para>
            The DSearch code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to create a class for a static
            console application to query Windows Search using the Microsoft.Search.Interop assembly for ISearchQueryHelper.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchQueryHelper.GenerateSQLFromUserQuery(System.String)">
            <summary>
            Generates a Structured Query Language (SQL) query based on a client-supplied query string expressed in either Advanced Query
            Syntax (AQS) or Natural Query Syntax (NQS).
            </summary>
            <param name="pszQuery">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a null-terminated Unicode string containing a query in AQS or NQS.</para>
            </param>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>Receives the address of a pointer to a SQL query string based on the query in the pszQuery parameter.</para>
            </returns>
            <remarks>
            <para>This method generates SQL in the following form:</para>
            <para>
            The SQL generation uses the settings specified in ISearchQueryHelper::put_QueryTermExpansion,
            ISearchQueryHelper::put_QueryContentProperties, and ISearchQueryHelper::put_QueryContentLocale.
            </para>
            <para>
            <c>ISearchQueryHelper::GenerateSQLFromUserQuery</c> uses regional locale settings. However, ISearchQueryHelper does not use
            the regional locale settings. As a result, there are inconsistencies in the SQL returned from
            <c>ISearchQueryHelper::GenerateSQLFromUserQuery</c> and <c>ISearchQueryHelper</c> for region specific settings such as date
            formats. For example, if you set the locale for date/time to something other than the system locale, such as en-CA if the
            system locale is en-US, and enter , the SQL returned will differ. The SQL from
            <c>ISearchQueryHelper::GenerateSQLFromUserQuery</c> will have parsed 3/7/2008 according to en-CA (seeking items dated 3rd of
            July, 2008) while the SQL from <c>ISearchQueryHelper</c> will have parsed 3/7/2008 according to en-US (seeking items dated
            7th of March, 2008).
            </para>
            <para>
            The DSearch code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to create a class for a static
            console application to query Windows Search using the Microsoft.Search.Interop assembly for ISearchQueryHelper.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchQueryHelper.WriteProperties(System.Int32,System.UInt32,Vanara.PInvoke.Ole32.PROPERTYKEY[],Vanara.PInvoke.SearchApi.SEARCH_COLUMN_PROPERTIES[],System.Runtime.InteropServices.ComTypes.FILETIME@)">
            <summary>Not implemented.</summary>
            <param name="itemID">
            <para>Type: <c>int</c></para>
            <para>The ItemID that is to be affected. The ItemID is used to store the items unique identifier, such as a DocID.</para>
            </param>
            <param name="dwNumberOfColumns">
            <para>Type: <c>DWORD</c></para>
            <para>The number of properties being written.</para>
            </param>
            <param name="pColumns">
            Type: <c>PROPERTYKEY*</c>
            <para>An array of <c>PROPERTYKEY</c> structures that represent the properties.</para>
            </param>
            <param name="pValues">
            <para>Type: <c>SEARCH_COLUMN_PROPERTIES*</c></para>
            <para>Pointer to an array of SEARCH_COLUMN_PROPERTIES structures that hold the property values.</para>
            </param>
            <param name="pftGatherModifiedTime">
            <para>Type: <c>FILETIME*</c></para>
            <para>
            A pointer to the last modified time for the item being written. This time stamp is used later to see if an item has been
            changed and requires updating.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchQueryHelper.QueryMaxResults">
            <summary>Sets the maximum number of results to be returned by a query.</summary>
            <value>
            <para>The maximum number of results to be returned. Negative numbers return all results.</para>
            </value>
            <remarks>
            The DSearch code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to create a class for a static
            console application to query Windows Search using the Microsoft.Search.Interop assembly for ISearchQueryHelper.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchRoot">
            <summary>
            Provides methods for manipulating a search root. Changes to property members are applied to any URL that falls under the search
            root. A URL falls under a search root if it matches the search root URL or is a hierarchical child of that URL.
            </summary>
            <remarks>
            The CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to define command line
            options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchRoot.Schedule">
            <summary>The name of the task to be inserted.</summary>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchRoot.RootURL">
            <summary>Sets the URL of the current search root.</summary>
            <remarks>
            The CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to define command
            line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchRoot.IsHierarchical">
            <summary>Sets a value that indicates whether the search is rooted on a hierarchical tree structure.</summary>
            <remarks>
            The CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to define command
            line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchRoot.ProvidesNotifications">
            <summary>
            Sets a value that indicates whether the search engine is notified (by protocol handlers or other applications) about changes
            to the URLs under the search root.
            </summary>
            <remarks>
            <para>That value that <c>ISearchRoot::put_ProvidesNotifications</c> sets is not protocol specific.</para>
            <para>
            The CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to define command
            line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchRoot.UseNotificationsOnly">
            <summary>Sets a value that indicates whether this search root should be indexed only by notification and not crawled.</summary>
            <remarks>
            <para>
            For search root URLs in a custom data store or on a remote system, it can be useful to limit the search engine to indexing
            the URLs only if the store or system has sent notifications that something has changed. This might help to reduce traffic in
            the store or across the network by avoiding the incremental crawls when the store is unchanged.
            </para>
            <para>
            The CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to define command
            line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchRoot.EnumerationDepth">
            <summary>Sets the enumeration depth for this search root.</summary>
            <remarks>
            The CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to define command
            line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchRoot.HostDepth">
            <summary>
            <para>[ <c>put_HostDepth</c> may be altered or unavailable in subsequent versions of the operating system or product.]</para>
            <para>Sets a value that indicates how far into a host tree to crawl when indexing.</para>
            </summary>
            <remarks>
            The CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to define command
            line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchRoot.FollowDirectories">
            <summary>
            Sets a <c>BOOL</c> value that indicates whether the search engine should follow subdirectories and hierarchical scopes for
            this search root.
            </summary>
            <remarks>
            The CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to define command
            line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchRoot.AuthenticationType">
            <summary>Sets the type of authentication required to access the URLs under this search root.</summary>
            <remarks>
            The CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to define command
            line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchRoot.User">
            <summary>Not implemented.</summary>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchRoot.Password">
            <summary>Not implemented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchScopeRule">
            <summary>Provides methods to define scope rules for crawling and indexing.</summary>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK, demonstrates
            how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchScopeRule.PatternOrURL">
            <summary>Gets the pattern or URL for the rule. The scope rules determine what URLs or paths to include or exclude.</summary>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            On return, contains the address of a pointer to a null-terminated, Unicode buffer that contains the pattern or URL string.
            </para>
            </returns>
            <remarks>
            <para>A standard URL might look like this:</para>
            <para>A pattern might look like this:</para>
            <para>Only exclusion rules use patterns.</para>
            <para>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchScopeRule.IsIncluded">
            <summary>
            Gets a value identifying whether this rule is an inclusion rule. Inclusion rules identify scopes that should be included in
            the crawl scope.
            </summary>
            <returns>
            <para>Type: <c>BOOL*</c></para>
            <para>On return, points to <c>TRUE</c> if this rule is an inclusion rule, <c>FALSE</c> otherwise.</para>
            </returns>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchScopeRule.IsDefault">
            <summary>Gets a value that identifies whether this is a default rule.</summary>
            <returns>
            <para>Type: <c>BOOL*</c></para>
            <para>On return, points to the <c>TRUE</c> for default rules and <c>FALSE</c> otherwise.</para>
            </returns>
            <remarks>
            <c>Windows 7 and later</c>: the CrawlScopeCommandLine code sample, available on Code Gallery and the Windows 7 SDK,
            demonstrates how to define command line options for Crawl Scope Manager (CSM) indexing operations.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.SearchApi.ISearchScopeRule.FollowFlags">
            <summary>
            <para>Not supported.</para>
            <para>This method returns E_InvalidArg when called.</para>
            </summary>
            <returns>
            <para>Type: <c>DWORD*</c></para>
            <para>Returns a pointer to a value that contains the follow flags.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchViewChangedSink">
            <summary>Not implemented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchViewChangedSink.OnChange(System.Guid@,Vanara.PInvoke.SearchApi.SEARCH_ITEM_CHANGE@,System.Boolean@)">
            <summary>Not implemented.</summary>
            <param name="pdwDocID">TBD</param>
            <param name="pChange">TBD</param>
            <param name="pfInView">TBD</param>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IUrlAccessor">
            <summary>
            Provides methods for processing an individual item in a content source whose URL is provided by the gatherer to the filter host.
            </summary>
            <remarks>
            <para>
            This is the main interface for pulling data from the content source. The Get... methods are for properties that are required by
            or useful to the filter host. Not all data sources have these properties. If the property returned by one of these methods is not
            meaningful for your data source, your protocol handler should return E_NOTIMPL.
            </para>
            <para>The Bind... methods provide access to the data.</para>
            <para>
            Although the protocol handler runs in the protocol host's multithreaded environment, each protocol handler runs in its own
            thread, employing one <c>IUrlAccessor</c> object at a time.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor.AddRequestParameter(Vanara.PInvoke.Ole32.PROPSPEC@,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>Requests a property-value set.</summary>
            <param name="pSpec">
            <para>Type: <c>PROPSPEC*</c></para>
            <para>Pointer to a PROPSPEC structure containing the requested property.</para>
            </param>
            <param name="pVar">
            <para>Type: <c>PROPVARIANT*</c></para>
            <para>Pointer to a PROPVARIANT structure containing the value for the property specified by pSpec.</para>
            </param>
            <remarks>
            Implement this method to obtain additional information from the content source (for instance, the If-Modified-Since header in
            an HTTP request).
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor.GetDocFormat(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the document format, represented as a Multipurpose Internet Mail Extensions (MIME) string.</summary>
            <param name="wszDocFormat">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives a pointer to a null-terminated Unicode string containing the MIME type for the current item.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size of wszDocFormatin <c>TCHAR</c><c>s</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszDocFormat, not including the terminating <c>NULL</c>.</para>
            </param>
            <remarks>
            <para>
            The wszDocFormat is used to identify the correct IFilter for the stream returned by IUrlAccessor::BindToStream. Implement
            this method when the URL item is supposed to have a different association than is indicated by the file name extension or
            content type. For example, if .doc items are not associated with Microsoft Word, this method should return the CLSID Key key
            of the appropriate document source.
            </para>
            <para>
            If you do not provide an implementation of this method or the IUrlAccessor::GetCLSID method, the filter host uses the out
            parameters from IUrlAccessor::GetFileName to determine the Multipurpose Internet Mail Extensions (MIME) content type.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor.GetCLSID">
            <summary>Gets the CLSID for the document type of the URL item being processed.</summary>
            <returns>
            <para>Type: <c>CLSID*</c></para>
            <para>Receives a pointer to the CLSID for the document type of the URL item being processed.</para>
            </returns>
            <remarks>If this information is not available, you can return E_NOTIMPL or E_FAIL.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor.GetHost(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the host name for the content source, if applicable.</summary>
            <param name="wszHost">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the name of the host that the content source file resides on, as a null-terminated Unicode string.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of wszHost, not including the terminating <c>NULL</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszHost, not including the terminating <c>NULL</c>.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor.IsDirectory">
            <summary>Ascertains whether the item URL points to a directory.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if the URL is a directory, otherwise S_FALSE.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor.GetSize">
            <summary>Gets the size of the content designated by the URL.</summary>
            <returns>
            <para>Type: <c>ULONGLONG*</c></para>
            <para>Receives a pointer to the number of bytes of data contained in the URL.</para>
            </returns>
            <remarks>
            <para>
            The value calculated in this method is a factor in determining limitations on IFilteroutput size. This method should return 0
            for containers if the protocol implementation is for a hierarchical content source.
            </para>
            <para>
            Implement this method for non-files by returning the size of the document to be indexed. For example, to index a database
            where each row is a document, return the best estimate of the size of the row.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor.GetLastModified">
            <summary>Gets the time stamp identifying when the URL was last modified.</summary>
            <returns>
            <para>Type: <c>FILETIME*</c></para>
            <para>Receives a pointer to a variable of type FILETIME identifying the time stamp when the URL was last modified.</para>
            </returns>
            <remarks>
            <para>
            This method is used to determine whether a URL has changed since the last time it was indexed. If the last modified time has
            not changed, the indexer does not process the URL's content.
            </para>
            <para>Directory URLs are always processed regardless of the time stamp returned by this method.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor.GetFileName(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>
            Retrieves the file name of the item, which the filter host uses for indexing. If the item does not exist in a file system and
            the IUrlAccessor::BindToStream method is implemented, this method returns the shell's System.ParsingPath property for the item.
            </summary>
            <param name="wszFileName">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the file name as a null-terminated Unicode string.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of wszFileName, not including the terminating <c>NULL</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to <c>wszFileName</c>, not including <c>NULL</c>.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            If this method is implemented, the filter host uses the file name to determine the correct IFilter to use to parse the
            content of the stream returned by IUrlAccessor::BindToStream.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor.GetSecurityDescriptor(System.Byte[],System.UInt32,System.UInt32@)">
            <summary>
            Gets the security descriptor for the URL item. Security is applied at query time, so this descriptor identifies security for
            read access.
            </summary>
            <param name="pSD">
            <para>Type: <c>BYTE*</c></para>
            <para>Receives a pointer to the security descriptor.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of the pSD array.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to pSD, not including the terminating <c>NULL</c>.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            This method allows custom mappings between users registered to a content source and those users registered on the domain, if
            they are different. Security descriptors created in this method must be self-relative.
            </para>
            <para>
            If the URL contains a user security identifier (SID), then the protocol handler is invoked in the security context of that
            user, and this method must return E_NOTIMPL.
            </para>
            <para>
            If the URL does not contain a user SID, then the protocol handler is invoked in the security context of the system service.
            In that case, this method can return either an access control list (ACL) to restrict read access, or
            PRTH_S_ACL_IS_READ_EVERYONE to allow anyone read access during querying.
            </para>
            <para>
            <c>Note</c> If this method returns E_NOTIMPL and the URL does NOT contain a user SID, then the item is retrievable by all
            user queries.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor.GetRedirectedURL(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the redirected URL for the current item.</summary>
            <param name="wszRedirectedURL">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the redirected URL as a Unicode string, not including the terminating <c>NULL</c>.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of wszRedirectedURL, not including the terminating <c>NULL</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>
            Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszRedirectedURL, not including the terminating <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>File URLs are not redirected. This method applies only to a content source of HTTP.</para>
            <para>
            If this method is implemented, the URL that is passed to ISearchProtocol::CreateAccessor will be redirected to the value
            returned by this method. All subsequent relative URL links will be processed based on the redirected URL.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor.GetSecurityProvider">
            <summary>Gets the security provider for the URL.</summary>
            <returns>
            <para>Type: <c>CLSID*</c></para>
            <para>Receives a pointer to a security provider's CLSID.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor.BindToStream">
            <summary>
            Binds the item being processed to an IStream interface [Structured Storage] data stream and retrieves a pointer to that stream.
            </summary>
            <returns>
            <para>Type: <c>IStream**</c></para>
            <para>Receives the address of a pointer to the IStream that contains the item represented by the URL.</para>
            </returns>
            <remarks>
            Using the information returned by the IUrlAccessor::GetFileName, IUrlAccessor::GetCLSID, and IUrlAccessor::GetDocFormat
            methods, the appropriate content IFilterobject is created and passed to this stream by the IPersistStream interface.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor.BindToFilter">
            <summary>Binds the item being processed to the appropriate IFilterand retrieves a pointer to the <c>IFilter</c>.</summary>
            <returns>
            <para>Type: <c>IFilter**</c></para>
            <para>Receives the address of a pointer to the IFilter that can return metadata about the item being processed.</para>
            </returns>
            <remarks>
            <para>
            This method retrieves an IFilter to enumerate the properties of the item associated with the specified URL, based on the
            protocol's information about that URL.
            </para>
            <para>
            If the URL's content is also accessible from the IStream returned by IUrlAccessor::BindToStream, then a separate IFilteris
            invoked on the IStream to retrieve additional properties.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IUrlAccessor2">
            <summary>Extends functionality of the IUrlAccessor interface.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor2.AddRequestParameter(Vanara.PInvoke.Ole32.PROPSPEC@,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>Requests a property-value set.</summary>
            <param name="pSpec">
            <para>Type: <c>PROPSPEC*</c></para>
            <para>Pointer to a PROPSPEC structure containing the requested property.</para>
            </param>
            <param name="pVar">
            <para>Type: <c>PROPVARIANT*</c></para>
            <para>Pointer to a PROPVARIANT structure containing the value for the property specified by pSpec.</para>
            </param>
            <remarks>
            Implement this method to obtain additional information from the content source (for instance, the If-Modified-Since header in
            an HTTP request).
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor2.GetDocFormat(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the document format, represented as a Multipurpose Internet Mail Extensions (MIME) string.</summary>
            <param name="wszDocFormat">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives a pointer to a null-terminated Unicode string containing the MIME type for the current item.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size of wszDocFormatin <c>TCHAR</c><c>s</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszDocFormat, not including the terminating <c>NULL</c>.</para>
            </param>
            <remarks>
            <para>
            The wszDocFormat is used to identify the correct IFilter for the stream returned by IUrlAccessor::BindToStream. Implement
            this method when the URL item is supposed to have a different association than is indicated by the file name extension or
            content type. For example, if .doc items are not associated with Microsoft Word, this method should return the CLSID Key key
            of the appropriate document source.
            </para>
            <para>
            If you do not provide an implementation of this method or the IUrlAccessor::GetCLSID method, the filter host uses the out
            parameters from IUrlAccessor::GetFileName to determine the Multipurpose Internet Mail Extensions (MIME) content type.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor2.GetCLSID">
            <summary>Gets the CLSID for the document type of the URL item being processed.</summary>
            <returns>
            <para>Type: <c>CLSID*</c></para>
            <para>Receives a pointer to the CLSID for the document type of the URL item being processed.</para>
            </returns>
            <remarks>If this information is not available, you can return E_NOTIMPL or E_FAIL.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor2.GetHost(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the host name for the content source, if applicable.</summary>
            <param name="wszHost">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the name of the host that the content source file resides on, as a null-terminated Unicode string.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of wszHost, not including the terminating <c>NULL</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszHost, not including the terminating <c>NULL</c>.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor2.IsDirectory">
            <summary>Ascertains whether the item URL points to a directory.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if the URL is a directory, otherwise S_FALSE.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor2.GetSize">
            <summary>Gets the size of the content designated by the URL.</summary>
            <returns>
            <para>Type: <c>ULONGLONG*</c></para>
            <para>Receives a pointer to the number of bytes of data contained in the URL.</para>
            </returns>
            <remarks>
            <para>
            The value calculated in this method is a factor in determining limitations on IFilteroutput size. This method should return 0
            for containers if the protocol implementation is for a hierarchical content source.
            </para>
            <para>
            Implement this method for non-files by returning the size of the document to be indexed. For example, to index a database
            where each row is a document, return the best estimate of the size of the row.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor2.GetLastModified">
            <summary>Gets the time stamp identifying when the URL was last modified.</summary>
            <returns>
            <para>Type: <c>FILETIME*</c></para>
            <para>Receives a pointer to a variable of type FILETIME identifying the time stamp when the URL was last modified.</para>
            </returns>
            <remarks>
            <para>
            This method is used to determine whether a URL has changed since the last time it was indexed. If the last modified time has
            not changed, the indexer does not process the URL's content.
            </para>
            <para>Directory URLs are always processed regardless of the time stamp returned by this method.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor2.GetFileName(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>
            Retrieves the file name of the item, which the filter host uses for indexing. If the item does not exist in a file system and
            the IUrlAccessor::BindToStream method is implemented, this method returns the shell's System.ParsingPath property for the item.
            </summary>
            <param name="wszFileName">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the file name as a null-terminated Unicode string.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of wszFileName, not including the terminating <c>NULL</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to <c>wszFileName</c>, not including <c>NULL</c>.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            If this method is implemented, the filter host uses the file name to determine the correct IFilter to use to parse the
            content of the stream returned by IUrlAccessor::BindToStream.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor2.GetSecurityDescriptor(System.Byte[],System.UInt32,System.UInt32@)">
            <summary>
            Gets the security descriptor for the URL item. Security is applied at query time, so this descriptor identifies security for
            read access.
            </summary>
            <param name="pSD">
            <para>Type: <c>BYTE*</c></para>
            <para>Receives a pointer to the security descriptor.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of the pSD array.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to pSD, not including the terminating <c>NULL</c>.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            This method allows custom mappings between users registered to a content source and those users registered on the domain, if
            they are different. Security descriptors created in this method must be self-relative.
            </para>
            <para>
            If the URL contains a user security identifier (SID), then the protocol handler is invoked in the security context of that
            user, and this method must return E_NOTIMPL.
            </para>
            <para>
            If the URL does not contain a user SID, then the protocol handler is invoked in the security context of the system service.
            In that case, this method can return either an access control list (ACL) to restrict read access, or
            PRTH_S_ACL_IS_READ_EVERYONE to allow anyone read access during querying.
            </para>
            <para>
            <c>Note</c> If this method returns E_NOTIMPL and the URL does NOT contain a user SID, then the item is retrievable by all
            user queries.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor2.GetRedirectedURL(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the redirected URL for the current item.</summary>
            <param name="wszRedirectedURL">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the redirected URL as a Unicode string, not including the terminating <c>NULL</c>.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of wszRedirectedURL, not including the terminating <c>NULL</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>
            Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszRedirectedURL, not including the terminating <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>File URLs are not redirected. This method applies only to a content source of HTTP.</para>
            <para>
            If this method is implemented, the URL that is passed to ISearchProtocol::CreateAccessor will be redirected to the value
            returned by this method. All subsequent relative URL links will be processed based on the redirected URL.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor2.GetSecurityProvider">
            <summary>Gets the security provider for the URL.</summary>
            <returns>
            <para>Type: <c>CLSID*</c></para>
            <para>Receives a pointer to a security provider's CLSID.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor2.BindToStream">
            <summary>
            Binds the item being processed to an IStream interface [Structured Storage] data stream and retrieves a pointer to that stream.
            </summary>
            <returns>
            <para>Type: <c>IStream**</c></para>
            <para>Receives the address of a pointer to the IStream that contains the item represented by the URL.</para>
            </returns>
            <remarks>
            Using the information returned by the IUrlAccessor::GetFileName, IUrlAccessor::GetCLSID, and IUrlAccessor::GetDocFormat
            methods, the appropriate content IFilterobject is created and passed to this stream by the IPersistStream interface.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor2.BindToFilter">
            <summary>Binds the item being processed to the appropriate IFilterand retrieves a pointer to the <c>IFilter</c>.</summary>
            <returns>
            <para>Type: <c>IFilter**</c></para>
            <para>Receives the address of a pointer to the IFilter that can return metadata about the item being processed.</para>
            </returns>
            <remarks>
            <para>
            This method retrieves an IFilter to enumerate the properties of the item associated with the specified URL, based on the
            protocol's information about that URL.
            </para>
            <para>
            If the URL's content is also accessible from the IStream returned by IUrlAccessor::BindToStream, then a separate IFilteris
            invoked on the IStream to retrieve additional properties.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor2.GetDisplayUrl(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the user-friendly path for the URL item.</summary>
            <param name="wszDocUrl">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the display URL as a null-terminated Unicode string.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of wszDocUrl.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszDocUrl, not including the terminating <c>NULL</c>.</para>
            </param>
            <remarks>
            Protocol handlers can reveal hierarchical or non-hierarchical stores. If the data store is organized hierarchically, users
            can scope their searches to a specified container object like a directory or folder.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor2.IsDocument">
            <summary>Ascertains whether an item URL is a document or directory.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_FALSE if the item is a directory; otherwise, it returns S_OK.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor2.GetCodePage(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the code page for properties of the URL item.</summary>
            <param name="wszCodePage">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the code page as a null-terminated Unicode string.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size of wszCodePage in <c>TCHAR</c><c>s</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>
            Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszCodePage, not including the terminating <c>NULL</c> character.
            </para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IUrlAccessor3">
            <summary>
            Extends the functionality of the IUrlAccessor2 interface with the IUrlAccessor3::GetImpersonationSidBlobs method to identify user
            security identifiers (SIDs) for a specified URL.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.AddRequestParameter(Vanara.PInvoke.Ole32.PROPSPEC@,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>Requests a property-value set.</summary>
            <param name="pSpec">
            <para>Type: <c>PROPSPEC*</c></para>
            <para>Pointer to a PROPSPEC structure containing the requested property.</para>
            </param>
            <param name="pVar">
            <para>Type: <c>PROPVARIANT*</c></para>
            <para>Pointer to a PROPVARIANT structure containing the value for the property specified by pSpec.</para>
            </param>
            <remarks>
            Implement this method to obtain additional information from the content source (for instance, the If-Modified-Since header in
            an HTTP request).
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.GetDocFormat(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the document format, represented as a Multipurpose Internet Mail Extensions (MIME) string.</summary>
            <param name="wszDocFormat">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives a pointer to a null-terminated Unicode string containing the MIME type for the current item.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size of wszDocFormatin <c>TCHAR</c><c>s</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszDocFormat, not including the terminating <c>NULL</c>.</para>
            </param>
            <remarks>
            <para>
            The wszDocFormat is used to identify the correct IFilter for the stream returned by IUrlAccessor::BindToStream. Implement
            this method when the URL item is supposed to have a different association than is indicated by the file name extension or
            content type. For example, if .doc items are not associated with Microsoft Word, this method should return the CLSID Key key
            of the appropriate document source.
            </para>
            <para>
            If you do not provide an implementation of this method or the IUrlAccessor::GetCLSID method, the filter host uses the out
            parameters from IUrlAccessor::GetFileName to determine the Multipurpose Internet Mail Extensions (MIME) content type.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.GetCLSID">
            <summary>Gets the CLSID for the document type of the URL item being processed.</summary>
            <returns>
            <para>Type: <c>CLSID*</c></para>
            <para>Receives a pointer to the CLSID for the document type of the URL item being processed.</para>
            </returns>
            <remarks>If this information is not available, you can return E_NOTIMPL or E_FAIL.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.GetHost(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the host name for the content source, if applicable.</summary>
            <param name="wszHost">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the name of the host that the content source file resides on, as a null-terminated Unicode string.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of wszHost, not including the terminating <c>NULL</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszHost, not including the terminating <c>NULL</c>.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.IsDirectory">
            <summary>Ascertains whether the item URL points to a directory.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if the URL is a directory, otherwise S_FALSE.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.GetSize">
            <summary>Gets the size of the content designated by the URL.</summary>
            <returns>
            <para>Type: <c>ULONGLONG*</c></para>
            <para>Receives a pointer to the number of bytes of data contained in the URL.</para>
            </returns>
            <remarks>
            <para>
            The value calculated in this method is a factor in determining limitations on IFilteroutput size. This method should return 0
            for containers if the protocol implementation is for a hierarchical content source.
            </para>
            <para>
            Implement this method for non-files by returning the size of the document to be indexed. For example, to index a database
            where each row is a document, return the best estimate of the size of the row.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.GetLastModified">
            <summary>Gets the time stamp identifying when the URL was last modified.</summary>
            <returns>
            <para>Type: <c>FILETIME*</c></para>
            <para>Receives a pointer to a variable of type FILETIME identifying the time stamp when the URL was last modified.</para>
            </returns>
            <remarks>
            <para>
            This method is used to determine whether a URL has changed since the last time it was indexed. If the last modified time has
            not changed, the indexer does not process the URL's content.
            </para>
            <para>Directory URLs are always processed regardless of the time stamp returned by this method.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.GetFileName(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>
            Retrieves the file name of the item, which the filter host uses for indexing. If the item does not exist in a file system and
            the IUrlAccessor::BindToStream method is implemented, this method returns the shell's System.ParsingPath property for the item.
            </summary>
            <param name="wszFileName">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the file name as a null-terminated Unicode string.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of wszFileName, not including the terminating <c>NULL</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to <c>wszFileName</c>, not including <c>NULL</c>.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            If this method is implemented, the filter host uses the file name to determine the correct IFilter to use to parse the
            content of the stream returned by IUrlAccessor::BindToStream.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.GetSecurityDescriptor(System.Byte[],System.UInt32,System.UInt32@)">
            <summary>
            Gets the security descriptor for the URL item. Security is applied at query time, so this descriptor identifies security for
            read access.
            </summary>
            <param name="pSD">
            <para>Type: <c>BYTE*</c></para>
            <para>Receives a pointer to the security descriptor.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of the pSD array.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to pSD, not including the terminating <c>NULL</c>.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            This method allows custom mappings between users registered to a content source and those users registered on the domain, if
            they are different. Security descriptors created in this method must be self-relative.
            </para>
            <para>
            If the URL contains a user security identifier (SID), then the protocol handler is invoked in the security context of that
            user, and this method must return E_NOTIMPL.
            </para>
            <para>
            If the URL does not contain a user SID, then the protocol handler is invoked in the security context of the system service.
            In that case, this method can return either an access control list (ACL) to restrict read access, or
            PRTH_S_ACL_IS_READ_EVERYONE to allow anyone read access during querying.
            </para>
            <para>
            <c>Note</c> If this method returns E_NOTIMPL and the URL does NOT contain a user SID, then the item is retrievable by all
            user queries.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.GetRedirectedURL(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the redirected URL for the current item.</summary>
            <param name="wszRedirectedURL">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the redirected URL as a Unicode string, not including the terminating <c>NULL</c>.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of wszRedirectedURL, not including the terminating <c>NULL</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>
            Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszRedirectedURL, not including the terminating <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>File URLs are not redirected. This method applies only to a content source of HTTP.</para>
            <para>
            If this method is implemented, the URL that is passed to ISearchProtocol::CreateAccessor will be redirected to the value
            returned by this method. All subsequent relative URL links will be processed based on the redirected URL.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.GetSecurityProvider">
            <summary>Gets the security provider for the URL.</summary>
            <returns>
            <para>Type: <c>CLSID*</c></para>
            <para>Receives a pointer to a security provider's CLSID.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.BindToStream">
            <summary>
            Binds the item being processed to an IStream interface [Structured Storage] data stream and retrieves a pointer to that stream.
            </summary>
            <returns>
            <para>Type: <c>IStream**</c></para>
            <para>Receives the address of a pointer to the IStream that contains the item represented by the URL.</para>
            </returns>
            <remarks>
            Using the information returned by the IUrlAccessor::GetFileName, IUrlAccessor::GetCLSID, and IUrlAccessor::GetDocFormat
            methods, the appropriate content IFilterobject is created and passed to this stream by the IPersistStream interface.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.BindToFilter">
            <summary>Binds the item being processed to the appropriate IFilterand retrieves a pointer to the <c>IFilter</c>.</summary>
            <returns>
            <para>Type: <c>IFilter**</c></para>
            <para>Receives the address of a pointer to the IFilter that can return metadata about the item being processed.</para>
            </returns>
            <remarks>
            <para>
            This method retrieves an IFilter to enumerate the properties of the item associated with the specified URL, based on the
            protocol's information about that URL.
            </para>
            <para>
            If the URL's content is also accessible from the IStream returned by IUrlAccessor::BindToStream, then a separate IFilteris
            invoked on the IStream to retrieve additional properties.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.GetDisplayUrl(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the user-friendly path for the URL item.</summary>
            <param name="wszDocUrl">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the display URL as a null-terminated Unicode string.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of wszDocUrl.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszDocUrl, not including the terminating <c>NULL</c>.</para>
            </param>
            <remarks>
            Protocol handlers can reveal hierarchical or non-hierarchical stores. If the data store is organized hierarchically, users
            can scope their searches to a specified container object like a directory or folder.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.IsDocument">
            <summary>Ascertains whether an item URL is a document or directory.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_FALSE if the item is a directory; otherwise, it returns S_OK.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.GetCodePage(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the code page for properties of the URL item.</summary>
            <param name="wszCodePage">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the code page as a null-terminated Unicode string.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size of wszCodePage in <c>TCHAR</c><c>s</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>
            Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszCodePage, not including the terminating <c>NULL</c> character.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor3.GetImpersonationSidBlobs(System.String,System.UInt32@,Vanara.PInvoke.Ole32.BLOB[]@)">
            <summary>
            Retrieves an array of user security identifiers (SIDs) for a specified URL. This method enables protocol handlers to specify
            which users can access the file and the search protocol host to impersonate a user in order to index the file.
            </summary>
            <param name="pcwszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The URL to access on behalf of an impersonated user.</para>
            </param>
            <param name="pcSidCount">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of user SIDs returned in ppSidBlobs.</para>
            </param>
            <param name="ppSidBlobs">
            <para>Type: <c>BLOB**</c></para>
            <para>Receives the address of a pointer to the array of candidate impersonation user SIDs.</para>
            </param>
            <remarks>
            <para>
            If the file is encrypted, this method identifies who can both decrypt and access it. If the method cannot identify this
            information, it fails with error code E_ACCESSDENIED.
            </para>
            <para>
            This method assumes that the IUrlAccessor2 object failed to initialize and returned the code PRTH_S_TRY_IMPERSONATING. Then,
            the search protocol host calls this method to retrieve a list of SIDs to use for impersonation and reverts to using
            <c>IUrlAccessor2</c>, impersonating one of the allowed users when opening the item.
            </para>
            <para>
            Impersonating a user does not elevate the caller's privileges. If the caller cannot directly retrieve the list of users
            authorized to access a resource, the caller won't be able to do that with this method, either. Only the search protocol host
            and the indexer have adequate privileges to impersonate users currently logged on.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IUrlAccessor4">
            <summary>
            Extends the functionality of the IUrlAccessor3 interface with the IUrlAccessor4::ShouldIndexItemContent method that identifies
            whether the content of the item should be indexed.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.AddRequestParameter(Vanara.PInvoke.Ole32.PROPSPEC@,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>Requests a property-value set.</summary>
            <param name="pSpec">
            <para>Type: <c>PROPSPEC*</c></para>
            <para>Pointer to a PROPSPEC structure containing the requested property.</para>
            </param>
            <param name="pVar">
            <para>Type: <c>PROPVARIANT*</c></para>
            <para>Pointer to a PROPVARIANT structure containing the value for the property specified by pSpec.</para>
            </param>
            <remarks>
            Implement this method to obtain additional information from the content source (for instance, the If-Modified-Since header in
            an HTTP request).
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.GetDocFormat(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the document format, represented as a Multipurpose Internet Mail Extensions (MIME) string.</summary>
            <param name="wszDocFormat">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives a pointer to a null-terminated Unicode string containing the MIME type for the current item.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size of wszDocFormatin <c>TCHAR</c><c>s</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszDocFormat, not including the terminating <c>NULL</c>.</para>
            </param>
            <remarks>
            <para>
            The wszDocFormat is used to identify the correct IFilter for the stream returned by IUrlAccessor::BindToStream. Implement
            this method when the URL item is supposed to have a different association than is indicated by the file name extension or
            content type. For example, if .doc items are not associated with Microsoft Word, this method should return the CLSID Key key
            of the appropriate document source.
            </para>
            <para>
            If you do not provide an implementation of this method or the IUrlAccessor::GetCLSID method, the filter host uses the out
            parameters from IUrlAccessor::GetFileName to determine the Multipurpose Internet Mail Extensions (MIME) content type.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.GetCLSID">
            <summary>Gets the CLSID for the document type of the URL item being processed.</summary>
            <returns>
            <para>Type: <c>CLSID*</c></para>
            <para>Receives a pointer to the CLSID for the document type of the URL item being processed.</para>
            </returns>
            <remarks>If this information is not available, you can return E_NOTIMPL or E_FAIL.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.GetHost(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the host name for the content source, if applicable.</summary>
            <param name="wszHost">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the name of the host that the content source file resides on, as a null-terminated Unicode string.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of wszHost, not including the terminating <c>NULL</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszHost, not including the terminating <c>NULL</c>.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.IsDirectory">
            <summary>Ascertains whether the item URL points to a directory.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if the URL is a directory, otherwise S_FALSE.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.GetSize">
            <summary>Gets the size of the content designated by the URL.</summary>
            <returns>
            <para>Type: <c>ULONGLONG*</c></para>
            <para>Receives a pointer to the number of bytes of data contained in the URL.</para>
            </returns>
            <remarks>
            <para>
            The value calculated in this method is a factor in determining limitations on IFilteroutput size. This method should return 0
            for containers if the protocol implementation is for a hierarchical content source.
            </para>
            <para>
            Implement this method for non-files by returning the size of the document to be indexed. For example, to index a database
            where each row is a document, return the best estimate of the size of the row.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.GetLastModified">
            <summary>Gets the time stamp identifying when the URL was last modified.</summary>
            <returns>
            <para>Type: <c>FILETIME*</c></para>
            <para>Receives a pointer to a variable of type FILETIME identifying the time stamp when the URL was last modified.</para>
            </returns>
            <remarks>
            <para>
            This method is used to determine whether a URL has changed since the last time it was indexed. If the last modified time has
            not changed, the indexer does not process the URL's content.
            </para>
            <para>Directory URLs are always processed regardless of the time stamp returned by this method.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.GetFileName(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>
            Retrieves the file name of the item, which the filter host uses for indexing. If the item does not exist in a file system and
            the IUrlAccessor::BindToStream method is implemented, this method returns the shell's System.ParsingPath property for the item.
            </summary>
            <param name="wszFileName">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the file name as a null-terminated Unicode string.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of wszFileName, not including the terminating <c>NULL</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to <c>wszFileName</c>, not including <c>NULL</c>.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            If this method is implemented, the filter host uses the file name to determine the correct IFilter to use to parse the
            content of the stream returned by IUrlAccessor::BindToStream.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.GetSecurityDescriptor(System.Byte[],System.UInt32,System.UInt32@)">
            <summary>
            Gets the security descriptor for the URL item. Security is applied at query time, so this descriptor identifies security for
            read access.
            </summary>
            <param name="pSD">
            <para>Type: <c>BYTE*</c></para>
            <para>Receives a pointer to the security descriptor.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of the pSD array.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to pSD, not including the terminating <c>NULL</c>.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            This method allows custom mappings between users registered to a content source and those users registered on the domain, if
            they are different. Security descriptors created in this method must be self-relative.
            </para>
            <para>
            If the URL contains a user security identifier (SID), then the protocol handler is invoked in the security context of that
            user, and this method must return E_NOTIMPL.
            </para>
            <para>
            If the URL does not contain a user SID, then the protocol handler is invoked in the security context of the system service.
            In that case, this method can return either an access control list (ACL) to restrict read access, or
            PRTH_S_ACL_IS_READ_EVERYONE to allow anyone read access during querying.
            </para>
            <para>
            <c>Note</c> If this method returns E_NOTIMPL and the URL does NOT contain a user SID, then the item is retrievable by all
            user queries.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.GetRedirectedURL(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the redirected URL for the current item.</summary>
            <param name="wszRedirectedURL">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the redirected URL as a Unicode string, not including the terminating <c>NULL</c>.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of wszRedirectedURL, not including the terminating <c>NULL</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>
            Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszRedirectedURL, not including the terminating <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>File URLs are not redirected. This method applies only to a content source of HTTP.</para>
            <para>
            If this method is implemented, the URL that is passed to ISearchProtocol::CreateAccessor will be redirected to the value
            returned by this method. All subsequent relative URL links will be processed based on the redirected URL.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.GetSecurityProvider">
            <summary>Gets the security provider for the URL.</summary>
            <returns>
            <para>Type: <c>CLSID*</c></para>
            <para>Receives a pointer to a security provider's CLSID.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.BindToStream">
            <summary>
            Binds the item being processed to an IStream interface [Structured Storage] data stream and retrieves a pointer to that stream.
            </summary>
            <returns>
            <para>Type: <c>IStream**</c></para>
            <para>Receives the address of a pointer to the IStream that contains the item represented by the URL.</para>
            </returns>
            <remarks>
            Using the information returned by the IUrlAccessor::GetFileName, IUrlAccessor::GetCLSID, and IUrlAccessor::GetDocFormat
            methods, the appropriate content IFilterobject is created and passed to this stream by the IPersistStream interface.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.BindToFilter">
            <summary>Binds the item being processed to the appropriate IFilterand retrieves a pointer to the <c>IFilter</c>.</summary>
            <returns>
            <para>Type: <c>IFilter**</c></para>
            <para>Receives the address of a pointer to the IFilter that can return metadata about the item being processed.</para>
            </returns>
            <remarks>
            <para>
            This method retrieves an IFilter to enumerate the properties of the item associated with the specified URL, based on the
            protocol's information about that URL.
            </para>
            <para>
            If the URL's content is also accessible from the IStream returned by IUrlAccessor::BindToStream, then a separate IFilteris
            invoked on the IStream to retrieve additional properties.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.GetDisplayUrl(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the user-friendly path for the URL item.</summary>
            <param name="wszDocUrl">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the display URL as a null-terminated Unicode string.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size in <c>TCHAR</c><c>s</c> of wszDocUrl.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszDocUrl, not including the terminating <c>NULL</c>.</para>
            </param>
            <remarks>
            Protocol handlers can reveal hierarchical or non-hierarchical stores. If the data store is organized hierarchically, users
            can scope their searches to a specified container object like a directory or folder.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.IsDocument">
            <summary>Ascertains whether an item URL is a document or directory.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_FALSE if the item is a directory; otherwise, it returns S_OK.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.GetCodePage(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>Gets the code page for properties of the URL item.</summary>
            <param name="wszCodePage">
            <para>Type: <c>WCHAR[]</c></para>
            <para>Receives the code page as a null-terminated Unicode string.</para>
            </param>
            <param name="dwSize">
            <para>Type: <c>DWORD</c></para>
            <para>Size of wszCodePage in <c>TCHAR</c><c>s</c>.</para>
            </param>
            <param name="pdwLength">
            <para>Type: <c>DWORD*</c></para>
            <para>
            Receives a pointer to the number of <c>TCHAR</c><c>s</c> written to wszCodePage, not including the terminating <c>NULL</c> character.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.GetImpersonationSidBlobs(System.String,System.UInt32@,Vanara.PInvoke.Ole32.BLOB[]@)">
            <summary>
            Retrieves an array of user security identifiers (SIDs) for a specified URL. This method enables protocol handlers to specify
            which users can access the file and the search protocol host to impersonate a user in order to index the file.
            </summary>
            <param name="pcwszURL">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The URL to access on behalf of an impersonated user.</para>
            </param>
            <param name="pcSidCount">
            <para>Type: <c>DWORD*</c></para>
            <para>Receives a pointer to the number of user SIDs returned in ppSidBlobs.</para>
            </param>
            <param name="ppSidBlobs">
            <para>Type: <c>BLOB**</c></para>
            <para>Receives the address of a pointer to the array of candidate impersonation user SIDs.</para>
            </param>
            <remarks>
            <para>
            If the file is encrypted, this method identifies who can both decrypt and access it. If the method cannot identify this
            information, it fails with error code E_ACCESSDENIED.
            </para>
            <para>
            This method assumes that the IUrlAccessor2 object failed to initialize and returned the code PRTH_S_TRY_IMPERSONATING. Then,
            the search protocol host calls this method to retrieve a list of SIDs to use for impersonation and reverts to using
            <c>IUrlAccessor2</c>, impersonating one of the allowed users when opening the item.
            </para>
            <para>
            Impersonating a user does not elevate the caller's privileges. If the caller cannot directly retrieve the list of users
            authorized to access a resource, the caller won't be able to do that with this method, either. Only the search protocol host
            and the indexer have adequate privileges to impersonate users currently logged on.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.ShouldIndexItemContent(System.Boolean@)">
            <summary>Identifies whether the item's content should be indexed.</summary>
            <param name="pfIndexContent">
            <para>Type: <c>BOOL*</c></para>
            <para>A pointer to a <c>BOOL</c> value that indicates whether the item's content should be indexed.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_FALSE if the item's content should not be indexed.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IUrlAccessor4.ShouldIndexProperty(Vanara.PInvoke.Ole32.PROPERTYKEY@,System.Boolean@)">
            <summary>Identifies whether a property should be indexed.</summary>
            <param name="key">The property to index.</param>
            <param name="pfIndexProperty">A pointer to a value that indicates whether a property should be indexed.</param>
            <returns>Returns S_FALSE if the property should not be indexed.</returns>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ILoadFilterWithPrivateComActivation">
            <summary>Undocumented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ILoadFilterWithPrivateComActivation.LoadIFilter(System.String,Vanara.PInvoke.SearchApi.FILTERED_DATA_SOURCES@,System.Object,System.Boolean,System.Guid@,System.IntPtr,System.IntPtr,Vanara.PInvoke.SearchApi.IFilter@)">
            <summary>Retrieves and loads the most appropriate filter that is mapped to a Shell data source.</summary>
            <param name="pwcsPath">
            Pointer to a comma-delimited null-terminated Unicode string buffer that specifies the path of the file to be filtered. This
            parameter can be null.
            </param>
            <param name="pFilteredSources">
            Pointer to the FILTERED_DATA_SOURCES structure that specifies parameters for a Shell data source for which a filter is
            loaded. This parameter cannot be null.
            </param>
            <param name="pUnkOuter">
            If the object is being created as part of an aggregate, specify a pointer to the controlling IUnknown interface of the aggregate.
            </param>
            <param name="fUseDefault">
            If <c>TRUE</c>, use the default filter; if <c>FALSE</c>, proceed with the most appropriate filter that is available.
            </param>
            <param name="pFilterClsid">
            Pointer to the CLSID (CLSID_FilterRegistration) that receives the class identifier of the returned filter.
            </param>
            <param name="SearchDecSize">Not implemented.</param>
            <param name="pwcsSearchDesc">Not implemented.</param>
            <param name="ppIFilt">The address of a pointer to an implementation of an IFilter interface that <c>LoadIFilter</c> selects.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
            <remarks>
            <para>A filter, also known as a filter handler, is an implementation of the IFilter interface.</para>
            <para>
            <c>ILoadFilter</c> attempts to load a filter that can process a Shell data source of the type specified in the
            pFilteredSources parameter through the pwcsPath parameter.If an appropriate filter for the data source is not found, and
            fUseDefault is <c>false</c>, this method returns null in the ppIFilt parameter. If an appropriate filter for the data source
            is not found, and fUseDefault is <c>true</c>, the IFilter interface on the default <c>IFilter</c> is returned in the ppIFilt parameter.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ILoadFilterWithPrivateComActivation.LoadIFilterFromStorage(Vanara.PInvoke.Ole32.IStorage,System.Object,System.String,System.Boolean,System.Guid@,System.IntPtr,System.IntPtr,Vanara.PInvoke.SearchApi.IFilter@)">
            <summary>
            <para>Not implemented.</para>
            <para>Do not use: this method is not implemented.</para>
            </summary>
            <param name="pStg"/>
            <param name="pUnkOuter"/>
            <param name="pwcsOverride"/>
            <param name="fUseDefault"/>
            <param name="pFilterClsid"/>
            <param name="SearchDecSize"/>
            <param name="pwcsSearchDesc"/>
            <param name="ppIFilt"/>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ILoadFilterWithPrivateComActivation.LoadIFilterFromStream(System.Runtime.InteropServices.ComTypes.IStream,Vanara.PInvoke.SearchApi.FILTERED_DATA_SOURCES@,System.Object,System.Boolean,System.Guid@,System.IntPtr,System.IntPtr,Vanara.PInvoke.SearchApi.IFilter@)">
            <summary>
            <para>Not implemented.</para>
            <para>Do not use: this method is not implemented.</para>
            </summary>
            <param name="pStm"/>
            <param name="pFilteredSources"/>
            <param name="pUnkOuter"/>
            <param name="fUseDefault"/>
            <param name="pFilterClsid"/>
            <param name="SearchDecSize"/>
            <param name="pwcsSearchDesc"/>
            <param name="ppIFilt"/>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ILoadFilterWithPrivateComActivation.LoadIFilterWithPrivateComActivation(Vanara.PInvoke.SearchApi.FILTERED_DATA_SOURCES@,System.Boolean,System.Guid@,System.Boolean@,Vanara.PInvoke.SearchApi.IFilter@)">
            <summary>Undocumented.</summary>
            <param name="filteredSources"/>
            <param name="useDefault"/>
            <param name="filterClsid"/>
            <param name="isFilterPrivateComActivated"/>
            <param name="filterObj"/>
            <returns/>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.AUTHENTICATION_INFO">
            <summary>Describes security authentication information for content access.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.AUTHENTICATION_INFO.dwSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>Size of the structure, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.AUTHENTICATION_INFO.atAuthenticationType">
            <summary>
            <para>Type: <c>AUTH_TYPE</c></para>
            <para>Flag to describe the type of authentication. For a list of possible values, see the AUTH_TYPE enumerated type.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.AUTHENTICATION_INFO.pcwszUser">
            <summary>
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to a null-terminated Unicode string containing the user name.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.AUTHENTICATION_INFO.pcwszPassword">
            <summary>
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to a null-terminated Unicode string containing the password for <c>pcwszUser</c>.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.FILTERED_DATA_SOURCES">
            <summary>Specifies parameters for a Shell data source for which a filter is loaded.</summary>
            <remarks>
            <para>A filter, also known as a filter handler, is an implementation of the IFilter interface.</para>
            <para>
            <c>FILTERED_DATA_SOURCES</c> can hold one file content identifier of each type. CLSIDs are always searched first, followed by the
            file name extension, then MIME type, and finally the path.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.FILTERED_DATA_SOURCES.pwcsExtension">
            <summary>Pointer to a buffer that contains a file name extension.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.FILTERED_DATA_SOURCES.pwcsMime">
            <summary>Pointer to a buffer that contains the name of a MIME type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.FILTERED_DATA_SOURCES.pClsid">
            <summary>Pointer to a CLSID that identifies the content type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.FILTERED_DATA_SOURCES.pwcsOverride">
            <summary>Not implemented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.FILTERREGION">
            <summary>
            <para>
            [Indexing Service is no longer supported as of Windows XP and is unavailable for use as of Windows 8. Instead, use Windows Search
            for client side search and Microsoft Search Server Express for server side search.]
            </para>
            <para>Describes the position and extent of a specified portion of text within an object.</para>
            </summary>
            <remarks>
            The <c>cwcExtent</c> member might specify a number of characters (starting from a position the <c>cwcStart</c> member specifies)
            that extends beyond the end of the chunk. In that case, the region should be continued into the next chunk, which should have the
            same attribute as the current region.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.FILTERREGION.idChunk">
            <summary>The chunk identifier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.FILTERREGION.cwcStart">
            <summary>The beginning of the region, specified as an offset from the beginning of the chunk.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.FILTERREGION.cwcExtent">
            <summary>The extent of the region, specified as the number of Unicode characters.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.FULLPROPSPEC">
            <summary>
            <para>
            [Indexing Service is no longer supported as of Windows XP and is unavailable for use as of Windows 8. Instead, use Windows Search
            for client side search and Microsoft Search Server Express for server side search.]
            </para>
            <para>Specifies a property set and a property within the property set.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.FULLPROPSPEC.guidPropSet">
            <summary>The globally unique identifier (GUID) that identifies the property set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.FULLPROPSPEC.psProperty">
            <summary>
            A pointer to the PROPSPEC structure that specifies a property either by its property identifier (propid) or by the associated
            string name ( <c>lpwstr</c>).
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.INCREMENTAL_ACCESS_INFO">
            <summary>Contains access information used by an incremental crawl, such as the last access date and modification time.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.INCREMENTAL_ACCESS_INFO.dwSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>Size of the file in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.INCREMENTAL_ACCESS_INFO.ftLastModifiedTime">
            <summary>
            <para>Type: <c>FILETIME</c></para>
            <para>Last time the file was modified.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ITEM_INFO">
            <summary>
            Contains information passed to the IUrlAccessor object about the current item; for example, the application name and catalog name.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.ITEM_INFO.dwSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>Size of the structure in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.ITEM_INFO.pcwszFromEMail">
            <summary>
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to a null-terminated Unicode string containing an email address that is notified in case of error.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.ITEM_INFO.pcwszApplicationName">
            <summary>
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to a null-terminated Unicode string containing the application name.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.ITEM_INFO.pcwszCatalogName">
            <summary>
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            Pointer to a null-terminated Unicode string containing the workspace name from which the crawl to this content source was initiated.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.ITEM_INFO.pcwszContentClass">
            <summary>
            <para>Type: <c>LPCWSTR</c></para>
            <para>Not used by protocol handlers.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.PROXY_INFO">
            <summary>Stores information about a proxy. Used by ISearchProtocol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.PROXY_INFO.dwSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The size of the structure in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.PROXY_INFO.pcwszUserAgent">
            <summary>
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a Unicode string buffer containing the user agent string.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.PROXY_INFO.paUseProxy">
            <summary>
            <para>Type: <c>PROXY_ACCESS</c></para>
            <para>The proxy type to use.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.PROXY_INFO.fLocalBypass">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>The bypass proxy for local addresses.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.PROXY_INFO.dwPortNumber">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The port number to use.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.PROXY_INFO.pcwszProxyName">
            <summary>
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a Unicode string buffer that contains the name of the proxy server.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.PROXY_INFO.pcwszBypassList">
            <summary>
            <para>Type: <c>LPCWSTR</c></para>
            <para>The list of sites that will bypass the proxy.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.SEARCH_COLUMN_PROPERTIES">
            <summary>This structure is not implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_COLUMN_PROPERTIES.Value">
            <summary>
            <para>Type: <c>PROPVARIANT</c></para>
            <para>The name of the column referenced in the ISearchQueryHelper::WriteProperties methods pColumns property array.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_COLUMN_PROPERTIES.lcid">
            <summary>
            <para>Type: <c>LCID</c></para>
            <para>The LCID of the column.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.SEARCH_ITEM_CHANGE">
            <summary>Specifies the changes to an indexed item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_ITEM_CHANGE.Change">
            <summary>
            <para>Type: <c>SEARCH_KIND_OF_CHANGE</c></para>
            <para>Flag that specifies the kind of change as a value from the SEARCH_KIND_OF_CHANGE enumerated type.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_ITEM_CHANGE.Priority">
            <summary>
            <para>Type: <c>SEARCH_NOTIFICATION_PRIORITY</c></para>
            <para>
            Flag that specifies the priority of processing this change as a value from the SEARCH_NOTIFICATION_PRIORITY enumerated type.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_ITEM_CHANGE.pUserData">
            <summary>
            <para>Type: <c>BLOB*</c></para>
            <para>Pointer to user information.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_ITEM_CHANGE.lpwszURL">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>
            Pointer to a null-terminated Unicode string containing the URL of the item in a SEARCH_CHANGE_MOVE_RENAME, SEARCH_CHANGE_ADD,
            or SEARCH_CHANGE_MODIFY notification. In the case of a move, this member contains the new URL of the item.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_ITEM_CHANGE.lpwszOldURL">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>
            Pointer to a null-terminated Unicode string containing the old URL of the item in a SEARCH_CHANGE_MOVE_RENAME or
            SEARCH_CHANGE_DELETE notification.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.SEARCH_ITEM_INDEXING_STATUS">
            <summary>Describes the status of a document to be indexed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_ITEM_INDEXING_STATUS.dwDocID">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>Document identifier.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_ITEM_INDEXING_STATUS.hrIndexingStatus">
            <summary>
            <para>Type: <c>HRESULT</c></para>
            <para>
            An <c>HRESULT</c> value that corresponds to a system error code or a Component Object Model (COM) error code. S_OK if
            successful, or an error value otherwise.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.SEARCH_ITEM_PERSISTENT_CHANGE">
            <summary>
            Contains information about the kind of change that has occurred in an item to be indexed. This structure is used with the
            ISearchPersistentItemsChangedSink::OnItemsChanged method to pass information to the indexer about what has changed.
            </summary>
            <remarks>SEARCH_CHANGE_MOVE_RENAME is not supported for use with ISearchPersistentItemsChangedSink::OnItemsChanged.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_ITEM_PERSISTENT_CHANGE.Change">
            <summary>
            <para>Type: <c>SEARCH_KIND_OF_CHANGE</c></para>
            <para>A value from the SEARCH_KIND_OF_CHANGE enumerated type that indicates the kind of change.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_ITEM_PERSISTENT_CHANGE.URL">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>
            Pointer to a null-terminated Unicode string containing the URL of the item in a SEARCH_CHANGE_ADD, SEARCH_CHANGE_MODIFY, or
            SEARCH_CHANGE_DELETE notification. In the case of a move, this member contains the new URL of the item.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_ITEM_PERSISTENT_CHANGE.OldURL">
            <summary>The old URL</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.SEARCH_ITEM_PERSISTENT_CHANGE.Priority">
            <summary>
            <para>Type: <c>SEARCH_NOTIFICATION_PRIORITY</c></para>
            <para>A value from the SEARCH_NOTIFICATION_PRIORITY enumerated type that indicates the priority of the change.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.STAT_CHUNK">
            <summary>
            <para>
            [Indexing Service is no longer supported as of Windows XP and is unavailable for use as of Windows 8. Instead, use Windows Search
            for client side search and Microsoft Search Server Express for server side search.]
            </para>
            <para>Describes the characteristics of a chunk.</para>
            </summary>
            <remarks>
            <para>
            The final three members ( <c>idChunkSource</c>, <c>cwcStartSource</c>, and <c>cwcLenSource</c>) are used to describe the source
            of a derived chunk; that is, one that can be mapped back to a section of text. For example, the heading of a chapter can be both
            a text-type property and an internal value-type property ? a heading. The value-type property "heading" would be a derived chunk.
            If the text of the current value-type chunk (from an internal value-type property) is derived from some text-type chunk, then it
            must be emitted more than once.
            </para>
            <para>The following segment is an example of how this might happen in a book.</para>
            <para>The small detective exclaimed, "C'est fini!"</para>
            <para><c>Confessions</c></para>
            <para>The room was silent for several minutes. After thinking very hard about it, the young woman asked, "But how did you know?"</para>
            <para>This segment might be broken into chunks in the following way.</para>
            <list type="table">
            <listheader>
            <term>ID</term>
            <term>Text</term>
            <term>BreakType</term>
            <term>Flags</term>
            <term>Locale</term>
            <term>Attribute</term>
            </listheader>
            <item>
            <term>1</term>
            <term>The small dete</term>
            <term>N/A</term>
            <term>CHUNK_TEXT</term>
            <term>ENGLISH_UK</term>
            <term>CONTENT</term>
            </item>
            <item>
            <term>2</term>
            <term>ctive exclaimed,</term>
            <term>CHUNK_NO_BREAK</term>
            <term>N/A</term>
            <term>N/A</term>
            <term>N/A</term>
            </item>
            <item>
            <term>3</term>
            <term>"C'est fini!"</term>
            <term>CHUNK_EOW</term>
            <term>CHUNK_TEXT</term>
            <term>FRENCH_BELGIAN</term>
            <term>CONTENT</term>
            </item>
            <item>
            <term>4</term>
            <term>Confessions</term>
            <term>CHUNK_EOC</term>
            <term>CHUNK_TEXT</term>
            <term>ENGLISH_UK</term>
            <term>CHAPTER_NAMES</term>
            </item>
            <item>
            <term>5</term>
            <term>Confessions</term>
            <term>CHUNK_EOP</term>
            <term>CHUNK_TEXT</term>
            <term>ENGLISH_UK</term>
            <term>CONTENT</term>
            </item>
            <item>
            <term>6</term>
            <term>The room was silent for several minutes.</term>
            <term>CHUNK_EOP</term>
            <term>CHUNK_TEXT</term>
            <term>ENGLISH_UK</term>
            <term>CONTENT</term>
            </item>
            <item>
            <term>7</term>
            <term>After thinking very hard about it, the young woman asked, "But how did you know?"</term>
            <term>CHUNK_EOS</term>
            <term>CHUNK_TEXT</term>
            <term>ENGLISH_UK</term>
            <term>CONTENT</term>
            </item>
            </list>
            <para>
            Information provided by <c>idChunkSource</c>, <c>cwcStartSource</c>, and <c>cwcLenSource</c> is useful for a search engine that
            highlights hits. If the query is done for an internal value-type property, the search engine will highlight the original text
            from which the text of the internal value-type property has been derived. For instance, in a C++ code filter, the browser, when
            searching for MyFunction in internal value-type property "function definitions," will highlight the function header in the file.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STAT_CHUNK.idChunk">
            <summary>
            The chunk identifier. Chunk identifiers must be unique for the current instance of the IFilter interface. Chunk identifiers
            must be in ascending order. The order in which chunks are numbered should correspond to the order in which they appear in the
            source document. Some search engines can take advantage of the proximity of chunks of various properties. If so, the order in
            which chunks with different properties are emitted will be important to the search engine.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STAT_CHUNK.breakType">
            <summary>
            The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STAT_CHUNK.flags">
            <summary>
            Indicates whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE
            enumeration. If the CHUNK_TEXT flag is set, IFilter::GetText should be used to retrieve the contents of the chunk as a series
            of words. If the CHUNK_VALUE flag is set, IFilter::GetValue should be used to retrieve the value and treat it as a single
            property value. If the filter dictates that the same content be treated as both text and as a value, the chunk should be
            emitted twice in two different chunks, each with one flag set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STAT_CHUNK.locale">
            <summary>
            The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper
            word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR or VT_BSTR, this
            field is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STAT_CHUNK.attribute">
            <summary>
            The property to be applied to the chunk. See FULLPROPSPEC. If a filter requires that the same text have more than one
            property, it needs to emit the text once for each property in separate chunks.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STAT_CHUNK.idChunkSource">
            <summary>The ID of the source of a chunk. The value of the <c>idChunkSource</c> member depends on the nature of the chunk:</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STAT_CHUNK.cwcStartSource">
            <summary>The offset from which the source text for a derived chunk starts in the source chunk.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STAT_CHUNK.cwcLenSource">
            <summary>
            The length in characters of the source text from which the current chunk was derived. A zero value signifies
            character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct
            correspondence exists.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.TIMEOUT_INFO">
            <summary>Stores time-out values for connections and data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.TIMEOUT_INFO.dwSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The size of the structure, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.TIMEOUT_INFO.dwConnectTimeout">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The time-out value for a connection, in seconds.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.TIMEOUT_INFO.dwDataTimeout">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The time-out value for data, in seconds.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.CSearchManager">
            <summary>CLSID_SearchManager.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.CSearchRoot">
            <summary>CLSID_SearchRoot.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.CSearchScopeRule">
            <summary>CLSID_SearchScopeRule.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.FilterRegistration">
            <summary>CLSID_FilterRegistration.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IOpenSearchSource">
            <summary>Exposes a method to get search results from a custom client-side OpenSearch data source.</summary>
            <remarks>
            <para>When to Implement</para>
            <para>Implement this interface when a server-side only solution will not work, such as the following:</para>
            <list type="bullet">
            <item>
            <term>Remote indexes with authentication methods which Windows 7 search federation does not support, like forms-based authentication or other custom authentication methods.</term>
            </item>
            <item>
            <term>High value public stores of vertical data which are not controlled by the developer (such as the Library of Congress or medical research databases) and which do not provide OpenSearch output support today but have public web API.</term>
            </item>
            <item>
            <term>Proprietary enterprise data stores or indexes and legacy content management stores for which it might not be possible to implement a front end.</term>
            </item>
            </list>
            <para>A client-side OpenSearch data source that sits in between the Windows OpenSearch provider and the external data source.</para>
            <para>With a search connector (a .searchconnector-ms file), Windows Explorer calls your implementation with the query parameters. Your implementation returns results formatted in RSS or Atom format. That allows your implementation to provide custom authentication UI and connect to the data source using its proprietary API.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IOpenSearchSource.GetResults(Vanara.PInvoke.HWND,System.String,System.UInt32,System.UInt32,System.Guid@,System.Object@)">
            <summary>Returns search results, from an OpenSearch data source, formatted in RSS or Atom format.</summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>The window handle of the caller.</para>
            </param>
            <param name="pszQuery">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The query as entered by the user. This parameter is equivalent to the OpenSearch {searchTerms} parameter and may be empty.</para>
            </param>
            <param name="dwStartIndex">
            <para>Type: <c>DWORD</c></para>
            <para>The index of the first result being requested. Equivalent to the OpenSearch {startIndex} parameter. See Remarks below.</para>
            </param>
            <param name="dwCount">
            <para>Type: <c>DWORD</c></para>
            <para>The number of results being requested. Equivalent to the OpenSearch {count} parameter.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>The IID of the interface being requested. Typically IID_IStream.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>An interface pointer, of type specified by RIID, to the object containing the results in Atom or RSS format.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or an error value otherwise. B_S_ENDOFROWSET optionally signifies the end of the results. The following errors display appropriate error messages in the info bar:</para>
            <list type="bullet">
            <item>
            <term>INET_E_AUTHENTICATION_REQUIRED (user does not have permission to access this resource)</term>
            </item>
            <item>
            <term>INET_E_RESOURCE_NOT_FOUND (location was unavailable)</term>
            </item>
            <item>
            <term>INET_E_DOWNLOAD_FAILURE (server error)</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>Windows Explorer calls this method with the search query parameters. The IOpenSearchSource implementation returns some or all results after performing required actions, such as providing custom authentication UI or connecting to the data source using a proprietary API.</para>
            <para>Paged Results</para>
            <para>If you do not want the web service to return more than a limited number of results per request, this method can return just a "page" of results at a time. Windows Explorer can get additional pages of results by calling this method repeatedly and specifying a new index number. When returning results, the first result must be the result at the index requested by dwStartIndex.</para>
            <para>Index Numbers and Counts</para>
            <para>The index number identifies the first result on a page of results. It is equivalent to the OpenSearch {startIndex} parameter. The count, equivalent to the OpenSearch {count} parameter, identifies the expected or preferred number of items returned per page.</para>
            <para>If a web service returns 20 items on the first page of results, the expected page size is 20. To get the next 20 items, Windows Explorer would call <c>IOpenSearchSource::GetResults</c> with the value 21 for dwStartIndex and with the value of 20 for dwCount. When a page of results returned by the web service has fewer items than the expected page size, Windows Explorer assumes it has received the last page of results and stops making requests.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISearchFolderItemFactory">
            <summary>
            Exposes methods that create and modify search folders. The Set methods are called first to set up the parameters of the search.
            When not called, default values will be used instead. ISearchFolderItemFactory::GetIDList and
            ISearchFolderItemFactory::GetShellItem return the two forms of the search specified by these parameters.
            </summary>
            <remarks>To implement this interface use class ID <c>CLSID_SearchFolderItemFactory</c>.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchFolderItemFactory.SetDisplayName(System.String)">
            <summary>Sets the search folder display name, as specified.</summary>
            <param name="pszDisplayName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a folder display name as a Unicode string.</para>
            </param>
            <remarks>Calling this method is required. A display name must be set.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchFolderItemFactory.SetFolderTypeID(System.Guid)">
            <summary>Sets a search folder type ID, as specified.</summary>
            <param name="ftid">
            <para>Type: <c>FOLDERTYPEID</c></para>
            <para>The FOLDERTYPEID, which is a <c>GUID</c> used to identify folder types within the system. The default is <c>FOLDERTYPID_Library</c></para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchFolderItemFactory.SetFolderLogicalViewMode(Vanara.PInvoke.Shell32.FOLDERLOGICALVIEWMODE)">
            <summary>
            Sets folder logical view mode. The default settings are based on the which is set by the
            ISearchFolderItemFactory::SetFolderTypeID method.
            </summary>
            <param name="flvm">
            <para>Type: <c>FOLDERLOGICALVIEWMODE</c></para>
            <para>The FOLDERLOGICALVIEWMODE value.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchFolderItemFactory.SetIconSize(System.Int32)">
            <summary>
            Sets the search folder icon size, as specified. The default settings are based on the which is set by the
            ISearchFolderItemFactory::SetFolderTypeID method.
            </summary>
            <param name="iIconSize">
            <para>Type: <c>int</c></para>
            <para>The icon size.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchFolderItemFactory.SetVisibleColumns(System.UInt32,Vanara.PInvoke.Ole32.PROPERTYKEY[])">
            <summary>
            Creates a new column list whose columns are all visible, given an array of PROPERTYKEY structures. The default is based on <c>FolderTypeID</c>.
            </summary>
            <param name="cVisibleColumns">
            <para>Type: <c>UINT</c></para>
            <para>The number of array elements.</para>
            </param>
            <param name="rgKey">
            <para>Type: <c>const PROPERTYKEY*</c></para>
            <para>A pointer to an array of PROPERTYKEY structures.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchFolderItemFactory.SetSortColumns(System.UInt32,Vanara.PInvoke.Shell32.SORTCOLUMN[])">
            <summary>Creates a list of sort column directions, as specified.</summary>
            <param name="cSortColumns">
            <para>Type: <c>UINT</c></para>
            <para>The number of sort columns.</para>
            </param>
            <param name="rgSortColumns">
            <para>Type: <c>SORTCOLUMN*</c></para>
            <para>A pointer to an array of SORTCOLUMN structures containing sort direction. The default is <c>PKEY_ItemNameDisplay</c>.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchFolderItemFactory.SetGroupColumn(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
            <summary>Sets a group column, as specified. If no group column is specified, no grouping occurs.</summary>
            <param name="keyGroup">
            <para>Type: <c>REFPROPERTYKEY</c></para>
            <para>A reference to a group column PROPERTYKEY.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchFolderItemFactory.SetStacks(System.UInt32,Vanara.PInvoke.Ole32.PROPERTYKEY[])">
            <summary>
            Creates a list of stack keys, as specified. If this method is not called, by default the folder will not be stacked.
            </summary>
            <param name="cStackKeys">
            <para>Type: <c>UINT</c></para>
            <para>The number of stacks keys.</para>
            </param>
            <param name="rgStackKeys">
            <para>Type: <c>PROPERTYKEY*</c></para>
            <para>A pointer to an array of PROPERTYKEY structures containing stack key information.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchFolderItemFactory.SetScope(Vanara.PInvoke.Shell32.IShellItemArray)">
            <summary>Sets search scope, as specified.</summary>
            <param name="psiaScope">
            <para>Type: <c>IShellItemArray*</c></para>
            <para>
            A pointer to the list of locations to search. The search will include this location and all its subcontainers. The default is <c>FOLDERID_Profile</c>
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchFolderItemFactory.SetCondition(Vanara.PInvoke.SearchApi.ICondition)">
            <summary>
            Sets the ICondition of the search. When this method is not called, the resulting search will have no filters applied.
            </summary>
            <param name="pCondition">
            <para>Type: <c>ICondition*</c></para>
            <para>A pointer to an ICondition interface.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchFolderItemFactory.GetShellItem(System.Guid@)">
            <summary>Gets the search folder as a IShellItem.</summary>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the desired IID.</para>
            </param>
            <returns>The IShellItem interface pointer specified in riid.</returns>
            <remarks>When the retrieved IShellItem is enumerated, it returns the search results.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISearchFolderItemFactory.GetIDList">
            <summary>Gets the search folder as an ITEMIDLIST.</summary>
            <returns>
            <para>Type: <c>PIDLIST_ABSOLUTE*</c></para>
            <para>When this method returns successfully, contains a PIDL.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.GetShellItem``1(Vanara.PInvoke.SearchApi.ISearchFolderItemFactory)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.SearchApi.ISearchFolderItemFactory.GetShellItem(System.Guid@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="sfif">An <see cref="T:Vanara.PInvoke.SearchApi.ISearchFolderItemFactory"/> instance.</param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.SearchFolderItemFactory">
            <summary>CLSID_SearchFolderItemFactory</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.CONDITION_CREATION_OPTIONS">
            <summary><para>Provides a set of flags to be used with the following interfaces to indicate the type of condition tree node: ICondition, ICondition2, IConditionFactory, IConditionFactory2, and IConditionGenerator.</para></summary><remarks><para>&gt;Only one of following flags should be set simultaneously:</para><list type="bullet"><item><term>CONDITION_CREATION_VECTOR_AND</term></item><item><term>CONDITION_CREATION_VECTOR_OR</term></item><item><term>CONDITION_CREATION_VECTOR_LEAF</term></item></list><para>However, if none of these flags is set, then attempting to create a leaf condition with VT_VECTOR set in the PROPVARIANT results in failure.</para></remarks>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_CREATION_OPTIONS.CONDITION_CREATION_DEFAULT">
            <summary>Indicates that the condition is set to the default value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_CREATION_OPTIONS.CONDITION_CREATION_NONE">
            <summary>Indicates that the condition is set to NULL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_CREATION_OPTIONS.CONDITION_CREATION_SIMPLIFY">
            <summary>Indicates that you should simplify the returned condition as much as possible. In some cases this flag indicates that the returned condition is not newly created but refers to an existing object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_CREATION_OPTIONS.CONDITION_CREATION_VECTOR_AND">
            <summary>Indicates that you should create an AND condition of leaves with vector elements as values, instead of attempting to create a leaf condition with VT_VECTOR set in the PROPVARIANT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_CREATION_OPTIONS.CONDITION_CREATION_VECTOR_OR">
            <summary>Indicates that you should create an OR condition of leaves with vector elements as values, instead of attempting to create a leaf condition with VT_VECTOR set in the PROPVARIANT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_CREATION_OPTIONS.CONDITION_CREATION_VECTOR_LEAF">
            <summary>Indicates that you should allow the creation of a leaf condition with VT_VECTOR set in the PROPVARIANT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_CREATION_OPTIONS.CONDITION_CREATION_USE_CONTENT_LOCALE">
            <summary>Indicates that you should ignore any specified locale and use the currently selected content locale IConditionFactory2::CreateStringLeaf and IConditionFactory2::CreateLeaf.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.QUERY_PARSER_MANAGER_OPTION">
            <summary>
            Used by IQueryParserManager::SetOption to set parsing options. This can be used to specify schemas and localization options.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.QUERY_PARSER_MANAGER_OPTION.QPMO_SCHEMA_BINARY_NAME">
            <summary>
            A VT_LPWSTR containing the name of the file that contains the schema binary. The default value is StructuredQuerySchema.bin
            for the SystemIndex catalog and StructuredQuerySchemaTrivial.bin for the trivial catalog.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.QUERY_PARSER_MANAGER_OPTION.QPMO_PRELOCALIZED_SCHEMA_BINARY_PATH">
            <summary>
            Either a VT_BOOL or a VT_LPWSTR. If the value is a VT_BOOL and is FALSE, a pre-localized schema will not be used. If the
            value is a VT_BOOL and is TRUE, IQueryParserManager will use the pre-localized schema binary in "". If the value is a
            VT_LPWSTR, the value should contain the full path of the folder in which the pre-localized schema binary can be found. The
            default value is VT_BOOL with TRUE.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.QUERY_PARSER_MANAGER_OPTION.QPMO_UNLOCALIZED_SCHEMA_BINARY_PATH">
            <summary>
            A VT_LPWSTR containing the full path to the folder that contains the unlocalized schema binary. The default value is "".
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.QUERY_PARSER_MANAGER_OPTION.QPMO_LOCALIZED_SCHEMA_BINARY_PATH">
            <summary>
            A VT_LPWSTR containing the full path to the folder that contains the localized schema binary that can be read and written to
            as needed. The default value is "".
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.QUERY_PARSER_MANAGER_OPTION.QPMO_APPEND_LCID_TO_LOCALIZED_PATH">
            <summary>
            A VT_BOOL. If TRUE, then the paths for pre-localized and localized binaries have "" appended to them, where LCID is the
            decimal locale ID for the localized language. The default is TRUE.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.QUERY_PARSER_MANAGER_OPTION.QPMO_LOCALIZER_SUPPORT">
            <summary>
            A VT_UNKNOWN with an object supporting ISchemaLocalizerSupport. This object will be used instead of the default localizer
            support object.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_MULTIOPTION">
            <summary>
            <para>A set of flags used by IQueryParser::SetMultiOption to indicate individual options.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_MULTIOPTION.SQMO_VIRTUAL_PROPERTY">
            <summary>
            To indicate that a leaf node with property name P and constant C should be replaced with a leaf node with property name Q,
            operation op, and constant C by IConditionFactory::Resolve, do the following: call IQueryParser::SetMultiOption with
            SQMO_VIRTUAL_PROPERTY as option, P as pszOptionKey, and for pOptionValue provide a VT_UNKNOWN with an IEnumVARIANT interface
            that enumerates exactly two values: a VT_BSTR with value Q, and a VT_I4 that is a CONDITION_OPERATION operation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_MULTIOPTION.SQMO_DEFAULT_PROPERTY">
            <summary>
            To indicate that a leaf node with no property name and a semantic type T (or one that is a subtype of T) should be replaced
            with one having property name P by IConditionFactory::Resolve, do the following: call IQueryParser::SetMultiOption with
            SQMO_DEFAULT_PROPERTY as option, T as pszOptionKey, and for pOptionValue provide a VT_LPWSTR with value P.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_MULTIOPTION.SQMO_GENERATOR_FOR_TYPE">
            <summary>
            To indicate that an IConditionGenerator G should be used to recognize named entities of the semantic type named T, and that
            IConditionFactory::Resolve should generate condition trees for those named entities, call IQueryParser::SetMultiOption with
            SQMO_GENERATOR_FOR_TYPE as option, T as pszOptionKey and for pOptionValue provide a VT_UNKNOWN with value G.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_MULTIOPTION.SQMO_MAP_PROPERTY">
            <summary>
            Windows 7, and later. To indicate that a node with property P should map to one or more other properties, call
            IQueryParser::SetMultiOption with SQMO_MAP_PROPERTY as option, P as pszOptionKey, and for pOptionValue provide a VT_VECTOR or
            VT_LPWSTR, where each string is a property name. During resolution, this map is added to those of the loaded schema. Calling
            IQueryParser::SetMultiOption with pOptionValue as VT_NULL removes the mapping.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION">
            <summary>Options for resolving data into a condition tree.</summary>
            <remarks>The <c>STRUCTURED_QUERY_RESOLVE_OPTION</c> type is defined in StructuredQuery.h as shown here.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION.SQRO_DEFAULT">
            <summary>Windows 7 and later. The default flag.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION.SQRO_DONT_RESOLVE_DATETIME">
            <summary>
            Unless this flag is set, any relative date/time expression in pConditionTree is replaced with an absolute date/time range
            that has been resolved against the reference date/time pointed to by pstReferenceTime. For example, if an AQS query contained
            the relative date/time expression "date:this month" and the reference date/time was 9/19/2006 10:28:33, the resolved
            condition tree would contain a date/time range beginning at 9/1/2006 00:00:00 and ending at 10/1/2006 00:00:00 (in the UTC
            time zone).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION.SQRO_ALWAYS_ONE_INTERVAL">
            <summary>
            Unless this flag is set, resolving a relative date/time expression may result in an OR of several intervals. For example, if
            an AQS query contained "date:Monday" and the reference date/time was 9/19/2006 10:28:33 (a Tuesday), the resolved condition
            tree would contain an OR of three 24 hour ranges corresponding to the Mondays of 9/11/2006, 9/18/2006 and 9/25/2006, because
            it is not clear which Monday was referenced. If this flag is set, the result will always be a single date/time range (for
            this example, it would be a date/time range beginning at 9/18/2006 00:00:00 and ending at 9/19/2006 00:00:00).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION.SQRO_DONT_SIMPLIFY_CONDITION_TREES">
            <summary>Unless this flag is set, the resulting condition tree will have any possible simplifications applied to it.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION.SQRO_DONT_MAP_RELATIONS">
            <summary>
            Unless this flag is true, a leaf node with a virtual property that maps to several properties will be replaced by an OR of
            leaf nodes containing the actual properties. For example, the AQS query "to:Bill" may result in a leaf node where the
            property named actually maps to the two properties and , so the resolved condition tree would have an OR that looks for
            "Bill" in those two properties.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION.SQRO_DONT_RESOLVE_RANGES">
            <summary>
            A range resulting from a date/time expression, an expression such as "20..40", is first resolved to a leaf node that has a
            VT_UNKNOWN value where the punkVal member implements the IInterval interface. Unless this flag is set, the returned condition
            tree will have been further resolved to an AND of simple comparisons such as COP_GREATERTHANOREQUAL and COP_LESSTHAN. For
            example, for an AQS query "date:this month" resolved against 9/19/2006 10:28:33, if this flag is not set, the resulting
            condition tree is an AND of System.ItemDate COP_GREATERTHANOREQUAL 9/1/2006 00:00:00 and System.ItemDate COP_LESSTHAN
            10/1/2006 00:00:00. If this flag is set, the resulting condition tree will relate System.ItemDate to an IInterval such that
            its IInterval::GetLimits method returns ILK_EXPLICIT_INCLUDED, 9/1/2006 00:00:00, ILK_EXPLICIT_EXCLUDED and 10/1/2006 00:00:00.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION.SQRO_DONT_REMOVE_UNRESTRICTED_KEYWORDS">
            <summary>
            An unrestricted keyword is a keyword that is not associated with a value that completes the condition. For example, in the
            following AQS query, the property denoted by "From" is considered an unrestricted keyword: "Kind:email Subject:"My Resume"
            From:". If this flag is set, such a property will be present in the resulting condition tree as a leaf node having a
            COP_IMPLICIT operation, an empty string value, and a semantic type of System.StructuredQueryType.Value. Otherwise, it will be
            removed entirely.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION.SQRO_DONT_SPLIT_WORDS">
            <summary>
            If this flag is set, a group of words not separated by white space will be kept together in a single leaf node. If this flag
            is not set, the group will be broken up into separate leaf nodes. An application may want to set this flag when resolving a
            condition tree if the resulting tree will be further processed by code that should do any additional word breaking.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION.SQRO_IGNORE_PHRASE_ORDER">
            <summary>
            If a phrase in an AQS query is enclosed in double quotes, the words in that phrase go into a single leaf node (regardless of
            whether SQRO_DONT_SPLIT_WORDS is set) unless this flag is set, in which case they end up in separate leaf nodes and their
            order no longer matters. An application can set this flag if it is not able to handle leaf nodes with multiple words correctly.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION.SQRO_ADD_VALUE_TYPE_FOR_PLAIN_VALUES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION.SQRO_ADD_ROBUST_ITEM_NAME">
            <summary>Work around known issues in word breakers, adding conditions on PKEY_ItemNameDisplay as needed.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_SINGLE_OPTION">
            <summary>
            <para>A set of flags to be used with IQueryParser::SetOption and IQueryParser::GetOption to indicate individual options.</para>
            </summary>
            <remarks>
            <para>Windows 7 adds new constants that help refine query condition trees parsed by the IQueryParser interface.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_SINGLE_OPTION.SQSO_SCHEMA">
            <summary>
            The option value should be a VT_LPWSTR that is the path to a file containing a schema binary. It is set automatically when
            obtaining a query parser through IQueryParserManager::CreateLoadedParser.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_SINGLE_OPTION.SQSO_LOCALE_WORD_BREAKING">
            <summary>
            The option value must be VT_EMPTY to use the default word breaker (current keyboard locale) or a VT_UI4 that is a valid LCID.
            The LCID indicates the expected locale of content words in queries to be parsed and is used to choose a suitable word breaker
            for the query. IQueryParser::Parse will return an error unless you set either this option or SQSO_WORD_BREAKER before calling it.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_SINGLE_OPTION.SQSO_WORD_BREAKER">
            <summary>
            When setting this option, the value should be a VT_EMPTY for using the default word breaker for the chosen locale, or a
            VT_UNKNOWN with an object supporting the IWordBreaker interface. Retrieving the option always returns a VT_UNKNOWN with an
            object supporting the IWordBreaker interface, unless there is no suitable word breaker for the chosen locale, in which case
            VT_EMPTY is returned.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_SINGLE_OPTION.SQSO_NATURAL_SYNTAX">
            <summary>
            The option value should be a VT_EMPTY or a VT_BOOL with VARIANT_TRUE to allow both natural query syntax and advanced query
            syntax (the default) or a VT_BOOL with VARIANT_FALSE to allow only advanced query syntax. Retrieving the option always
            returns a VT_BOOL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_SINGLE_OPTION.SQSO_AUTOMATIC_WILDCARD">
            <summary>
            The option value should be a VT_BOOL with VARIANT_TRUE to generate query expressions as if each word in the query had the
            wildcard character * appended to it (unless followed by punctuation other than a parenthesis), a VT_BOOL with VARIANT_FALSE
            to use the words as they are (the default), or a VT_EMPTY. In most cases, a word-wheeling application should set this option
            to VARIANT_TRUE. Retrieving the option always returns a VT_BOOL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_SINGLE_OPTION.SQSO_TRACE_LEVEL">
            <summary>Reserved. The value should be VT_EMPTY (the default) or a VT_I4. Retrieving the option always returns a VT_I4.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_SINGLE_OPTION.SQSO_LANGUAGE_KEYWORDS">
            <summary>
            The option value must be a VT_I4 that is a valid LANGID. The LANGID indicates the expected language of Structured Query
            keywords in queries to be parsed. It is set automatically when obtaining a query parser through IQueryParserManager::CreateLoadedParser.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_SINGLE_OPTION.SQSO_SYNTAX">
            <summary>Windows 7 and later. The option value must be a VT_UI4 that is a SEARCH_QUERY_SYNTAX value. The default is SQS_NATURAL_QUERY_SYNTAX.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_SINGLE_OPTION.SQSO_TIME_ZONE">
            <summary>
            Windows 7 and later. The value must be a VT_BLOB that is a copy of a TIME_ZONE_INFORMATION structure. The default is the
            current time zone.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_SINGLE_OPTION.SQSO_IMPLICIT_CONNECTOR">
            <summary>
            Windows 7 and later. This setting decides what connector should be assumed between conditions when none is specified. The
            value must be a VT_UI4 that is a CONDITION_TYPE. Only CT_AND_CONDITION and CT_OR_CONDITION are valid. It defaults to CT_AND_CONDITION.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_SINGLE_OPTION.SQSO_CONNECTOR_CASE">
            <summary>
            Windows 7 and later. This setting decides whether there are special requirements on the case of connector keywords (such as
            AND or OR). The value must be a VT_UI4 that is a CASE_REQUIREMENT value. It defaults to CASE_REQUIREMENT_UPPER_IF_AQS.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IConditionFactory">
            <summary>Provides methods for creating or resolving a condition tree that was obtained by parsing a query string.</summary>
            <remarks>
            The StructuredQuerySample code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to read lines from the
            console, parse them using the system schema, and display the resulting condition trees.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory.MakeNot(Vanara.PInvoke.SearchApi.ICondition,System.Boolean)">
            <summary>Creates a condition node that is a logical negation (NOT) of another condition (a subnode of this node).</summary>
            <param name="pcSub">
            <para>Type: <c>ICondition*</c></para>
            <para>Pointer to the ICondition subnode to be negated.</para>
            </param>
            <param name="fSimplify">
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>TRUE</c> to logically simplify the result if possible; <c>FALSE</c> otherwise. In a query builder scenario, fSimplify
            should typically be set to VARIANT_FALSE.
            </para>
            </param>
            <returns>
            <para>Type: <c>ICondition**</c></para>
            <para>Receives a pointer to the new ICondition node.</para>
            </returns>
            <remarks>
            <para>
            Logically simplifying a condition node usually results in a smaller, more easily traversed and processed condition tree. For
            example, if pcSub is itself a negation condition with a subcondition C, then the double negation is logically resolved, and
            ppcResult is set to C. Without simplification, the resulting tree would look like NOT — NOT — C.
            </para>
            <para>
            Applications that need to execute queries based on the condition tree would typically benefit from setting this parameter to <c>TRUE</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory.MakeAndOr(Vanara.PInvoke.SearchApi.CONDITION_TYPE,Vanara.PInvoke.Ole32.IEnumUnknown,System.Boolean)">
            <summary>Creates a condition node that is a logical conjunction (AND) or disjunction (OR) of a collection of subconditions.</summary>
            <param name="ct">
            <para>Type: <c>CONDITION_TYPE</c></para>
            <para>The CONDITION_TYPE of the condition node. The <c>CONDITION_TYPE</c> must be either <c>CT_AND_CONDITION</c> or <c>CT_OR_CONDITION</c>.</para>
            </param>
            <param name="peuSubs">
            <para>Type: <c>IEnumUnknown*</c></para>
            <para>A pointer to an enumeration of ICondition objects, or <c>NULL</c> for an empty enumeration.</para>
            </param>
            <param name="fSimplify">
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>TRUE</c> to logically simplify the result, if possible; then the result will not necessarily to be of the specified kind.
            <c>FALSE</c> if the result should have exactly the prescribed structure.
            </para>
            <para>
            An application that plans to execute a query based on the condition tree would typically benefit from setting this parameter
            to <c>TRUE</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>ICondition**</c></para>
            <para>Receives the address of a pointer to the new ICondition node.</para>
            </returns>
            <remarks>
            There are no special condition trees for <c>TRUE</c> and <c>FALSE</c>. However, a condition tree consisting of an AND node
            with no subconditions is always <c>TRUE</c>, and a condition tree consisting of an OR node with no subconditions is always <c>FALSE</c>.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory.MakeLeaf(System.String,Vanara.PInvoke.SearchApi.CONDITION_OPERATION,System.String,Vanara.PInvoke.Ole32.PROPVARIANT,Vanara.PInvoke.SearchApi.IRichChunk,Vanara.PInvoke.SearchApi.IRichChunk,Vanara.PInvoke.SearchApi.IRichChunk,System.Boolean)">
            <summary>Creates a leaf condition node that represents a comparison of property value and constant value.</summary>
            <param name="pszPropertyName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            The name of a property to be compared, or <c>NULL</c> for an unspecified property. The locale name of the leaf node is LOCALE_NAME_USER_DEFAULT.
            </para>
            </param>
            <param name="cop">
            <para>Type: <c>CONDITION_OPERATION</c></para>
            <para>A CONDITION_OPERATION enumeration.</para>
            </param>
            <param name="pszValueType">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of a semantic type of the value, or <c>NULL</c> for a plain string.</para>
            </param>
            <param name="ppropvar">
            <para>Type: <c>PROPVARIANT const*</c></para>
            <para>The constant value against which the property value should be compared.</para>
            </param>
            <param name="richChunk1">The rich chunk1.</param>
            <param name="richChunk2">The rich chunk2.</param>
            <param name="richChunk3">The rich chunk3.</param>
            <param name="fExpand">
            <para>Type: <c>BOOL</c></para>
            <para>
            If <c>TRUE</c> and pszPropertyName identifies a virtual property, the resulting node is not a leaf node; instead, it is a
            disjunction of leaf condition nodes, each of which corresponds to one expansion of the virtual property.
            </para>
            </param>
            <returns>
            <para>Type: <c>ICondition**</c></para>
            <para>Receives a pointer to the new ICondition leaf node.</para>
            </returns>
            <remarks>
            <para>For more information about leaf node terms (property, value, and operation), see ICondition::GetInputTerms.</para>
            <para>
            A virtual property has one or more metadata items in which the key is "MapsToRelation" and the value is a property name
            (which is one expansion of the property). For more information about metadata, see MetaData.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory.Resolve(Vanara.PInvoke.SearchApi.ICondition,Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION,Vanara.PInvoke.SYSTEMTIME@)">
            <summary>
            Performs a variety of transformations on a condition tree, including the following: resolves conditions with relative
            date/time expressions to conditions with absolute date/time (as a VT_FILETIME); turns other recognized named entities into
            condition trees with actual values; simplifies condition trees; replaces virtual or compound properties with OR trees of
            other properties; removes condition trees resulting from queries with property keywords that had no condition applied.
            </summary>
            <param name="pc">
            <para>Type: <c>ICondition*</c></para>
            <para>A pointer to an ICondition object to be resolved.</para>
            </param>
            <param name="sqro">
            <para>Type: <c>STRUCTURED_QUERY_RESOLVE_OPTION</c></para>
            <para>
            Specifies zero or more of the STRUCTURED_QUERY_RESOLVE_OPTION flags. For <c>Windows 7 and later</c>, the
            SQRO_ADD_VALUE_TYPE_FOR_PLAIN_VALUES flag is automatically added to <paramref name="sqro"/>.
            </para>
            </param>
            <param name="pstReferenceTime">
            <para>Type: <c>SYSTEMTIME const*</c></para>
            <para>
            A pointer to a <c>SYSTEMTIME</c> value to use as the reference date and time. A null pointer can be passed if <paramref
            name="sqro"/> is set to SQRO_DONT_RESOLVE_DATETIME.
            </para>
            </param>
            <returns>
            <para>Type: <c>ICondition**</c></para>
            <para>
            Receives a pointer to the new ICondition in which all time fields have been resolved to have values of type VT_FILETIME. This
            new condition tree is the resolved version of <paramref name="pc"/>.
            </para>
            </returns>
            <remarks>
            <para>
            In a condition tree produced by the Parse method and returned by GetQuery, the leaves pair up properties with restrictions on
            these properties, and result in a condition tree that is partially finished. The <c>IConditionFactory::Resolve</c> method
            finishes such a condition tree by a process known as resolution. The input condition tree is not modified in any way. The
            output condition tree may share parts of the input condition that contained no leaf nodes with unresolved date/time values.
            </para>
            <para><c>Note</c> Resolving a leaf node often produces a non-leaf node.</para>
            <para>
            For example, Structured Query supports relative date/time expressions, which remain unresolved until they are applied to some
            reference time. In a leaf node with semantic type <c>System.StructuredQueryType.DateTime</c>, the value can be either a
            VT_FILETIME or a VT_LPWSTR. VT_FILETIME is an absolute date/time so it is already resolved. VT_LPWSTR is a string
            representation of a relative date/time expression. The specified reference time should be a local time, but the resolved
            times in the resulting query expression will be in Coordinated Universal Time (UTC).
            </para>
            <para>
            The StructuredQuerySample code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to read lines from
            the console, parse them using the system schema, and display the resulting condition trees.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IConditionFactory2">
            <summary>
            Extends the functionality of IConditionFactory. <c>IConditionFactory2</c> provides methods for creating or resolving a condition tree that was obtained by parsing a query string.
            </summary>
            <seealso cref="T:Vanara.PInvoke.SearchApi.IConditionFactory" />
            <remarks>
            The StructuredQuerySample code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to read lines from the console, parse them using the system schema, and display the resulting condition trees.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory2.MakeNot(Vanara.PInvoke.SearchApi.ICondition,System.Boolean)">
            <summary>Creates a condition node that is a logical negation (NOT) of another condition (a subnode of this node).</summary>
            <param name="pcSub">
            <para>Type: <c>ICondition*</c></para>
            <para>Pointer to the ICondition subnode to be negated.</para>
            </param>
            <param name="fSimplify">
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>TRUE</c> to logically simplify the result if possible; <c>FALSE</c> otherwise. In a query builder scenario, fSimplify
            should typically be set to VARIANT_FALSE.
            </para>
            </param>
            <returns>
            <para>Type: <c>ICondition**</c></para>
            <para>Receives a pointer to the new ICondition node.</para>
            </returns>
            <remarks>
            <para>
            Logically simplifying a condition node usually results in a smaller, more easily traversed and processed condition tree. For
            example, if pcSub is itself a negation condition with a subcondition C, then the double negation is logically resolved, and
            ppcResult is set to C. Without simplification, the resulting tree would look like NOT — NOT — C.
            </para>
            <para>
            Applications that need to execute queries based on the condition tree would typically benefit from setting this parameter to <c>TRUE</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory2.MakeAndOr(Vanara.PInvoke.SearchApi.CONDITION_TYPE,Vanara.PInvoke.Ole32.IEnumUnknown,System.Boolean)">
            <summary>Creates a condition node that is a logical conjunction (AND) or disjunction (OR) of a collection of subconditions.</summary>
            <param name="ct">
            <para>Type: <c>CONDITION_TYPE</c></para>
            <para>The CONDITION_TYPE of the condition node. The <c>CONDITION_TYPE</c> must be either <c>CT_AND_CONDITION</c> or <c>CT_OR_CONDITION</c>.</para>
            </param>
            <param name="peuSubs">
            <para>Type: <c>IEnumUnknown*</c></para>
            <para>A pointer to an enumeration of ICondition objects, or <c>NULL</c> for an empty enumeration.</para>
            </param>
            <param name="fSimplify">
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>TRUE</c> to logically simplify the result, if possible; then the result will not necessarily to be of the specified kind.
            <c>FALSE</c> if the result should have exactly the prescribed structure.
            </para>
            <para>
            An application that plans to execute a query based on the condition tree would typically benefit from setting this parameter
            to <c>TRUE</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>ICondition**</c></para>
            <para>Receives the address of a pointer to the new ICondition node.</para>
            </returns>
            <remarks>
            There are no special condition trees for <c>TRUE</c> and <c>FALSE</c>. However, a condition tree consisting of an AND node
            with no subconditions is always <c>TRUE</c>, and a condition tree consisting of an OR node with no subconditions is always <c>FALSE</c>.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory2.MakeLeaf(System.String,Vanara.PInvoke.SearchApi.CONDITION_OPERATION,System.String,Vanara.PInvoke.Ole32.PROPVARIANT,Vanara.PInvoke.SearchApi.IRichChunk,Vanara.PInvoke.SearchApi.IRichChunk,Vanara.PInvoke.SearchApi.IRichChunk,System.Boolean)">
            <summary>Creates a leaf condition node that represents a comparison of property value and constant value.</summary>
            <param name="pszPropertyName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            The name of a property to be compared, or <c>NULL</c> for an unspecified property. The locale name of the leaf node is LOCALE_NAME_USER_DEFAULT.
            </para>
            </param>
            <param name="cop">
            <para>Type: <c>CONDITION_OPERATION</c></para>
            <para>A CONDITION_OPERATION enumeration.</para>
            </param>
            <param name="pszValueType">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of a semantic type of the value, or <c>NULL</c> for a plain string.</para>
            </param>
            <param name="ppropvar">
            <para>Type: <c>PROPVARIANT const*</c></para>
            <para>The constant value against which the property value should be compared.</para>
            </param>
            <param name="richChunk1">The rich chunk1.</param>
            <param name="richChunk2">The rich chunk2.</param>
            <param name="richChunk3">The rich chunk3.</param>
            <param name="fExpand">
            <para>Type: <c>BOOL</c></para>
            <para>
            If <c>TRUE</c> and pszPropertyName identifies a virtual property, the resulting node is not a leaf node; instead, it is a
            disjunction of leaf condition nodes, each of which corresponds to one expansion of the virtual property.
            </para>
            </param>
            <returns>
            <para>Type: <c>ICondition**</c></para>
            <para>Receives a pointer to the new ICondition leaf node.</para>
            </returns>
            <remarks>
            <para>For more information about leaf node terms (property, value, and operation), see ICondition::GetInputTerms.</para>
            <para>
            A virtual property has one or more metadata items in which the key is "MapsToRelation" and the value is a property name
            (which is one expansion of the property). For more information about metadata, see MetaData.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory2.Resolve(Vanara.PInvoke.SearchApi.ICondition,Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION,Vanara.PInvoke.SYSTEMTIME@)">
            <summary>
            Performs a variety of transformations on a condition tree, including the following: resolves conditions with relative
            date/time expressions to conditions with absolute date/time (as a VT_FILETIME); turns other recognized named entities into
            condition trees with actual values; simplifies condition trees; replaces virtual or compound properties with OR trees of
            other properties; removes condition trees resulting from queries with property keywords that had no condition applied.
            </summary>
            <param name="pc">
            <para>Type: <c>ICondition*</c></para>
            <para>A pointer to an ICondition object to be resolved.</para>
            </param>
            <param name="sqro">
            <para>Type: <c>STRUCTURED_QUERY_RESOLVE_OPTION</c></para>
            <para>
            Specifies zero or more of the STRUCTURED_QUERY_RESOLVE_OPTION flags. For <c>Windows 7 and later</c>, the
            SQRO_ADD_VALUE_TYPE_FOR_PLAIN_VALUES flag is automatically added to <paramref name="sqro"/>.
            </para>
            </param>
            <param name="pstReferenceTime">
            <para>Type: <c>SYSTEMTIME const*</c></para>
            <para>
            A pointer to a <c>SYSTEMTIME</c> value to use as the reference date and time. A null pointer can be passed if
            <paramref name="sqro"/> is set to SQRO_DONT_RESOLVE_DATETIME.
            </para>
            </param>
            <returns>
            <para>Type: <c>ICondition**</c></para>
            <para>
            Receives a pointer to the new ICondition in which all time fields have been resolved to have values of type VT_FILETIME. This
            new condition tree is the resolved version of <paramref name="pc"/>.
            </para>
            </returns>
            <remarks>
            <para>
            In a condition tree produced by the Parse method and returned by GetQuery, the leaves pair up properties with restrictions on
            these properties, and result in a condition tree that is partially finished. The <c>IConditionFactory::Resolve</c> method
            finishes such a condition tree by a process known as resolution. The input condition tree is not modified in any way. The
            output condition tree may share parts of the input condition that contained no leaf nodes with unresolved date/time values.
            </para>
            <para><c>Note</c> Resolving a leaf node often produces a non-leaf node.</para>
            <para>
            For example, Structured Query supports relative date/time expressions, which remain unresolved until they are applied to some
            reference time. In a leaf node with semantic type <c>System.StructuredQueryType.DateTime</c>, the value can be either a
            VT_FILETIME or a VT_LPWSTR. VT_FILETIME is an absolute date/time so it is already resolved. VT_LPWSTR is a string
            representation of a relative date/time expression. The specified reference time should be a local time, but the resolved
            times in the resulting query expression will be in Coordinated Universal Time (UTC).
            </para>
            <para>
            The StructuredQuerySample code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to read lines from
            the console, parse them using the system schema, and display the resulting condition trees.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory2.CreateTrueFalse(System.Boolean,Vanara.PInvoke.SearchApi.CONDITION_CREATION_OPTIONS,System.Guid@)">
            <summary>
            Creates a search condition that is either <c>TRUE</c> or <c>FALSE</c>. The returned object supports ICondition and ICondition2
            </summary>
            <param name="fVal">
            <para>Type: <c>BOOL</c></para>
            <para>The value of the search condition to use. fValue should typically be set to VARIANT_FALSE.</para>
            </param>
            <param name="cco">
            <para>Type: <c>CONDITION_CREATION_OPTIONS</c></para>
            <para>The condition creation operation of the leaf condition as the CONDITION_CREATION_OPTIONS enumeration.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>The desired IID of the enumerating interface: either IEnumUnknown, IEnumVARIANT, or (for a negation condition) IID_ICondition.</para>
            </param>
            <returns>Receives a pointer to zero or more ICondition and ICondition2 objects.</returns>
            <remarks>For default options, use the CONDITION_CREATION_DEFAULT flag.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory2.CreateNegation(Vanara.PInvoke.SearchApi.ICondition,Vanara.PInvoke.SearchApi.CONDITION_CREATION_OPTIONS,System.Guid@)">
            <summary>
            Creates a condition node that is a logical negation (NOT) of another condition (a subnode of this node).
            </summary>
            <param name="pcSub"><para>Type: <c>ICondition*</c></para>
            <para>A pointer to the ICondition subnode to be negated. For default options, use the CONDITION_CREATION_DEFAULT flag.</para></param>
            <param name="cco"><para>Type: <c>CONDITION_CREATION_OPTIONS</c></para>
            <para>The condition creation operation of the leaf condition as the CONDITION_CREATION_OPTIONS enumeration.</para></param>
            <param name="riid"><para>Type: <c>REFIID</c></para>
            <para>The desired IID of the enumerating interface: either IEnumUnknown, IEnumVARIANT, or (for a negation condition) IID_ICondition.</para></param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>Receives a pointer to zero or more ICondition and ICondition2 objects.</para>
            </returns>
            <remarks>
            <para>
            Logically simplifying a condition node usually results in a smaller, more easily traversed and processed condition tree. For
            example, if pcSub is itself a negation condition with a subcondition C, then the double negation is logically resolved, and
            ppcResult is set to C. Without simplification, the resulting tree would look like NOT — NOT — C.
            </para>
            <para>
            Applications that need to execute queries based on the condition tree would typically benefit from setting this parameter to <c>TRUE</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory2.CreateCompoundFromObjectArray(Vanara.PInvoke.SearchApi.CONDITION_TYPE,Vanara.PInvoke.Shell32.IObjectArray,Vanara.PInvoke.SearchApi.CONDITION_CREATION_OPTIONS,System.Guid@)">
            <summary>
            Creates a leaf condition node that is a conjunction (AND) or a disjunction (OR) of a collection of subconditions. The
            returned object supports ICondition and ICondition2.
            </summary>
            <param name="ct"><para>Type: <c>CONDITION_TYPE</c></para>
            <para>A CONDITION_TYPE enumeration that must be set to either the CT_AND_CONDITION or CT_OR_CONDITION flag.</para></param>
            <param name="poaSubs"><para>Type: <c>IObjectArray*</c></para>
            <para>
            Each element of the poaSubs parameter must implement ICondition. This parameter may also be <c>NULL</c>, which is equivalent
            to being empty.
            </para></param>
            <param name="cco"><para>Type: <c>CONDITION_CREATION_OPTIONS</c></para>
            <para>The condition creation operation of the leaf condition as the CONDITION_CREATION_OPTIONS enumeration.</para></param>
            <param name="riid"><para>Type: <c>REFIID</c></para>
            <para>
            The desired IID of the enumerating interface: either IEnumUnknown, IID_IEnumVARIANT, or (for a negation condition) IID_ICondition.
            </para></param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>A collection of zero or more ICondition and ICondition2 objects.</para>
            </returns>
            <remarks>For default options, use the CONDITION_CREATION_DEFAULT flag.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory2.CreateCompoundFromArray(Vanara.PInvoke.SearchApi.CONDITION_TYPE,Vanara.PInvoke.SearchApi.ICondition[],System.UInt32,Vanara.PInvoke.SearchApi.CONDITION_CREATION_OPTIONS,System.Guid@)">
            <summary>
            Creates a leaf condition node that is a conjunction (AND) or a disjunction (OR) from an array of condition nodes. The
            returned object supports ICondition and ICondition2.
            </summary>
            <param name="ct"><para>Type: <c>CONDITION_TYPE</c></para>
            <para>A CONDITION_TYPE enumeration that must be set to either the CT_AND_CONDITION or CT_OR_CONDITION flag.</para></param>
            <param name="ppcondSubs"><para>Type: <c>ICondition**</c></para>
            <para>Each element of the ppCondSubs parameter must implement ICondition.</para></param>
            <param name="cSubs"><para>Type: <c>ULONG</c></para>
            <para>The leaf subcondition as an unsigned 64-bit integer value.</para></param>
            <param name="cco"><para>Type: <c>CONDITION_CREATION_OPTIONS</c></para>
            <para>The condition creation operation of the leaf condition as the CONDITION_CREATION_OPTIONS enumeration.</para></param>
            <param name="riid"><para>Type: <c>REFIID</c></para>
            <para>
            The desired IID of the enumerating interface: either IEnumUnknown, IID_IEnumVARIANT, or (for a negation condition) IID_ICondition.
            </para></param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>A collection of zero or more ICondition and ICondition2 objects.</para>
            </returns>
            <remarks>For default options, use the CONDITION_CREATION_DEFAULT flag.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory2.CreateStringLeaf(Vanara.PInvoke.Ole32.PROPERTYKEY@,Vanara.PInvoke.SearchApi.CONDITION_OPERATION,System.String,System.String,Vanara.PInvoke.SearchApi.CONDITION_CREATION_OPTIONS,System.Guid@)">
            <summary>
            Creates a leaf condition node for a string value that represents a comparison of property value and constant value. The
            returned object supports ICondition and ICondition2.
            </summary>
            <param name="propkey"><para>Type: <c>REFPROPERTYKEY</c></para>
            <para>The name of the property of the leaf condition as a REFPROPERTYKEY. If the leaf has no particular property, use PKEY_Null.</para></param>
            <param name="cop"><para>Type: <c>CONDITION_OPERATION</c></para>
            <para>A CONDITION_OPERATION enumeration. If the leaf has no particular operation, then use COP_IMPLICIT.</para></param>
            <param name="pszValue"><para>Type: <c>LPCWSTR</c></para>
            <para>The value to be compared, or <c>NULL</c> for an unspecified property. The locale name of the leaf node is LOCALE_NAME_USER_DEFAULT.</para></param>
            <param name="pszLocaleName"><para>Type: <c>LPCWSTR</c></para>
            <para>
            The name of the locale of the lead condition, or <c>NULL</c> for a plain string. The locale name of the leaf node is LOCALE_NAME_USER_DEFAULT.
            </para></param>
            <param name="cco"><para>Type: <c>CONDITION_CREATION_OPTIONS</c></para>
            <para>The condition creation operation of the leaf condition as the CONDITION_CREATION_OPTIONS enumeration.</para></param>
            <param name="riid"><para>Type: <c>REFIID</c></para>
            <para>
            The desired IID of the enumerating interface: either IEnumUnknown, IID_IEnumVARIANT, or (for a negation condition) IID_ICondition.
            </para></param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>Receives a pointer to zero or more ICondition and ICondition2 objects.</para>
            </returns>
            <remarks>For default options, use the CONDITION_CREATION_DEFAULT flag.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory2.CreateIntegerLeaf(Vanara.PInvoke.Ole32.PROPERTYKEY@,Vanara.PInvoke.SearchApi.CONDITION_OPERATION,System.Int32,Vanara.PInvoke.SearchApi.CONDITION_CREATION_OPTIONS,System.Guid@)">
            <summary>
            Creates a leaf condition node for an integer value. The returned object supports ICondition and ICondition2.
            </summary>
            <param name="propkey"><para>Type: <c>REFPROPERTYKEY</c></para>
            <para>The name of the property of the leaf condition as a REFPROPERTYKEY. If the leaf has no particular property, use PKEY_Null.</para></param>
            <param name="cop"><para>Type: <c>CONDITION_OPERATION</c></para>
            <para>A CONDITION_OPERATION enumeration. If the leaf has no particular operation, then use COP_IMPLICIT.</para></param>
            <param name="lValue"><para>Type: <c>INT32</c></para>
            <para>The value of a leaf condition node as a 32-bit integer.</para></param>
            <param name="cco"><para>Type: <c>CONDITION_CREATION_OPTIONS</c></para>
            <para>The condition creation operation of the leaf condition as the CONDITION_CREATION_OPTIONS enumeration.</para></param>
            <param name="riid"><para>Type: <c>REFIID</c></para>
            <para>
            The desired IID of the enumerating interface: either IEnumUnknown, IID_IEnumVARIANT, or (for a negation condition) IID_ICondition.
            </para></param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>Receives a pointer to zero or more ICondition and ICondition2 objects.</para>
            </returns>
            <remarks>For default options, use the CONDITION_CREATION_DEFAULT flag.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory2.CreateBooleanLeaf(Vanara.PInvoke.Ole32.PROPERTYKEY@,Vanara.PInvoke.SearchApi.CONDITION_OPERATION,System.Boolean,Vanara.PInvoke.SearchApi.CONDITION_CREATION_OPTIONS,System.Guid@)">
            <summary>
            Creates a search condition that is either <c>TRUE</c> or <c>FALSE</c>. The returned object supports ICondition and ICondition2
            </summary>
            <param name="propkey"><para>Type: <c>REFPROPERTYKEY</c></para>
            <para>The name of the property of the leaf condition as a REFPROPERTYKEY. If the leaf has no particular property, use PKEY_Null.</para></param>
            <param name="cop"><para>Type: <c>CONDITION_OPERATION</c></para>
            <para>A CONDITION_OPERATION enumeration. If the leaf has no particular operation, then use COP_IMPLICIT.</para></param>
            <param name="fValue"><para>Type: <c>BOOL</c></para>
            <para>The value of the search condition to use. fValue should typically be set to VARIANT_FALSE.</para></param>
            <param name="cco"><para>Type: <c>CONDITION_CREATION_OPTIONS</c></para>
            <para>The condition creation operation of the leaf condition as the CONDITION_CREATION_OPTIONS enumeration.</para></param>
            <param name="riid"><para>Type: <c>REFIID</c></para>
            <para>The desired IID of the enumerating interface: either IEnumUnknown, IEnumVARIANT, or (for a negation condition) IID_ICondition.</para></param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>Receives a pointer to zero or more ICondition and ICondition2 objects.</para>
            </returns>
            <remarks>For default options, use the CONDITION_CREATION_DEFAULT flag.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory2.CreateLeaf(Vanara.PInvoke.Ole32.PROPERTYKEY@,Vanara.PInvoke.SearchApi.CONDITION_OPERATION,Vanara.PInvoke.Ole32.PROPVARIANT,System.String,System.String,Vanara.PInvoke.SearchApi.IRichChunk,Vanara.PInvoke.SearchApi.IRichChunk,Vanara.PInvoke.SearchApi.IRichChunk,Vanara.PInvoke.SearchApi.CONDITION_CREATION_OPTIONS,System.Guid@)">
            <summary>Creates a leaf condition node for any value. The returned object supports ICondition and ICondition2.</summary>
            <param name="propkey"><para>Type: <c>REFPROPERTYKEY</c></para>
            <para>The name of the property of the leaf condition as a REFPROPERTYKEY. If the leaf has no particular property, use PKEY_Null.</para></param>
            <param name="cop"><para>Type: <c>CONDITION_OPERATION</c></para>
            <para>A CONDITION_OPERATION enumeration. If the leaf has no particular operation, then use COP_IMPLICIT.</para></param>
            <param name="propvar"><para>Type: <c>REFPROPERTYKEY</c></para>
            <para>The property value of the leaf condition as a REFPROPERTYKEY.</para></param>
            <param name="pszSemanticType"><para>Type: <c>LPCWSTR</c></para>
            <para>
            The name of a semantic type of the value, or <c>NULL</c> for a plain string. If the newly created leaf is an unresolved named
            entity, pszSemanticType should be the name of a semantic type, otherwise <c>NULL</c>.
            </para></param>
            <param name="pszLocaleName"><para>Type: <c>LPCWSTR</c></para>
            <para>
            The name of the locale to be compared, or <c>NULL</c> for an unspecified locale. If propvar does not contain a string value,
            then pszLocaleName should be LOCALE_NAME_USER_DEFAULT; otherwise, pszLocaleName should reflect the language the string.
            Alternatively, pszLocaleName could be LOCALE_NAME_INVARIANT.
            </para></param>
            <param name="pPropertyNameTerm"><para>Type: <c>IRichChunk*</c></para>
            <para>A pointer to an IRichChunk that identifies the range of the input string that repesents the property. It can be <c>NULL</c>.</para></param>
            <param name="pOperationTerm"><para>Type: <c>IRichChunk*</c></para>
            <para>A pointer to an IRichChunk that identifies the range of the input string that repesents the operation. It can be <c>NULL</c>.</para></param>
            <param name="pValueTerm"><para>Type: <c>IRichChunk*</c></para>
            <para>A pointer to an IRichChunk that identifies the range of the input string that repesents the value. It can be <c>NULL</c>.</para></param>
            <param name="cco"><para>Type: <c>CONDITION_CREATION_OPTIONS</c></para>
            <para>The condition creation operation of the leaf condition as the CONDITION_CREATION_OPTIONS enumeration.</para></param>
            <param name="riid"><para>Type: <c>REFIID</c></para>
            <para>The desired IID of the enumerating interface: either IEnumUnknown, IEnumVARIANT, or (for a negation condition) IID_ICondition.</para></param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>Receives a pointer to zero or more ICondition and ICondition2 objects.</para>
            </returns>
            <remarks>
            <para>For default options, use the CONDITION_CREATION_DEFAULT flag.</para>
            <para>
            If the leaf condition was obtained by parsing a string, one or more of the parameters pPropertyNameTerm, pOperationTerm and
            pValueTerm may be represented by an IRichChunk interface (obtained through the ICondition::GetInputTerms method). Otherwise
            all three parameters can be <c>NULL</c>.
            </para>
            <para>For more information about leaf node terms (property, value, and operation), see ICondition::GetInputTerms.</para>
            <para>
            A virtual property has one or more metadata items in which the key is "MapsToRelation" and the value is a property name
            (which is one expansion of the property). For more information about metadata, see MetaData.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IConditionFactory2.ResolveCondition(Vanara.PInvoke.SearchApi.ICondition,Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION,Vanara.PInvoke.SYSTEMTIME@,System.Guid@)">
            <summary>
            Performs a variety of transformations on a condition tree, and thereby the resolved condition for evaluation. The returned
            object supports ICondition and ICondition2.
            </summary>
            <param name="pc"><para>Type: <c>ICondition*</c></para>
            <para>Pointer to an ICondition object to be resolved.</para></param>
            <param name="sqro"><para>Type: <c>STRUCTURED_QUERY_RESOLVE_OPTION</c></para>
            <para>
            Specifies zero or more of the STRUCTURED_QUERY_RESOLVE_OPTION flags. The SQRO_NULL_VALUE_TYPE_FOR_PLAIN_VALUES flag is
            automatically added to sqro.
            </para></param>
            <param name="pstReferenceTime"><para>Type: <c>SYSTEMTIME const*</c></para>
            <para>
            Pointer to a <c>SYSTEMTIME</c> value to use as the reference date and time. A null pointer can be passed if sqro is set to
            the SQRO_DONT_RESOLVE_DATETIME flag.
            </para></param>
            <param name="riid"><para>Type: <c>REFIID</c></para>
            <para>The desired IID of the enumerating interface: either IEnumUnknown, IEnumVARIANT, or (for a negation condition) IID_ICondition.</para></param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>Receives a pointer to zero or more ICondition and ICondition2 objects.</para>
            </returns>
            <remarks>
            <para>
            The StructuredQuerySample code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to read lines from
            the console, parse them using the system schema, and display the resulting condition trees.
            </para>
            <para>Refer to the Resolve method for additional detail.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IEntity">
            <summary>Provides methods for retrieving information about an entity type in the schema.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IEntity.Name">
            <summary>Retrieves the name of this entity.</summary>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            Receives a pointer to the name of this entity as a Unicode string. The calling application must free the returned string by
            calling CoTaskMemFree.
            </para>
            </returns>
            <remarks>Each name must be unique.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IEntity.Base(Vanara.PInvoke.SearchApi.IEntity@)">
            <summary>Retrieves the parent entity of this entity.</summary>
            <param name="pBaseEntity">
            <para>Type: <c>IEntity**</c></para>
            <para>Receives a pointer to the parent IEntity object, or <c>NULL</c> if there is no parent entity.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns one of the following, or an error value otherwise.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>pBaseEntity successfully set.</term>
            </item>
            <item>
            <term>S_FALSE</term>
            <term>The entity has no parent; pBaseEntity successfully set to NULL.</term>
            </item>
            </list>
            </returns>
            <remarks>
            Each entity derives from some other entity, except the entity named Entity, for which this method returns S_FALSE. The
            derived entity inherits all relationships from the base entity.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IEntity.Relationships(System.Guid@)">
            <summary>Retrieves an enumeration of IRelationship objects, one for each relationship this entity has.</summary>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>The desired IID of the result, either IID_IEnumUnknown or IID_IEnumVARIANT.</para>
            </param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>Receives the address of a pointer to the enumeration of the IRelationship objects.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IEntity.GetRelationship(System.String)">
            <summary>Retrieves the IRelationship object for this entity as requested by name.</summary>
            <param name="pszRelationName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of the relationship to find.</para>
            </param>
            <returns>
            <para>Type: <c>IRelationship**</c></para>
            <para>
            Receives the address of a pointer to the requested IRelationship object, or <c>NULL</c> if this entity has no relationship
            with the name specified.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IEntity.MetaData(System.Guid@)">
            <summary>
            <para>Retrieves an enumeration of IMetaData objects for this entity.</para>
            </summary>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>The desired IID of the result, either IID_IEnumUnknown or IID_IEnumVARIANT.</para>
            </param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>Receives the address of a pointer to an enumeration of IMetaData objects.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IEntity.NamedEntities(System.Guid@)">
            <summary>Retrieves an enumeration of INamedEntity objects, one for each known named entity of this type.</summary>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>The desired IID of the result, either IID_IEnumUnknown or IID_IEnumVARIANT.</para>
            </param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>
            Receives the address of a pointer to an enumeration of INamedEntity objects, one for each known named entity of this type.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IEntity.GetNamedEntity(System.String)">
            <summary>Retrieves an INamedEntity object based on an entity name.</summary>
            <param name="pszValue">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of an entity to be found.</para>
            </param>
            <returns>
            <para>Type: <c>INamedEntity**</c></para>
            <para>Receives a pointer to the INamedEntity object that was named in pszValue. <c>NULL</c> if no named entity was found.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IEntity.DefaultPhrase">
            <summary>Retrieves a default phrase to use for this entity in restatements.</summary>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            Receives a pointer to the default phrase as a Unicode string. The calling application must free the returned string by
            calling CoTaskMemFree.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.INamedEntity">
            <summary>Provides methods to get the value of, or a default phrase for the value of, a named entity.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.INamedEntity.GetValue">
            <summary>Retrieves the value of this named entity as a string.</summary>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            Receives a pointer to the value of the named entity as a Unicode string. The calling application must free the returned
            string by calling CoTaskMemFree.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.INamedEntity.DefaultPhrase">
            <summary>Retrieves a default phrase to use for this named entity in restatements.</summary>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            Receives a pointer to the default phrase as a Unicode string. The calling application must free the returned string by
            calling CoTaskMemFree.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IQueryParser">
            <summary>Provides methods to parse an input string into an IQuerySolution object.</summary>
            <remarks>
            The StructuredQuerySample code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to read lines from the
            console, parse them using the system schema, and display the resulting condition trees.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQueryParser.Parse(System.String,Vanara.PInvoke.Ole32.IEnumUnknown)">
            <summary>
            Parses an input string that contains Structured Query keywords and/or contents to produce an IQuerySolution object.
            </summary>
            <param name="pszInputString">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to the Unicode input string to be parsed.</para>
            </param>
            <param name="pCustomProperties">
            <para>Type: <c>IEnumUnknown*</c></para>
            <para>
            An enumeration of IRichChunk objects, one for each custom property the application has recognized. This parameter can be
            <c>NULL</c>, which is equivalent to an empty enumeration.
            </para>
            </param>
            <returns>
            <para>Type: <c>IQuerySolution**</c></para>
            <para>Receives an IQuerySolution object. The caller must release it by calling its IUnknown::Release method.</para>
            </returns>
            <remarks>
            <para>
            For each IRichChunk object, the position information identifies the character span of the custom property, the string value
            is the name of an actual property, and the PROPVARIANT is unused. Although any property could be used, these generic
            properties are included specifically for this purpose:
            </para>
            <list type="bullet">
            <item>
            <term>System.StructuredQuery.CustomProperty.Boolean</term>
            </item>
            <item>
            <term>System.StructuredQuery.CustomProperty.DateTime</term>
            </item>
            <item>
            <term>System.StructuredQuery.CustomProperty.Integer</term>
            </item>
            <item>
            <term>System.StructuredQuery.CustomProperty.FloatingPoint</term>
            </item>
            <item>
            <term>System.StructuredQuery.CustomProperty.String</term>
            </item>
            </list>
            <para>
            An application can use them in the enumeration passed in the pCustomProperties parameter and look for them in the resulting
            condition tree.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQueryParser.SetOption(Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_SINGLE_OPTION,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>Sets a single option, such as a specified word-breaker, for parsing an input string.</summary>
            <param name="option">
            <para>Type: <c>STRUCTURED_QUERY_SINGLE_OPTION</c></para>
            <para>Identifies the type of option to be set.</para>
            </param>
            <param name="pOptionValue">
            <para>Type: <c>PROPVARIANT*</c></para>
            <para>
            Pointer to a PROPVARIANT specifying the value to set for the option parameter. This value is interpreted differently
            depending on the value of the option parameter.
            </para>
            </param>
            <remarks>For more information, see STRUCTURED_QUERY_SINGLE_OPTION.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQueryParser.GetOption(Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_SINGLE_OPTION,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>Retrieves a specified simple option value for this query parser.</summary>
            <param name="option">
            <para>Type: <c>STRUCTURED_QUERY_SINGLE_OPTION</c></para>
            <para>The STRUCTURED_QUERY_SINGLE_OPTION enumerated type that specifies the option to be retrieved.</para>
            </param>
            <param name="pOptionValue">
            <para>Type: <c>PROPVARIANT*</c></para>
            <para>Receives a pointer to the specified option value. For more information, see STRUCTURED_QUERY_SINGLE_OPTION.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQueryParser.SetMultiOption(Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_MULTIOPTION,System.String,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>Sets a complex option, such as a specified condition generator, to use when parsing an input string.</summary>
            <param name="option">
            <para>Type: <c>STRUCTURED_QUERY_MULTIOPTION</c></para>
            <para>The complex option to be set.</para>
            </param>
            <param name="pszOptionKey">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A Unicode string that is interpreted differently for each value of the option parameter. For more information, see STRUCTURED_QUERY_MULTIOPTION.
            </para>
            </param>
            <param name="pOptionValue">
            <para>Type: <c>PROPVARIANT*</c></para>
            <para>
            Pointer to a PROPVARIANT that is interpreted differently for each value of the option parameter. For more information, see STRUCTURED_QUERY_MULTIOPTION.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQueryParser.GetSchemaProvider">
            <summary>Retrieves a schema provider for browsing the currently loaded schema.</summary>
            <returns>
            <para>Type: <c>ISchemaProvider**</c></para>
            <para>
            Receives the address of a pointer to an ISchemaProvider object. The calling application must release it by invoking its
            IUnknown::Release method.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQueryParser.RestateToString(Vanara.PInvoke.SearchApi.ICondition,System.Boolean)">
            <summary>
            Restates a condition as a structured query string. If the condition was the result of parsing an original query string, the
            keywords of that query string are used to a great extent. If not, default keywords are used.
            </summary>
            <param name="pCondition">
            <para>Type: <c>ICondition*</c></para>
            <para>The condition to be restated.</para>
            </param>
            <param name="fUseEnglish">
            <para>Type: <c>BOOL</c></para>
            <para>Reserved. Must be <c>FALSE</c>.</para>
            </param>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>Receives the restated query string. The caller must free the string by calling CoTaskMemFree.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQueryParser.ParsePropertyValue(System.String,System.String)">
            <summary>Parses a condition for a specified property.</summary>
            <param name="pszPropertyName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>Property name.</para>
            </param>
            <param name="pszInputString">
            <para>Type: <c>LPCWSTR</c></para>
            <para>Query string to be parsed, relative to that property.</para>
            </param>
            <returns>
            <para>Type: <c>IQuerySolution**</c></para>
            <para>Receives an IQuerySolution object. The calling application must release it by calling its IUnknown::Release method.</para>
            </returns>
            <remarks>
            The input string can be anything that could have been written immediately after a property in a structured query. For
            example, "from:(bill OR alex)" would be a valid structured query, so passing System.StructuredQuery.Virtual.From (for which
            From is a keyword) in the pszPropertyName parameter and "(bill OR alex)" or "bill OR alex" in the pszInputString parameter
            would be valid. This would result in an <c>OR</c> of leaf nodes that relate the System.StructuredQuery.Virtual.From property
            with the strings "bill" and "alex".
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQueryParser.RestatePropertyValueToString(Vanara.PInvoke.SearchApi.ICondition,System.Boolean,System.String@,System.String@)">
            <summary>Restates a specified property for a condition as a query string.</summary>
            <param name="pCondition">
            <para>Type: <c>ICondition*</c></para>
            <para>A condition to be restated as a query string.</para>
            </param>
            <param name="fUseEnglish">
            <para>Type: <c>BOOL</c></para>
            <para>Reserved. Must be <c>FALSE</c>.</para>
            </param>
            <param name="ppszPropertyName">
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            Receives a pointer to the property name as a Unicode string. The calling application must free the string by calling CoTaskMemFree.
            </para>
            </param>
            <param name="ppszQueryString">
            <para>Type: <c>LPWSTR*</c></para>
            <para>Receives a pointer to a query string for that property. The calling application must free the string by calling CoTaskMemFree.</para>
            </param>
            <remarks>
            If the leaf nodes of the condition contain more than one property name, or no property name at all, E_INVALIDARG is returned.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IQueryParserManager">
            <summary>Provides methods to create, initialize, and change options for an IQueryParser object.</summary>
            <remarks>
            The StructuredQuerySample code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to read lines from the
            console, parse them using the system schema, and display the resulting condition trees.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQueryParserManager.CreateLoadedParser(System.String,System.UInt32,System.Guid@)">
            <summary>
            Creates a new instance of a IQueryParser interface implementation. This instance of the query parser is loaded with the
            schema for the specified catalog and is localized to a specified language. All other settings are initialized to default settings.
            </summary>
            <param name="pszCatalog">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of the catalog to use. Permitted values are and an empty string (for a trivial schema with no properties).</para>
            </param>
            <param name="langidForKeywords">
            <para>Type: <c>LANGID</c></para>
            <para>The LANGID used to select the localized language for keywords.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>The IID of the IQueryParser interface implementation.</para>
            </param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>
            Receives a pointer to the newly created parser. The calling application must release it by calling its IUnknown::Release method.
            </para>
            </returns>
            <remarks>
            If %LOCALAPPDATA% is not available, then this method fails. You should call IQueryParserManager::SetOption to point to a
            different folder like %ProgramData%.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQueryParserManager.InitializeOptions(System.Boolean,System.Boolean,Vanara.PInvoke.SearchApi.IQueryParser)">
            <summary>
            Sets the flags for Natural Query Syntax (NQS) and automatic wildcard characters for the specified query parser. If the query
            parser was created for the catalog, this method also sets up standard condition generators to be used later by the query
            parser object for recognizing named entities.
            </summary>
            <param name="fUnderstandNQS">
            <para>Type: <c>BOOL</c></para>
            <para><c>BOOL</c> flag that controls whether NQS is supported by this instance of the query parser.</para>
            </param>
            <param name="fAutoWildCard">
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>BOOL</c> flag that controls whether a wildcard character (*) is to be assumed after each word in the query (unless
            followed by punctuation other than a parenthesis).
            </para>
            </param>
            <param name="pQueryParser">
            <para>Type: <c>IQueryParser*</c></para>
            <para>Pointer to the query parser object.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQueryParserManager.SetOption(Vanara.PInvoke.SearchApi.QUERY_PARSER_MANAGER_OPTION,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>
            Changes a single option in this IQueryParserManager object. For example, this method could change the name of the schema
            binary to load or the location of localized schema binaries.
            </summary>
            <param name="option">
            <para>Type: <c>QUERY_PARSER_MANAGER_OPTION</c></para>
            <para>The QUERY_PARSER_MANAGER_OPTION to be changed.</para>
            </param>
            <param name="pOptionValue">
            <para>Type: <c>PROPVARIANT const*</c></para>
            <para>A pointer to the value to use for the option selected.</para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IQuerySolution">
            <summary>
            <para>Provides methods that retrieve information about the interpretation of a parsed query.</para>
            </summary>
            <remarks>
            <para>
            The StructuredQuerySample code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to read lines from the
            console, parse them using the system schema, and display the resulting condition trees.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQuerySolution.MakeNot(Vanara.PInvoke.SearchApi.ICondition,System.Boolean)">
            <summary>Creates a condition node that is a logical negation (NOT) of another condition (a subnode of this node).</summary>
            <param name="pcSub">
            <para>Type: <c>ICondition*</c></para>
            <para>Pointer to the ICondition subnode to be negated.</para>
            </param>
            <param name="fSimplify">
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>TRUE</c> to logically simplify the result if possible; <c>FALSE</c> otherwise. In a query builder scenario, fSimplify
            should typically be set to VARIANT_FALSE.
            </para>
            </param>
            <returns>
            <para>Type: <c>ICondition**</c></para>
            <para>Receives a pointer to the new ICondition node.</para>
            </returns>
            <remarks>
            <para>
            Logically simplifying a condition node usually results in a smaller, more easily traversed and processed condition tree. For
            example, if pcSub is itself a negation condition with a subcondition C, then the double negation is logically resolved, and
            ppcResult is set to C. Without simplification, the resulting tree would look like NOT — NOT — C.
            </para>
            <para>
            Applications that need to execute queries based on the condition tree would typically benefit from setting this parameter to <c>TRUE</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQuerySolution.MakeAndOr(Vanara.PInvoke.SearchApi.CONDITION_TYPE,Vanara.PInvoke.Ole32.IEnumUnknown,System.Boolean)">
            <summary>Creates a condition node that is a logical conjunction (AND) or disjunction (OR) of a collection of subconditions.</summary>
            <param name="ct">
            <para>Type: <c>CONDITION_TYPE</c></para>
            <para>The CONDITION_TYPE of the condition node. The <c>CONDITION_TYPE</c> must be either <c>CT_AND_CONDITION</c> or <c>CT_OR_CONDITION</c>.</para>
            </param>
            <param name="peuSubs">
            <para>Type: <c>IEnumUnknown*</c></para>
            <para>A pointer to an enumeration of ICondition objects, or <c>NULL</c> for an empty enumeration.</para>
            </param>
            <param name="fSimplify">
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>TRUE</c> to logically simplify the result, if possible; then the result will not necessarily to be of the specified kind.
            <c>FALSE</c> if the result should have exactly the prescribed structure.
            </para>
            <para>
            An application that plans to execute a query based on the condition tree would typically benefit from setting this parameter
            to <c>TRUE</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>ICondition**</c></para>
            <para>Receives the address of a pointer to the new ICondition node.</para>
            </returns>
            <remarks>
            There are no special condition trees for <c>TRUE</c> and <c>FALSE</c>. However, a condition tree consisting of an AND node
            with no subconditions is always <c>TRUE</c>, and a condition tree consisting of an OR node with no subconditions is always <c>FALSE</c>.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQuerySolution.MakeLeaf(System.String,Vanara.PInvoke.SearchApi.CONDITION_OPERATION,System.String,Vanara.PInvoke.Ole32.PROPVARIANT,Vanara.PInvoke.SearchApi.IRichChunk,Vanara.PInvoke.SearchApi.IRichChunk,Vanara.PInvoke.SearchApi.IRichChunk,System.Boolean)">
            <summary>Creates a leaf condition node that represents a comparison of property value and constant value.</summary>
            <param name="pszPropertyName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            The name of a property to be compared, or <c>NULL</c> for an unspecified property. The locale name of the leaf node is LOCALE_NAME_USER_DEFAULT.
            </para>
            </param>
            <param name="cop">
            <para>Type: <c>CONDITION_OPERATION</c></para>
            <para>A CONDITION_OPERATION enumeration.</para>
            </param>
            <param name="pszValueType">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of a semantic type of the value, or <c>NULL</c> for a plain string.</para>
            </param>
            <param name="ppropvar">
            <para>Type: <c>PROPVARIANT const*</c></para>
            <para>The constant value against which the property value should be compared.</para>
            </param>
            <param name="richChunk1">The rich chunk1.</param>
            <param name="richChunk2">The rich chunk2.</param>
            <param name="richChunk3">The rich chunk3.</param>
            <param name="fExpand">
            <para>Type: <c>BOOL</c></para>
            <para>
            If <c>TRUE</c> and pszPropertyName identifies a virtual property, the resulting node is not a leaf node; instead, it is a
            disjunction of leaf condition nodes, each of which corresponds to one expansion of the virtual property.
            </para>
            </param>
            <returns>
            <para>Type: <c>ICondition**</c></para>
            <para>Receives a pointer to the new ICondition leaf node.</para>
            </returns>
            <remarks>
            <para>For more information about leaf node terms (property, value, and operation), see ICondition::GetInputTerms.</para>
            <para>
            A virtual property has one or more metadata items in which the key is "MapsToRelation" and the value is a property name
            (which is one expansion of the property). For more information about metadata, see MetaData.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQuerySolution.Resolve(Vanara.PInvoke.SearchApi.ICondition,Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION,Vanara.PInvoke.SYSTEMTIME@)">
            <summary>
            Performs a variety of transformations on a condition tree, including the following: resolves conditions with relative
            date/time expressions to conditions with absolute date/time (as a VT_FILETIME); turns other recognized named entities into
            condition trees with actual values; simplifies condition trees; replaces virtual or compound properties with OR trees of
            other properties; removes condition trees resulting from queries with property keywords that had no condition applied.
            </summary>
            <param name="pc">
            <para>Type: <c>ICondition*</c></para>
            <para>A pointer to an ICondition object to be resolved.</para>
            </param>
            <param name="sqro">
            <para>Type: <c>STRUCTURED_QUERY_RESOLVE_OPTION</c></para>
            <para>
            Specifies zero or more of the STRUCTURED_QUERY_RESOLVE_OPTION flags. For <c>Windows 7 and later</c>, the
            SQRO_ADD_VALUE_TYPE_FOR_PLAIN_VALUES flag is automatically added to <paramref name="sqro"/>.
            </para>
            </param>
            <param name="pstReferenceTime">
            <para>Type: <c>SYSTEMTIME const*</c></para>
            <para>
            A pointer to a <c>SYSTEMTIME</c> value to use as the reference date and time. A null pointer can be passed if <paramref
            name="sqro"/> is set to SQRO_DONT_RESOLVE_DATETIME.
            </para>
            </param>
            <returns>
            <para>Type: <c>ICondition**</c></para>
            <para>
            Receives a pointer to the new ICondition in which all time fields have been resolved to have values of type VT_FILETIME. This
            new condition tree is the resolved version of <paramref name="pc"/>.
            </para>
            </returns>
            <remarks>
            <para>
            In a condition tree produced by the Parse method and returned by GetQuery, the leaves pair up properties with restrictions on
            these properties, and result in a condition tree that is partially finished. The <c>IConditionFactory::Resolve</c> method
            finishes such a condition tree by a process known as resolution. The input condition tree is not modified in any way. The
            output condition tree may share parts of the input condition that contained no leaf nodes with unresolved date/time values.
            </para>
            <para><c>Note</c> Resolving a leaf node often produces a non-leaf node.</para>
            <para>
            For example, Structured Query supports relative date/time expressions, which remain unresolved until they are applied to some
            reference time. In a leaf node with semantic type <c>System.StructuredQueryType.DateTime</c>, the value can be either a
            VT_FILETIME or a VT_LPWSTR. VT_FILETIME is an absolute date/time so it is already resolved. VT_LPWSTR is a string
            representation of a relative date/time expression. The specified reference time should be a local time, but the resolved
            times in the resulting query expression will be in Coordinated Universal Time (UTC).
            </para>
            <para>
            The StructuredQuerySample code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to read lines from
            the console, parse them using the system schema, and display the resulting condition trees.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQuerySolution.GetQuery(Vanara.PInvoke.SearchApi.ICondition@,Vanara.PInvoke.SearchApi.IEntity@)">
            <summary>Retrieves the condition tree and the semantic type of the solution.</summary>
            <param name="ppQueryNode">
            <para>Type: <c>ICondition**</c></para>
            <para>
            Receives a pointer to an ICondition condition tree that is the interpretation of the query string. This parameter can be <c>NULL</c>.
            </para>
            </param>
            <param name="ppMainType">
            <para>Type: <c>IEntity**</c></para>
            <para>
            Receives a pointer to an IEntity object that identifies the semantic type of the interpretation. This parameter can be <c>NULL</c>.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQuerySolution.GetErrors(System.Guid@)">
            <summary>
            Identifies parts of the input string that the parser did not recognize or did not use when constructing the IQuerySolution
            condition tree.
            </summary>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>The desired IID of the result, either IID_IEnumUnknown or IID_IEnumVARIANT.</para>
            </param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>Receives a pointer to an enumeration of zero or more IRichChunk objects, each describing one parsing error.</para>
            </returns>
            <remarks>
            <para>
            Each parsing error is represented by an IRichChunk object in which the position information reflects token counts. The
            <c>IRichChunk</c> object <c>ppsz</c> string is <c>NULL</c>, and the pValue is a PROPVARIANT that contains a <c>lVal</c>
            identifying the STRUCTURED_QUERY_PARSE_ERROR enumeration.
            </para>
            <para>The valid values for <paramref name="riid"/> are __uuidof(IEnumUnknown) and __uuidof(IEnumVARIANT).</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IQuerySolution.GetLexicalData(System.String@,Vanara.PInvoke.SearchApi.ITokenCollection@,System.UInt32@,System.Object@)">
            <summary>
            Reports the query string, how it was tokenized, and what language code identifier (LCID) and word breaker were used to parse it.
            </summary>
            <param name="ppszInputString">
            <para>Type: <c>LPWSTR*</c></para>
            <para>Receives the query string. This parameter can be <c>NULL</c>.</para>
            </param>
            <param name="ppTokens">
            <para>Type: <c>ITokenCollection**</c></para>
            <para>
            Receives a pointer to an ITokenCollection object that describes how the query was tokenized. This parameter can be <c>NULL</c>.
            </para>
            </param>
            <param name="plcid">
            <para>Type: <c>LCID*</c></para>
            <para>Receives a LCID for the word breaker used for this query. This parameter can be <c>NULL</c>.</para>
            </param>
            <param name="ppWordBreaker">
            <para>Type: <c>IUnknown**</c></para>
            <para>Receives a pointer to the word breaker used for this query. This parameter can be <c>NULL</c>.</para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IRelationship">
            <summary>Provides methods for retrieving information about a schema property.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IRelationship.Name">
            <summary>Retrieves the name of the relationship.</summary>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            Receives a pointer to the name of the relationship as a Unicode string. The calling application must free the returned string
            by calling CoTaskMemFree.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IRelationship.IsReal">
            <summary>Reports whether a relationship is real.</summary>
            <returns>
            <para>Type: <c>BOOL*</c></para>
            <para>Receives <c>TRUE</c> for a real relationship; otherwise, <c>FALSE</c>.</para>
            </returns>
            <remarks>
            A relationship is not considered real if its source entity derives from an entity that has a relationship of the same name.
            The purpose of such a "shadow" relationship is to store metadata specific to the inherited relationship.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IRelationship.Destination">
            <summary>
            Retrieves the destination IEntity object of the relationship. The destination of a relationship corresponds to the type of a property.
            </summary>
            <returns>
            <para>Type: <c>IEntity**</c></para>
            <para>
            Receives the address of a pointer to an IEntity object, or <c>NULL</c> if the relationship is not real. For more information,
            see IRelationship::IsReal.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IRelationship.MetaData(System.Guid@)">
            <summary>Retrieves an enumeration of IMetaData objects for this relationship.</summary>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>The desired IID of the result, either IID_IEnumUnknown or IID_IEnumVARIANT.</para>
            </param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>
            Receives a pointer to the enumeration of IMetaData objects. There may be multiple pairs with the same key (or the same value).
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IRelationship.DefaultPhrase">
            <summary>Retrieves the default phrase to use for this relationship in restatements.</summary>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>Receives the default phrase as a Unicode string. The calling application must free the string by calling CoTaskMemFree.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISchemaLocalizerSupport">
            <summary>Provides a method for localizing keywords in a specified string.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISchemaLocalizerSupport.Localize(System.String,System.String@)">
            <summary>Localizes keywords from an input string.</summary>
            <param name="pszGlobalString">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            Pointer to a null-terminated Unicode string to be localized. It may be in one of two forms: (1) a set of keywords separated
            by the vertical bar character (Unicode character code 007C) (for example "date modified|modified|modification date"), or (2)
            a string of the form "@some.dll,-12345". This example refers to resource ID 12345 of the some.dll binary. That resource must
            be a string of the previous (1) form.
            </para>
            </param>
            <param name="ppszLocalString">
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            Returns a null-terminated Unicode string that is the localized string. The calling application must free the returned string
            by calling CoTaskMemFree. If the method does not succeed, this parameter is set to <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or S_FALSE otherwise.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ISchemaProvider">
            <summary>Provides a schema repository that can be browsed.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISchemaProvider.Entities(System.Guid@)">
            <summary>Retrieves an enumeration of IEntity objects with one entry for each entity in the loaded schema.</summary>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>The desired IID of the result, either IID_IEnumUnknown or IID_IEnumVARIANT.</para>
            </param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>
            Receives a pointer to an enumeration of entities. The calling application must release it by calling its IUnknown::Release method.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISchemaProvider.RootEntity">
            <summary>Retrieves the root entity of the loaded schema.</summary>
            <returns>
            <para>Type: <c>IEntity**</c></para>
            <para>Receives a pointer to the root entity. The calling application must release it by invoking its IUnknown::Release method.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISchemaProvider.GetEntity(System.String)">
            <summary>Retrieves an entity by name from the loaded schema.</summary>
            <param name="pszEntityName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of the entity being requested.</para>
            </param>
            <returns>
            <para>Type: <c>IEntity**</c></para>
            <para>
            Receives the address of a pointer to the requested entity. The calling application must release the entity by calling its
            IUnknown::Release method. If there is no entity with the specified name, this parameter is set to <c>NULL</c>.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISchemaProvider.MetaData(System.Guid@)">
            <summary>Retrieves an enumeration of global IMetaData objects for the loaded schema.</summary>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>The desired IID of the result, either IID_IEnumUnknown or IID_IEnumVARIANT.</para>
            </param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>
            Receives a pointer to an enumeration of the IMetaData objects. The calling application must release it by calling its
            IUnknown::Release method.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISchemaProvider.Localize(System.UInt32,Vanara.PInvoke.SearchApi.ISchemaLocalizerSupport)">
            <summary>Localizes the currently loaded schema for a specified locale.</summary>
            <param name="lcid">
            <para>Type: <c>LCID</c></para>
            <para>The locale to localize for.</para>
            </param>
            <param name="pSchemaLocalizerSupport">The p schema localizer support.</param>
            <remarks>
            <para>
            Before this method is called, the loaded schema should typically be a schema that is not localized, such as the one in
            %SYSTEMROOT%\System32\StructuredQuerySchema.bin. This method makes the loaded schema suitable for parsing queries in the
            specified locale, using the object specified in the pSchemaLocalizerSupport parameter. The localized schema can then be saved
            into a schema binary by calling the ISchemaProvider::SaveBinary method.
            </para>
            <para>
            Most applications should use CreateLoadedParser to obtain a query parser loaded with a localized schema, instead of using
            this method explicitly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISchemaProvider.SaveBinary(System.String)">
            <summary>Saves the loaded schema as a schema binary at a specified path.</summary>
            <param name="pszSchemaBinaryPath">
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to a null-terminated Unicode string that contains the fully qualified path at which to save the schema binary.</para>
            </param>
            <remarks>Any existing file at the location specified by pszSchemaBinaryPath is overwritten.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ISchemaProvider.LookupAuthoredNamedEntity(Vanara.PInvoke.SearchApi.IEntity,System.String,Vanara.PInvoke.SearchApi.ITokenCollection,System.UInt32,System.UInt32@,System.String@)">
            <summary>
            Finds named entities of a specified type in a tokenized string, and returns the value of the entity and the number of tokens
            the entity value occupies.
            </summary>
            <param name="pEntity">
            <para>Type: <c>IEntity*</c></para>
            <para>A pointer to an IEntity object identifying the type of named entity to locate.</para>
            </param>
            <param name="pszInputString">
            <para>Type: <c>LPCWSTR</c></para>
            <para>An input string in which to search for named entity keywords.</para>
            </param>
            <param name="pTokenCollection">
            <para>Type: <c>ITokenCollection*</c></para>
            <para>A pointer to the tokenization of the string in the pszInputString parameter.</para>
            </param>
            <param name="cTokensBegin">
            <para>Type: <c>ULONG</c></para>
            <para>The zero-based position of a token in the pTokenCollection from which to start searching.</para>
            </param>
            <param name="pcTokensLength">
            <para>Type: <c>ULONG*</c></para>
            <para>Receives a pointer to the number of tokens covered by the named entity keyword that was found.</para>
            </param>
            <param name="ppszValue">
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            Receives a pointer to the value of the named entity that was found, as a Unicode string. The caller must free the string by
            calling CoTaskMemFree. An INamedEntity object can be obtained by calling the GetNamedEntity method of pEntity and passing the
            string that was received in this parameter.
            </para>
            </param>
            <remarks>
            The method finds only named entities authored with keywords in the schema, not named entities recognized by an
            IConditionGenerator object.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ITokenCollection">
            <summary>Gets the tokens that result from using a word breaker.</summary>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ITokenCollection.NumberOfTokens">
            <summary>Retrieves the number of tokens in the collection.</summary>
            <returns>
            <para>Type: <c>ULONG*</c></para>
            <para>Receives the number of tokens within the collection.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ITokenCollection.GetToken(System.UInt32,System.UInt32@,System.UInt32@,System.String@)">
            <summary>Retrieves the position, length, and any overriding string of an individual token.</summary>
            <param name="i">
            <para>Type: <c>ULONG</c></para>
            <para>The zero-based index of the desired token within the collection.</para>
            </param>
            <param name="pBegin">
            <para>Type: <c>ULONG*</c></para>
            <para>Receives the zero-based starting position of the specified token, in characters. This parameter can be <c>NULL</c>.</para>
            </param>
            <param name="pLength">
            <para>Type: <c>ULONG*</c></para>
            <para>Receives the number of characters spanned by the token. This parameter can be <c>NULL</c>.</para>
            </param>
            <param name="ppsz">
            <para>Type: <c>LPWSTR*</c></para>
            <para>Receives the overriding text for this token if available, or <c>NULL</c> if there is none.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.CreateLoadedParser``1(Vanara.PInvoke.SearchApi.IQueryParserManager,System.String,System.UInt32)">
            <summary>
            Creates a new instance of a IQueryParser interface implementation. This instance of the query parser is loaded with the schema
            for the specified catalog and is localized to a specified language. All other settings are initialized to default settings.
            </summary>
            <typeparam name="T">The type of the IQueryParser interface implementation.</typeparam>
            <param name="qpmgr">The <see cref="T:Vanara.PInvoke.SearchApi.IQueryParserManager"/> instance.</param>
            <param name="pszCatalog">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of the catalog to use. Permitted values are and an empty string (for a trivial schema with no properties).</para>
            </param>
            <param name="langidForKeywords">
            <para>Type: <c>LANGID</c></para>
            <para>The LANGID used to select the localized language for keywords.</para>
            </param>
            <returns>
            Receives a pointer to the newly created parser. The calling application must release it by calling its IUnknown::Release method.
            </returns>
            <remarks>
            If %LOCALAPPDATA% is not available, then this method fails. You should call IQueryParserManager::SetOption to point to a
            different folder like %ProgramData%.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.Entities``1(Vanara.PInvoke.SearchApi.ISchemaProvider)">
            <summary>Retrieves an enumeration of IEntity objects with one entry for each entity in the loaded schema.</summary>
            <typeparam name="T">The desired type of the result, either IID_IEnumUnknown or IID_IEnumVARIANT.</typeparam>
            <param name="sp">The <see cref="T:Vanara.PInvoke.SearchApi.ISchemaProvider"/> instance.</param>
            <returns>
            Receives a pointer to an enumeration of entities. The calling application must release it by calling its IUnknown::Release method.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.GetErrors(Vanara.PInvoke.SearchApi.IQuerySolution)">
            <summary>
            Identifies parts of the input string that the parser did not recognize or did not use when constructing the IQuerySolution
            condition tree.
            </summary>
            <param name="qs">The <see cref="T:Vanara.PInvoke.SearchApi.IQuerySolution"/> instance.</param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>Receives a pointer to an enumeration of zero or more IRichChunk objects, each describing one parsing error.</para>
            </returns>
            <remarks>
            <para>
            Each parsing error is represented by an IRichChunk object in which the position information reflects token counts. The
            <c>IRichChunk</c> object <c>ppsz</c> string is <c>NULL</c>, and the pValue is a PROPVARIANT that contains a <c>lVal</c>
            identifying the STRUCTURED_QUERY_PARSE_ERROR enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.MetaData``1(Vanara.PInvoke.SearchApi.IEntity)">
            <summary>Retrieves an enumeration of IMetaData objects for this entity.</summary>
            <typeparam name="T">The desired type of the result, either IID_IEnumUnknown or IID_IEnumVARIANT.</typeparam>
            <param name="e">The <see cref="T:Vanara.PInvoke.SearchApi.IEntity"/> instance.</param>
            <returns>Receives the address of a pointer to an enumeration of IMetaData objects.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.MetaData``1(Vanara.PInvoke.SearchApi.IRelationship)">
            <summary>Retrieves an enumeration of IMetaData objects for this relationship.</summary>
            <typeparam name="T">The desired type of the result, either IID_IEnumUnknown or IID_IEnumVARIANT.</typeparam>
            <param name="r">The <see cref="T:Vanara.PInvoke.SearchApi.IRelationship"/> instance.</param>
            <returns>
            Receives a pointer to the enumeration of IMetaData objects. There may be multiple pairs with the same key (or the same value).
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.MetaData``1(Vanara.PInvoke.SearchApi.ISchemaProvider)">
            <summary>Retrieves an enumeration of global IMetaData objects for the loaded schema.</summary>
            <typeparam name="T">The desired type of the result, either IID_IEnumUnknown or IID_IEnumVARIANT.</typeparam>
            <param name="sp">The <see cref="T:Vanara.PInvoke.SearchApi.ISchemaProvider"/> instance.</param>
            <returns>
            Receives a pointer to an enumeration of the IMetaData objects. The calling application must release it by calling its
            IUnknown::Release method.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.NamedEntities``1(Vanara.PInvoke.SearchApi.IEntity)">
            <summary>Retrieves an enumeration of INamedEntity objects, one for each known named entity of this type.</summary>
            <typeparam name="T">The desired type of the result, either IID_IEnumUnknown or IID_IEnumVARIANT.</typeparam>
            <param name="e">The <see cref="T:Vanara.PInvoke.SearchApi.IEntity"/> instance.</param>
            <returns>
            Receives the address of a pointer to an enumeration of INamedEntity objects, one for each known named entity of this type.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.Relationships``1(Vanara.PInvoke.SearchApi.IEntity)">
            <summary>Retrieves an enumeration of IRelationship objects, one for each relationship this entity has.</summary>
            <typeparam name="T">The desired type of the result, either IID_IEnumUnknown or IID_IEnumVARIANT.</typeparam>
            <param name="e">The <see cref="T:Vanara.PInvoke.SearchApi.IEntity"/> instance.</param>
            <returns>Receives the address of a pointer to the enumeration of the IRelationship objects.</returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ResolveCondition``1(Vanara.PInvoke.SearchApi.IConditionFactory2,Vanara.PInvoke.SearchApi.ICondition,Vanara.PInvoke.SearchApi.STRUCTURED_QUERY_RESOLVE_OPTION)">
            <summary>
            Performs a variety of transformations on a condition tree, and thereby the resolved condition for evaluation. The returned
            object supports ICondition and ICondition2.
            </summary>
            <typeparam name="T">The desired type of the result, either ICondition or ICondition2.</typeparam>
            <param name="f2">The IConditionFactory2 instance.</param>
            <param name="pc"><para>Type: <c>ICondition*</c></para>
            <para>Pointer to an ICondition object to be resolved.</para></param>
            <param name="sqro"><para>Type: <c>STRUCTURED_QUERY_RESOLVE_OPTION</c></para>
            <para>
            Specifies zero or more of the STRUCTURED_QUERY_RESOLVE_OPTION flags. The SQRO_NULL_VALUE_TYPE_FOR_PLAIN_VALUES flag is
            automatically added to sqro.
            </para></param>
            <returns></returns>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.CompoundCondition">
            <summary>Class interface for ICondition</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ConditionFactory">
            <summary>Class interface for IConditionFactory</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.LeafCondition">
            <summary>Class interface for ICondition</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.NegationCondition">
            <summary>Class interface for ICondition</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.QueryParser">
            <summary>Class interface for IQueryParser</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.QueryParserManager">
            <summary>Class interface for IQueryParserManager</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.CONDITION_OPERATION">
            <summary>
            Provides a set of flags to be used with following methods to indicate the operation in ICondition::GetComparisonInfo,
            ICondition2::GetLeafConditionInfo, IConditionFactory::MakeLeaf, IConditionFactory2::CreateBooleanLeaf,
            IConditionFactory2::CreateIntegerLeaf, IConditionFactory2::MakeLeaf, IConditionFactory2::CreateStringLeaf, and IConditionGenerator::GenerateForLeaf.
            </summary>
            <remarks>
            <para>
            Provides a set of flags to be used with following methods to indicate the operation in ICondition::GetComparisonInfo,
            ICondition2::GetLeafConditionInfo, IConditionFactory::MakeLeaf, IConditionFactory2::CreateBooleanLeaf,
            IConditionFactory2::CreateIntegerLeaf, IConditionFactory2::MakeLeaf, IConditionFactory2::CreateStringLeaf, and IConditionGenerator::GenerateForLeaf.
            </para>
            <para>
            In Windows 7, this enumeration is defined in structuredquerycondition.idl and structuredquerycondition.h. Prior to Windows 7 this
            enumeration was declared in structuredquery.h and structuredquery.idl.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_OPERATION.COP_IMPLICIT">
            <summary>
            An implicit comparison between the value of the property and the value of the constant. For an unresolved condition,
            COP_IMPLICIT means that a user did not type an operation. In contrast, a resolved condition will always have a condition
            other than the COP_IMPLICIT operation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_OPERATION.COP_EQUAL">
            <summary>The value of the property and the value of the constant must be equal.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_OPERATION.COP_NOTEQUAL">
            <summary>The value of the property and the value of the constant must not be equal.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_OPERATION.COP_LESSTHAN">
            <summary>The value of the property must be less than the value of the constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_OPERATION.COP_GREATERTHAN">
            <summary>The value of the property must be greater than the value of the constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_OPERATION.COP_LESSTHANOREQUAL">
            <summary>The value of the property must be less than or equal to the value of the constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_OPERATION.COP_GREATERTHANOREQUAL">
            <summary>The value of the property must be greater than or equal to the value of the constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_OPERATION.COP_VALUE_STARTSWITH">
            <summary>The value of the property must begin with the value of the constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_OPERATION.COP_VALUE_ENDSWITH">
            <summary>The value of the property must end with the value of the constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_OPERATION.COP_VALUE_CONTAINS">
            <summary>The value of the property must contain the value of the constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_OPERATION.COP_VALUE_NOTCONTAINS">
            <summary>The value of the property must not contain the value of the constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_OPERATION.COP_DOSWILDCARDS">
            <summary>
            The value of the property must match the value of the constant, where '?' matches any single character and '*' matches any
            sequence of characters.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_OPERATION.COP_WORD_EQUAL">
            <summary>The value of the property must contain a word that is the value of the constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_OPERATION.COP_WORD_STARTSWITH">
            <summary>The value of the property must contain a word that begins with the value of the constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_OPERATION.COP_APPLICATION_SPECIFIC">
            <summary>The application is free to interpret this in any suitable way.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.CONDITION_TYPE">
            <summary>
            Provides a set of flags to be used with the following methods to indicate the type of condition tree node:
            ICondition::GetConditionType, IConditionFactory::MakeAndOr, IConditionFactory2::CreateCompoundFromArray, and IConditionFactory2::CreateCompoundFromObjectArray.
            </summary>
            <remarks>
            <para>
            In Windows 7, this enumeration is defined in structuredquerycondition.idl and structuredquerycondition.h. Prior to Windows 7 this
            enumeration was declared in structuredquery.h and structuredquery.idl.
            </para>
            <para>
            The StructuredQuerySample code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to read lines from the
            console, parse them using the system schema, and display the resulting condition trees.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_TYPE.CT_AND_CONDITION">
            <summary>Indicates that the values of the subterms are combined by "AND".</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_TYPE.CT_OR_CONDITION">
            <summary>Indicates that the values of the subterms are combined by "OR".</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_TYPE.CT_NOT_CONDITION">
            <summary>Indicates a "NOT" comparison of subterms.</summary>
        </member>
        <member name="F:Vanara.PInvoke.SearchApi.CONDITION_TYPE.CT_LEAF_CONDITION">
            <summary>Indicates that the node is a comparison between a property and a constant value using a CONDITION_OPERATION.</summary>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ICondition">
            <summary>
            Provides methods for retrieving information about a search condition. An <c>ICondition</c> object represents the result of
            parsing an input string (using methods such as IQueryParser::Parse or IQuerySolution::GetQuery) into a tree of search condition
            nodes. A node can be a logical AND, OR, or NOT for comparing subnodes, or it can be a leaf node comparing a property and a
            constant value.
            </summary>
            <remarks>
            <para>
            Prior to Windows 7, this interface was only declared in structuredquery.h and structuredquery.idl. In Windows 7, this interface
            is also defined in structuredquerycondition.idl and structuredquerycondition.h.
            </para>
            <para>
            The StructuredQuerySample code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to read lines from the
            console, parse them using the system schema, and display the resulting condition trees.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition.GetClassID">
            <summary>Retrieves the class identifier (CLSID) of the object.</summary>
            <returns>
            <para>
            A pointer to the location that receives the CLSID on return. The CLSID is a globally unique identifier (GUID) that uniquely
            represents an object class that defines the code that can manipulate the object's data.
            </para>
            <para>If the method succeeds, the return value is S_OK. Otherwise, it is E_FAIL.</para>
            </returns>
            <remarks>
            <para>
            The <c>GetClassID</c> method retrieves the class identifier (CLSID) for an object, used in later operations to load
            object-specific code into the caller's context.
            </para>
            <para>Notes to Callers</para>
            <para>
            A container application might call this method to retrieve the original CLSID of an object that it is treating as a different
            class. Such a call would be necessary if a user performed an editing operation that required the object to be saved. If the
            container were to save it using the treat-as CLSID, the original application would no longer be able to edit the object.
            Typically, in this case, the container calls the OleSave helper function, which performs all the necessary steps. For this
            reason, most container applications have no need to call this method directly.
            </para>
            <para>
            The exception would be a container that provides an object handler for certain objects. In particular, a container
            application should not get an object's CLSID and then use it to retrieve class specific information from the registry.
            Instead, the container should use IOleObject and IDataObject interfaces to retrieve such class-specific information directly
            from the object.
            </para>
            <para>Notes to Implementers</para>
            <para>
            Typically, implementations of this method simply supply a constant CLSID for an object. If, however, the object's
            <c>TreatAs</c> registry key has been set by an application that supports emulation (and so is treating the object as one of a
            different class), a call to <c>GetClassID</c> must supply the CLSID specified in the <c>TreatAs</c> key. For more information
            on emulation, see CoTreatAsClass.
            </para>
            <para>
            When an object is in the running state, the default handler calls an implementation of <c>GetClassID</c> that delegates the
            call to the implementation in the object. When the object is not running, the default handler instead calls the ReadClassStg
            function to read the CLSID that is saved in the object's storage.
            </para>
            <para>
            If you are writing a custom object handler for your object, you might want to simply delegate this method to the default
            handler implementation (see OleCreateDefaultHandler).
            </para>
            <para>URL Moniker Notes</para>
            <para>This method returns CLSID_StdURLMoniker.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition.IsDirty">
            <summary>Determines whether an object has changed since it was last saved to its stream.</summary>
            <returns>This method returns S_OK to indicate that the object has changed. Otherwise, it returns S_FALSE.</returns>
            <remarks>
            <para>
            Use this method to determine whether an object should be saved before closing it. The dirty flag for an object is
            conditionally cleared in the IPersistStream::Save method.
            </para>
            <para>Notes to Callers</para>
            <para>
            You should treat any error return codes as an indication that the object has changed. Unless this method explicitly returns
            S_FALSE, assume that the object must be saved.
            </para>
            <para>
            Note that the OLE-provided implementations of the <c>IPersistStream::IsDirty</c> method in the OLE-provided moniker
            interfaces always return S_FALSE because their internal state never changes.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition.Load(System.Runtime.InteropServices.ComTypes.IStream)">
            <summary>Initializes an object from the stream where it was saved previously.</summary>
            <param name="pstm">The PSTM.</param>
            <remarks>
            <para>
            This method loads an object from its associated stream. The seek pointer is set as it was in the most recent
            IPersistStream::Save method. This method can seek and read from the stream, but cannot write to it.
            </para>
            <para>Notes to Callers</para>
            <para>
            Rather than calling <c>IPersistStream::Load</c> directly, you typically call the OleLoadFromStream function does the following:
            </para>
            <list type="number">
            <item>
            <term>Calls the ReadClassStm function to get the class identifier from the stream.</term>
            </item>
            <item>
            <term>Calls the CoCreateInstance function to create an instance of the object.</term>
            </item>
            <item>
            <term>Queries the instance for IPersistStream.</term>
            </item>
            <item>
            <term>Calls <c>IPersistStream::Load</c>.</term>
            </item>
            </list>
            <para>
            The OleLoadFromStream function assumes that objects are stored in the stream with a class identifier followed by the object
            data. This storage pattern is used by the generic, composite-moniker implementation provided by OLE.
            </para>
            <para>If the objects are not stored using this pattern, you must call the methods separately yourself.</para>
            <para>URL Moniker Notes</para>
            <para>
            Initializes an URL moniker from data within a stream, usually stored there previously using its IPersistStream::Save (using
            OleSaveToStream). The binary format of the URL moniker is its URL string in Unicode (may be a full or partial URL string, see
            CreateURLMonikerEx for details). This is represented as a <c>ULONG</c> count of characters followed by that many Unicode characters.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
            <summary>Saves an object to the specified stream.</summary>
            <param name="pstm">The PSTM.</param>
            <param name="fClearDirty">
            Indicates whether to clear the dirty flag after the save is complete. If <c>TRUE</c>, the flag should be cleared. If
            <c>FALSE</c>, the flag should be left unchanged.
            </param>
            <remarks>
            <para>
            <c>IPersistStream::Save</c> saves an object into the specified stream and indicates whether the object should reset its dirty flag.
            </para>
            <para>
            The seek pointer is positioned at the location in the stream at which the object should begin writing its data. The object
            calls the ISequentialStream::Write method to write its data.
            </para>
            <para>
            On exit, the seek pointer must be positioned immediately past the object data. The position of the seek pointer is undefined
            if an error returns.
            </para>
            <para>Notes to Callers</para>
            <para>
            Rather than calling <c>IPersistStream::Save</c> directly, you typically call the OleSaveToStream helper function which does
            the following:
            </para>
            <list type="number">
            <item>
            <term>Calls GetClassID to get the object's CLSID.</term>
            </item>
            <item>
            <term>Calls the WriteClassStm function to write the object's CLSID to the stream.</term>
            </item>
            <item>
            <term>Calls <c>IPersistStream::Save</c>.</term>
            </item>
            </list>
            <para>If you call these methods directly, you can write other data into the stream after the CLSID before calling <c>IPersistStream::Save</c>.</para>
            <para>The OLE-provided implementation of IPersistStream follows this same pattern.</para>
            <para>Notes to Implementers</para>
            <para>
            The <c>IPersistStream::Save</c> method does not write the CLSID to the stream. The caller is responsible for writing the CLSID.
            </para>
            <para>
            The <c>IPersistStream::Save</c> method can read from, write to, and seek in the stream; but it must not seek to a location in
            the stream before that of the seek pointer on entry.
            </para>
            <para>URL Moniker Notes</para>
            <para>
            Saves an URL moniker to a stream. The binary format of URL moniker is its URL string in Unicode (may be a full or partial URL
            string, see CreateURLMonikerEx for details). This is represented as a <c>ULONG</c> count of characters followed by that many
            Unicode characters.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition.GetSizeMax">
            <summary>Retrieves the size of the stream needed to save the object.</summary>
            <returns>The size in bytes of the stream needed to save this object, in bytes.</returns>
            <remarks>
            <para>
            This method returns the size needed to save an object. You can call this method to determine the size and set the necessary
            buffers before calling the IPersistStream::Save method.
            </para>
            <para>Notes to Implementers</para>
            <para>
            The <c>GetSizeMax</c> implementation should return a conservative estimate of the necessary size because the caller might
            call the IPersistStream::Save method with a non-growable stream.
            </para>
            <para>URL Moniker Notes</para>
            <para>
            This method retrieves the maximum number of bytes in the stream that will be required by a subsequent call to
            IPersistStream::Save. This value is sizeof(ULONG)==4 plus sizeof(WCHAR)*n where n is the length of the full or partial URL
            string, including the NULL terminator.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition.GetConditionType">
            <summary>
            Retrieves the condition type for this search condition node, identifying it as a logical AND, OR, or NOT, or as a leaf node.
            </summary>
            <returns>
            <para>Type: <c>CONDITION_TYPE*</c></para>
            <para>Receives the CONDITION_TYPE enumeration for this node.</para>
            </returns>
            <remarks>
            The StructuredQuerySample code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to read lines from
            the console, parse them using the system schema, and display the resulting condition trees.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition.GetSubConditions(System.Guid@)">
            <summary>
            Retrieves a collection of the subconditions of the search condition node and the IID of the interface for enumerating the collection.
            </summary>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>
            The desired IID of the enumerating interface: either IID_IEnumUnknown, IID_IEnumVARIANT or (for a negation condition) IID_ICondition.
            </para>
            </param>
            <returns>
            Receives a collection of zero or more ICondition objects. Each object is a subcondition of this condition node. If <paramref
            name="riid"/> was IID_ICondition and this is a negation condition, this parameter receives the single subcondition.
            </returns>
            <remarks>
            <para>
            The <paramref name="riid"/> parameter must be the <c>GUID</c> of an IEnumUnknown or IEnumVARIANT interface or in the case of
            a negation node, IID_ICondition.
            </para>
            <para>If the subcondition is a negation node, the return value is set to an enumeration of one element.</para>
            <para>If the node is a conjunction or disjunction node, the return value is set to an enumeration of the subconditions.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition.GetComparisonInfo(System.String@,Vanara.PInvoke.SearchApi.CONDITION_OPERATION@,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>Retrieves the property name, operation, and value from a leaf search condition node.</summary>
            <param name="ppszPropertyName">
            <para>Type: <c>LPWSTR*</c></para>
            <para>Receives the name of the property of the leaf condition as a Unicode string.</para>
            </param>
            <param name="pcop">
            <para>Type: <c>CONDITION_OPERATION*</c></para>
            <para>Receives the operation of the leaf condition as a CONDITION_OPERATION enumeration.</para>
            </param>
            <param name="ppropvar">
            <para>Type: <c>PROPVARIANT*</c></para>
            <para>Receives the value of the leaf condition as a PROPVARIANT.</para>
            </param>
            <remarks>Any or all of the three parameters can be <c>NULL</c>.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition.GetValueType">
            <summary>Retrieves the semantic type of the value of the search condition node.</summary>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>Receives either a pointer to the semantic type of the value as a Unicode string or <c>NULL</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition.GetValueNormalization">
            <summary>Retrieves the character-normalized value of the search condition node.</summary>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>Receives a pointer to a Unicode string representation of the value.</para>
            </returns>
            <remarks>
            In <c>Windows 7 and later</c>, if the value of the leaf node is <c>VT_EMPTY</c>, ppwszNormalization points to an empty
            string. If the value is a string, such as VT_LPWSTR, VT_BSTR or VT_LPSTR, then ppwszNormalization is set to a
            character-normalized form of the value. In other cases, ppwszNormalization is set to some other character-normalized string
            representation of the value.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition.GetInputTerms(Vanara.PInvoke.SearchApi.IRichChunk@,Vanara.PInvoke.SearchApi.IRichChunk@,Vanara.PInvoke.SearchApi.IRichChunk@)">
            <summary>
            For a leaf node, <c>ICondition::GetInputTerms</c> retrieves information about what parts (or ranges) of the input string
            produced the property, the operation, and the value for the search condition node.
            </summary>
            <param name="ppPropertyTerm">
            <para>Type: <c>IRichChunk**</c></para>
            <para>
            Receives a pointer to an IRichChunk interface that provides information about what part of the input string produced the
            property of the leaf node, if that can be determined; otherwise, this parameter is set to <c>NULL</c>.
            </para>
            </param>
            <param name="ppOperationTerm">
            <para>Type: <c>IRichChunk**</c></para>
            <para>
            Receives a pointer to an IRichChunk interface that provides information about what part of the input string produced the
            operation of the leaf node, if that can be determined; otherwise, this parameter is set to <c>NULL</c>.
            </para>
            </param>
            <param name="ppValueTerm">
            <para>Type: <c>IRichChunk**</c></para>
            <para>
            Receives a pointer to an IRichChunk interface that provides information about what part of the input string produced the
            value of the leaf node, if that can be determined; otherwise, this parameter is set to <c>NULL</c>.
            </para>
            </param>
            <remarks>
            <para>Any or all of the parameters ppPropertyTerm, ppOperationTerm and ppValueTerm can be <c>NULL</c>.</para>
            <para>
            Each IRichChunk object retrieved by this method represents a range of tokens from the input string. The range tokens
            identifies the substring that produced the property, operation, or value of the input string. The <c>IRichChunk</c>'s
            PROPVARIANT out parameter is not used.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition.Clone">
            <summary>Creates a deep copy of this ICondition object.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            Because there are no methods for modifying an ICondition, there are few occasions when this method is necessary. In many
            cases it is adequate to call the IUnknown::QueryInterface method on the <c>ICondition</c> to obtain an additional reference
            to the same object.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.ICondition2">
            <summary>
            Extends the functionality of the ICondition interface. <c>ICondition2</c> provides methods for retrieving information about a search condition.
            </summary>
            <seealso cref="T:Vanara.PInvoke.SearchApi.ICondition" />
            <remarks>
            The StructuredQuerySample code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to read lines from the console, parse them using the system schema, and display the resulting condition trees.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition2.GetClassID">
            <summary>Retrieves the class identifier (CLSID) of the object.</summary>
            <returns>
            <para>
            A pointer to the location that receives the CLSID on return. The CLSID is a globally unique identifier (GUID) that uniquely
            represents an object class that defines the code that can manipulate the object's data.
            </para>
            <para>If the method succeeds, the return value is S_OK. Otherwise, it is E_FAIL.</para>
            </returns>
            <remarks>
            <para>
            The <c>GetClassID</c> method retrieves the class identifier (CLSID) for an object, used in later operations to load
            object-specific code into the caller's context.
            </para>
            <para>Notes to Callers</para>
            <para>
            A container application might call this method to retrieve the original CLSID of an object that it is treating as a different
            class. Such a call would be necessary if a user performed an editing operation that required the object to be saved. If the
            container were to save it using the treat-as CLSID, the original application would no longer be able to edit the object.
            Typically, in this case, the container calls the OleSave helper function, which performs all the necessary steps. For this
            reason, most container applications have no need to call this method directly.
            </para>
            <para>
            The exception would be a container that provides an object handler for certain objects. In particular, a container
            application should not get an object's CLSID and then use it to retrieve class specific information from the registry.
            Instead, the container should use IOleObject and IDataObject interfaces to retrieve such class-specific information directly
            from the object.
            </para>
            <para>Notes to Implementers</para>
            <para>
            Typically, implementations of this method simply supply a constant CLSID for an object. If, however, the object's
            <c>TreatAs</c> registry key has been set by an application that supports emulation (and so is treating the object as one of a
            different class), a call to <c>GetClassID</c> must supply the CLSID specified in the <c>TreatAs</c> key. For more information
            on emulation, see CoTreatAsClass.
            </para>
            <para>
            When an object is in the running state, the default handler calls an implementation of <c>GetClassID</c> that delegates the
            call to the implementation in the object. When the object is not running, the default handler instead calls the ReadClassStg
            function to read the CLSID that is saved in the object's storage.
            </para>
            <para>
            If you are writing a custom object handler for your object, you might want to simply delegate this method to the default
            handler implementation (see OleCreateDefaultHandler).
            </para>
            <para>URL Moniker Notes</para>
            <para>This method returns CLSID_StdURLMoniker.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition2.IsDirty">
            <summary>Determines whether an object has changed since it was last saved to its stream.</summary>
            <returns>This method returns S_OK to indicate that the object has changed. Otherwise, it returns S_FALSE.</returns>
            <remarks>
            <para>
            Use this method to determine whether an object should be saved before closing it. The dirty flag for an object is
            conditionally cleared in the IPersistStream::Save method.
            </para>
            <para>Notes to Callers</para>
            <para>
            You should treat any error return codes as an indication that the object has changed. Unless this method explicitly returns
            S_FALSE, assume that the object must be saved.
            </para>
            <para>
            Note that the OLE-provided implementations of the <c>IPersistStream::IsDirty</c> method in the OLE-provided moniker
            interfaces always return S_FALSE because their internal state never changes.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition2.Load(System.Runtime.InteropServices.ComTypes.IStream)">
            <summary>Initializes an object from the stream where it was saved previously.</summary>
            <param name="pstm">The PSTM.</param>
            <remarks>
            <para>
            This method loads an object from its associated stream. The seek pointer is set as it was in the most recent
            IPersistStream::Save method. This method can seek and read from the stream, but cannot write to it.
            </para>
            <para>Notes to Callers</para>
            <para>
            Rather than calling <c>IPersistStream::Load</c> directly, you typically call the OleLoadFromStream function does the following:
            </para>
            <list type="number">
            <item>
            <term>Calls the ReadClassStm function to get the class identifier from the stream.</term>
            </item>
            <item>
            <term>Calls the CoCreateInstance function to create an instance of the object.</term>
            </item>
            <item>
            <term>Queries the instance for IPersistStream.</term>
            </item>
            <item>
            <term>Calls <c>IPersistStream::Load</c>.</term>
            </item>
            </list>
            <para>
            The OleLoadFromStream function assumes that objects are stored in the stream with a class identifier followed by the object
            data. This storage pattern is used by the generic, composite-moniker implementation provided by OLE.
            </para>
            <para>If the objects are not stored using this pattern, you must call the methods separately yourself.</para>
            <para>URL Moniker Notes</para>
            <para>
            Initializes an URL moniker from data within a stream, usually stored there previously using its IPersistStream::Save (using
            OleSaveToStream). The binary format of the URL moniker is its URL string in Unicode (may be a full or partial URL string, see
            CreateURLMonikerEx for details). This is represented as a <c>ULONG</c> count of characters followed by that many Unicode characters.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition2.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
            <summary>Saves an object to the specified stream.</summary>
            <param name="pstm">The PSTM.</param>
            <param name="fClearDirty">
            Indicates whether to clear the dirty flag after the save is complete. If <c>TRUE</c>, the flag should be cleared. If
            <c>FALSE</c>, the flag should be left unchanged.
            </param>
            <remarks>
            <para>
            <c>IPersistStream::Save</c> saves an object into the specified stream and indicates whether the object should reset its dirty flag.
            </para>
            <para>
            The seek pointer is positioned at the location in the stream at which the object should begin writing its data. The object
            calls the ISequentialStream::Write method to write its data.
            </para>
            <para>
            On exit, the seek pointer must be positioned immediately past the object data. The position of the seek pointer is undefined
            if an error returns.
            </para>
            <para>Notes to Callers</para>
            <para>
            Rather than calling <c>IPersistStream::Save</c> directly, you typically call the OleSaveToStream helper function which does
            the following:
            </para>
            <list type="number">
            <item>
            <term>Calls GetClassID to get the object's CLSID.</term>
            </item>
            <item>
            <term>Calls the WriteClassStm function to write the object's CLSID to the stream.</term>
            </item>
            <item>
            <term>Calls <c>IPersistStream::Save</c>.</term>
            </item>
            </list>
            <para>If you call these methods directly, you can write other data into the stream after the CLSID before calling <c>IPersistStream::Save</c>.</para>
            <para>The OLE-provided implementation of IPersistStream follows this same pattern.</para>
            <para>Notes to Implementers</para>
            <para>
            The <c>IPersistStream::Save</c> method does not write the CLSID to the stream. The caller is responsible for writing the CLSID.
            </para>
            <para>
            The <c>IPersistStream::Save</c> method can read from, write to, and seek in the stream; but it must not seek to a location in
            the stream before that of the seek pointer on entry.
            </para>
            <para>URL Moniker Notes</para>
            <para>
            Saves an URL moniker to a stream. The binary format of URL moniker is its URL string in Unicode (may be a full or partial URL
            string, see CreateURLMonikerEx for details). This is represented as a <c>ULONG</c> count of characters followed by that many
            Unicode characters.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition2.GetSizeMax">
            <summary>Retrieves the size of the stream needed to save the object.</summary>
            <returns>The size in bytes of the stream needed to save this object, in bytes.</returns>
            <remarks>
            <para>
            This method returns the size needed to save an object. You can call this method to determine the size and set the necessary
            buffers before calling the IPersistStream::Save method.
            </para>
            <para>Notes to Implementers</para>
            <para>
            The <c>GetSizeMax</c> implementation should return a conservative estimate of the necessary size because the caller might
            call the IPersistStream::Save method with a non-growable stream.
            </para>
            <para>URL Moniker Notes</para>
            <para>
            This method retrieves the maximum number of bytes in the stream that will be required by a subsequent call to
            IPersistStream::Save. This value is sizeof(ULONG)==4 plus sizeof(WCHAR)*n where n is the length of the full or partial URL
            string, including the NULL terminator.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition2.GetConditionType">
            <summary>
            Retrieves the condition type for this search condition node, identifying it as a logical AND, OR, or NOT, or as a leaf node.
            </summary>
            <returns>
            <para>Type: <c>CONDITION_TYPE*</c></para>
            <para>Receives the CONDITION_TYPE enumeration for this node.</para>
            </returns>
            <remarks>
            The StructuredQuerySample code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to read lines from
            the console, parse them using the system schema, and display the resulting condition trees.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition2.GetSubConditions(System.Guid@)">
            <summary>
            Retrieves a collection of the subconditions of the search condition node and the IID of the interface for enumerating the collection.
            </summary>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>
            The desired IID of the enumerating interface: either IID_IEnumUnknown, IID_IEnumVARIANT or (for a negation condition) IID_ICondition.
            </para>
            </param>
            <returns>
            Receives a collection of zero or more ICondition objects. Each object is a subcondition of this condition node. If <paramref
            name="riid"/> was IID_ICondition and this is a negation condition, this parameter receives the single subcondition.
            </returns>
            <remarks>
            <para>
            The <paramref name="riid"/> parameter must be the <c>GUID</c> of an IEnumUnknown or IEnumVARIANT interface or in the case of
            a negation node, IID_ICondition.
            </para>
            <para>If the subcondition is a negation node, the return value is set to an enumeration of one element.</para>
            <para>If the node is a conjunction or disjunction node, the return value is set to an enumeration of the subconditions.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition2.GetComparisonInfo(System.String@,Vanara.PInvoke.SearchApi.CONDITION_OPERATION@,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>Retrieves the property name, operation, and value from a leaf search condition node.</summary>
            <param name="ppszPropertyName">
            <para>Type: <c>LPWSTR*</c></para>
            <para>Receives the name of the property of the leaf condition as a Unicode string.</para>
            </param>
            <param name="pcop">
            <para>Type: <c>CONDITION_OPERATION*</c></para>
            <para>Receives the operation of the leaf condition as a CONDITION_OPERATION enumeration.</para>
            </param>
            <param name="ppropvar">
            <para>Type: <c>PROPVARIANT*</c></para>
            <para>Receives the value of the leaf condition as a PROPVARIANT.</para>
            </param>
            <remarks>Any or all of the three parameters can be <c>NULL</c>.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition2.GetValueType">
            <summary>Retrieves the semantic type of the value of the search condition node.</summary>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>Receives either a pointer to the semantic type of the value as a Unicode string or <c>NULL</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition2.GetValueNormalization">
            <summary>Retrieves the character-normalized value of the search condition node.</summary>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>Receives a pointer to a Unicode string representation of the value.</para>
            </returns>
            <remarks>
            In <c>Windows 7 and later</c>, if the value of the leaf node is <c>VT_EMPTY</c>, ppwszNormalization points to an empty
            string. If the value is a string, such as VT_LPWSTR, VT_BSTR or VT_LPSTR, then ppwszNormalization is set to a
            character-normalized form of the value. In other cases, ppwszNormalization is set to some other character-normalized string
            representation of the value.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition2.GetInputTerms(Vanara.PInvoke.SearchApi.IRichChunk@,Vanara.PInvoke.SearchApi.IRichChunk@,Vanara.PInvoke.SearchApi.IRichChunk@)">
            <summary>
            For a leaf node, <c>ICondition::GetInputTerms</c> retrieves information about what parts (or ranges) of the input string
            produced the property, the operation, and the value for the search condition node.
            </summary>
            <param name="ppPropertyTerm">
            <para>Type: <c>IRichChunk**</c></para>
            <para>
            Receives a pointer to an IRichChunk interface that provides information about what part of the input string produced the
            property of the leaf node, if that can be determined; otherwise, this parameter is set to <c>NULL</c>.
            </para>
            </param>
            <param name="ppOperationTerm">
            <para>Type: <c>IRichChunk**</c></para>
            <para>
            Receives a pointer to an IRichChunk interface that provides information about what part of the input string produced the
            operation of the leaf node, if that can be determined; otherwise, this parameter is set to <c>NULL</c>.
            </para>
            </param>
            <param name="ppValueTerm">
            <para>Type: <c>IRichChunk**</c></para>
            <para>
            Receives a pointer to an IRichChunk interface that provides information about what part of the input string produced the
            value of the leaf node, if that can be determined; otherwise, this parameter is set to <c>NULL</c>.
            </para>
            </param>
            <remarks>
            <para>Any or all of the parameters ppPropertyTerm, ppOperationTerm and ppValueTerm can be <c>NULL</c>.</para>
            <para>
            Each IRichChunk object retrieved by this method represents a range of tokens from the input string. The range tokens
            identifies the substring that produced the property, operation, or value of the input string. The <c>IRichChunk</c>'s
            PROPVARIANT out parameter is not used.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition2.Clone">
            <summary>Creates a deep copy of this ICondition object.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            Because there are no methods for modifying an ICondition, there are few occasions when this method is necessary. In many
            cases it is adequate to call the IUnknown::QueryInterface method on the <c>ICondition</c> to obtain an additional reference
            to the same object.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition2.GetLocale">
            <summary>
            <para>Retrieves the property name, operation, and value from a leaf search condition node.</para>
            </summary>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>Receives the name of the locale of the leaf condition as a Unicode string. This parameter can be <c>NULL</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.ICondition2.GetLeafConditionInfo(Vanara.PInvoke.Ole32.PROPERTYKEY@,Vanara.PInvoke.SearchApi.CONDITION_OPERATION@,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>
            Retrieves the property name, operation, and value from a leaf search condition node.
            </summary>
            <param name="ppropkey"><para>Type: <c>PROPERTYKEY*</c></para><para>Receives the name of the property of the leaf condition as a PROPERTYKEY.</para></param>
            <param name="pcop"><para>Type: <c>CONDITION_OPERATION*</c></para><para>Receives the operation of the leaf condition as a CONDITION_OPERATION enumeration.</para></param>
            <param name="ppropvar"><para>Type: <c>PROPVARIANT*</c></para><para>Receives the property value of the leaf condition as a PROPVARIANT.</para></param>
            <remarks>
              <para>Any or all of the three parameters can be <c>NULL</c>.</para><para>The StructuredQuerySample code sample, available on Code Gallery and the Windows 7 SDK, demonstrates how to read lines from the console, parse them using the system schema, and display the resulting condition trees.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.SearchApi.IRichChunk">
            <summary>Represents a chunk of data as a string and a PROPVARIANT value.</summary>
            <remarks>
            In Windows 7, this interface is defined in structuredquerycondition.idl and structuredquerycondition.h. Prior to Windows 7 this
            interface was declared in structuredquery.h and structuredquery.idl.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.IRichChunk.GetData(System.UInt32@,System.UInt32@,System.String@,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>
            <para>Retrieves the PROPVARIANT and input string that represents a chunk of data.</para>
            </summary>
            <param name="pFirstPos">
            <para>Type: <c>ULONG*</c></para>
            <para>Receives the zero-based starting position of the range. This parameter can be <c>NULL</c>.</para>
            </param>
            <param name="pLength">
            <para>Type: <c>ULONG*</c></para>
            <para>Receives the length of the range. This parameter can be <c>NULL</c>.</para>
            </param>
            <param name="ppsz">
            <para>Type: <c>LPWSTR*</c></para>
            <para>Receives the associated Unicode string value, or <c>NULL</c> if not available.</para>
            </param>
            <param name="pValue">
            <para>Type: <c>PROPVARIANT*</c></para>
            <para>Receives the associated PROPVARIANT value, or <c>VT_EMPTY</c> if not available. This parameter can be <c>NULL</c>.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>Prior to Windows 7, this was declared in structuredquery.idl and structuredquery.h.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.SearchApi.GetSubConditions``1(Vanara.PInvoke.SearchApi.ICondition)">
            <summary>
            Retrieves a collection of the subconditions of the search condition node and the IID of the interface for enumerating the collection.
            </summary>
            <typeparam name="T">
            The desired type of the enumerating interface: either IID_IEnumUnknown, IID_IEnumVARIANT or (for a negation condition) IID_ICondition.
            </typeparam>
            <param name="c">The <see cref="T:Vanara.PInvoke.SearchApi.ICondition"/> instance.</param>
            <returns>
            Receives a collection of zero or more ICondition objects. Each object is a subcondition of this condition node. If
            <typeparamref name="T"/> was IID_ICondition and this is a negation condition, this parameter receives the single subcondition.
            </returns>
            <remarks>
            <para>If the subcondition is a negation node, the return value is set to an enumeration of one element.</para>
            <para>If the node is a conjunction or disjunction node, the return value is set to an enumeration of the subconditions.</para>
            </remarks>
        </member>
    </members>
</doc>
