<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vanara.PInvoke.AclUI</name>
    </assembly>
    <members>
        <member name="T:Vanara.PInvoke.AclUI">
            <summary>Platform invokable enumerated types, constants and functions from aclui.h</summary>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.PropertySheetCallbackMessage">
            <summary>Messages sent from property sheet.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.PropertySheetCallbackMessage.PSPCB_ADDREF">
            <summary>Add reference.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.PropertySheetCallbackMessage.PSPCB_RELEASE">
            <summary>Release reference.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.PropertySheetCallbackMessage.PSPCB_CREATE">
            <summary>Create page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.PropertySheetCallbackMessage.PSPCB_SI_INITDIALOG">
            <summary>Initialize dialog.</summary>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.SECURITY_OBJECT_ID">
            <summary>Specifies the security descriptor to use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SECURITY_OBJECT_ID.SECURITY_OBJECT_ID_OBJECT_SD">
            <summary>
            The security descriptor of the resource.
            <para>If Id is set to this value, then pData points to a security descriptor and cbData is the number of bytes in pData.</para>
            <para>pData2 is NULL and cbData2 is 0.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SECURITY_OBJECT_ID.SECURITY_OBJECT_ID_SHARE">
            <summary>
            The security descriptor of a network share.
            <para>
            If Id is set to this value, then pData points to the ISecurityInformation interface of an object that represents the security
            context of the share.
            </para>
            <para>
            If the security descriptor is not yet available, then pData2 must be a handle to a waitable object that is signaled when the
            security descriptor is ready when the GetSecondarySecurity method returns S_FALSE. The waitable object should be created by
            the CreateEvent function. In this case, cbData2 is 0.
            </para>
            <para>This identifier is only applicable to file system objects.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SECURITY_OBJECT_ID.SECURITY_OBJECT_ID_CENTRAL_POLICY">
            <summary>
            The security descriptor of a central access policy.
            <para>
            If Id is set to this value, then pData points to the security descriptor with an empty DACL, an owner, group, and attribute
            access control entries (ACEs) that match the resource's owner, group, and attributes as well as a
            SCOPE_SECURITY_INFORMATION_ACE that contains the central policy's ID. cbData is set to the number of bytes in pData.
            </para>
            <para>pData2 is NULL and cbData2 is 0.</para>
            <para>
            The security descriptor is constructed to allow computing effective permissions to correctly determine when access is limited
            by the central policy and higher detail of the central access rule cannot be determined. This is used when a central access
            policy that applies to a resource cannot be resolved into its elemental central access rules.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SECURITY_OBJECT_ID.SECURITY_OBJECT_ID_CENTRAL_ACCESS_RULE">
            <summary>
            The security descriptor of a central access rule.
            <para>
            If Id is set to this value, then pData points to the security descriptor with an owner, group, and attribute ACEs that match
            the resource's owner, group, and attributes, and a discretionary access control list (DACL) that matches the central access
            rule's DACL. cbData is set to the number of bytes in pData.
            </para>
            <para>
            In addition, pData2 points to a security descriptor with a DACL that contains a conditional ACE that grants 0x1 to Everyone
            if the resource condition from the central access rule evaluates to TRUE. cbData2 is set to the number of bytes in pData2.
            </para>
            <para>
            The security descriptor is constructed to allow computing effective permissions to determine when access is limited by the
            central access policy at the highest detail. That is, access is limited by pointing to a central policy rule.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags">
            <summary>A set of bit flags that determine the editing options available to the user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_ADVANCED">
            <summary>
            The Advanced button is displayed on the basic security property page. If the user clicks this button, the system displays an
            advanced security property sheet that enables advanced editing of the discretionary access control list (DACL) of the object.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_AUDITS_ELEVATION_REQUIRED">
            <summary>
            If this flag is set, a shield is displayed on the Edit button of the advanced Auditing pages. For NTFS objects, this flag is
            requested when the user does not have READ_CONTROL or ACCESS_SYSTEM_SECURITY access. Windows Server 2003 and Windows XP: This
            flag is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_CONTAINER">
            <summary>
            Indicates that the object is a container. If this flag is set, the access control editor enables the controls relevant to the
            inheritance of permissions onto child objects.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_EDIT_ALL">
            <summary>Combines the EditPerms, EditOwner, and EditAudit flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_EDIT_AUDITS">
            <summary>
            If this flag is set and the user clicks the Advanced button, the system displays an advanced security property sheet that
            includes an Auditing property page for editing the object's SACL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_EDIT_EFFECTIVE">
            <summary>If this flag is set, the Effective Permissions page is displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_EDIT_OWNER">
            <summary>
            If this flag is set and the user clicks the Advanced button, the system displays an advanced security property sheet that
            includes an Owner property page for changing the object's owner.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_EDIT_PERMS">
            <summary>
            This is the default value. The basic security property page always displays the controls for basic editing of the object's
            DACL. To disable these controls, set the ReadOnly flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_EDIT_PROPERTIES">
            <summary>
            If this flag is set, the system enables controls for editing ACEs that apply to the object's property sets and properties.
            These controls are available only on the property sheet displayed when the user clicks the Advanced button.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_MAY_WRITE">
            <summary>
            Indicates that the access control editor cannot read the DACL but might be able to write to the DACL. If a call to the
            ISecurityInformation::GetSecurity method returns AccessDenied, the user can try to add a new ACE, and a more appropriate
            warning is displayed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_NO_ACL_PROTECT">
            <summary>
            If this flag is set, the access control editor hides the check box that allows inheritable ACEs to propagate from the parent
            object to this object. If this flag is not set, the check box is visible. The check box is clear if the SE_DACL_PROTECTED
            flag is set in the object's security descriptor. In this case, the object's DACL is protected from being modified by
            inheritable ACEs. If the user clears the check box, any inherited ACEs in the security descriptor are deleted or converted to
            noninherited ACEs. Before proceeding with this conversion, the system displays a warning message box to confirm the change.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_NO_ADDITIONAL_PERMISSION">
            <summary>
            If this flag is set, the access control editor hides the Special Permissions tab on the Advanced Security Settings page.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_NO_TREE_APPLY">
            <summary>
            If this flag is set, the access control editor hides the check box that controls the NO_PROPAGATE_INHERIT_ACE flag. This flag
            is relevant only when the Advanced flag is also set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_OBJECT_GUID">
            <summary>
            When set, indicates that the ObjectGuid property is valid. This is set in comparisons with object-specific ACEs in
            determining whether the ACE applies to the current object.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_OWNER_ELEVATION_REQUIRED">
            <summary>
            If this flag is set, a shield is displayed on the Edit button of the advanced Owner page. For NTFS objects, this flag is
            requested when the user does not have WRITE_OWNER access. This flag is valid only if the owner page is requested. Windows
            Server 2003 and Windows XP: This flag is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_OWNER_READONLY">
            <summary>
            If this flag is set, the user cannot change the owner of the object. Set this flag if EditOwner is set but the user does not
            have permission to change the owner.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_OWNER_RECURSE">
            <summary>
            Combine this flag with Container to display a check box on the owner page that indicates whether the user intends the new
            owner to be applied to all child objects as well as the current object. The access control editor does not perform the recursion.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_PAGE_TITLE">
            <summary>
            If this flag is set, the Title property value is used as the title of the basic security property page. Otherwise, a default
            title is used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_PERMS_ELEVATION_REQUIRED">
            <summary>
            If this flag is set, an image of a shield is displayed on the Edit button of the simple and advanced Permissions pages. For
            NTFS objects, this flag is requested when the user does not have READ_CONTROL or WRITE_DAC access. Windows Server 2003 and
            Windows XP: This flag is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_READONLY">
            <summary>
            If this flag is set, the editor displays the object's security information, but the controls for editing the information are
            disabled. This flag cannot be combined with the ViewOnly flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_RESET">
            <summary>
            If this flag is set, the Default button is displayed. If the user clicks this button, the access control editor calls the
            IAccessControlEditorDialogProvider.DefaultSecurity to retrieve an application-defined default security descriptor. The access
            control editor uses this security descriptor to reinitialize the property sheet, and the user is allowed to apply the change
            or cancel.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_RESET_DACL">
            <summary>When set, this flag displays the Reset Defaults button on the Permissions page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_RESET_DACL_TREE">
            <summary>
            When set, this flag displays the Reset permissions on all child objects and enable propagation of inheritable permissions
            check box in the Permissions page of the Access Control Settings window. This function does not reset the permissions and
            enable propagation of inheritable permissions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_RESET_OWNER">
            <summary>When set, this flag displays the Reset Defaults button on the Owner page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_RESET_SACL">
            <summary>When set, this flag displays the Reset Defaults button on the Auditing page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_RESET_SACL_TREE">
            <summary>
            When set, this flag displays the Reset auditing entries on all child objects and enables propagation of the inheritable
            auditing entries check box in the Auditing page of the Access Control Settings window. This function does not reset the
            permissions and enable propagation of inheritable permissions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_SERVER_IS_DC">
            <summary>
            Set this flag if the computer defined by the ServerName property is known to be a domain controller. If this flag is set, the
            domain name is included in the scope list of the Add Users and Groups dialog box. Otherwise, the pszServerName computer is
            used to determine the scope list of the dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags.SI_VIEW_ONLY">
            <summary>View Only.</summary>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.SI_PAGE_ACTIVATED">
            <summary>Page types used by the new advanced ACL UI</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_PAGE_ACTIVATED.SI_SHOW_DEFAULT">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_PAGE_ACTIVATED.SI_SHOW_PERM_ACTIVATED">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_PAGE_ACTIVATED.SI_SHOW_AUDIT_ACTIVATED">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_PAGE_ACTIVATED.SI_SHOW_OWNER_ACTIVATED">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_PAGE_ACTIVATED.SI_SHOW_EFFECTIVE_ACTIVATED">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_PAGE_ACTIVATED.SI_SHOW_SHARE_ACTIVATED">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_PAGE_ACTIVATED.SI_SHOW_CENTRAL_POLICY_ACTIVATED">
            <summary></summary>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.SI_PAGE_TYPE">
            <summary>Values that indicate the types of property pages in an access control editor property sheet.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_PAGE_TYPE.SI_PAGE_PERM">
            <summary>Permissions page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_PAGE_TYPE.SI_PAGE_ADVPERM">
            <summary>Advanced page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_PAGE_TYPE.SI_PAGE_AUDIT">
            <summary>Audit page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_PAGE_TYPE.SI_PAGE_OWNER">
            <summary>Owner page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_PAGE_TYPE.SI_PAGE_EFFECTIVE">
            <summary>Effective Rights page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_PAGE_TYPE.SI_PAGE_TAKEOWNERSHIP">
            <summary>Take Ownership page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_PAGE_TYPE.SI_PAGE_SHARE">
            <summary>Share page.</summary>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.IEffectivePermission">
            <summary>
            The IEffectivePermission interface provides a means to determine effective permission for a security principal on an object. The
            access control editor uses this information to communicate the effective permission to the client.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.IEffectivePermission.GetEffectivePermission(System.Guid@,Vanara.PInvoke.PSID,System.String,Vanara.PInvoke.PSECURITY_DESCRIPTOR,Vanara.PInvoke.OBJECT_TYPE_LIST[]@,System.UInt32@,Vanara.PInvoke.ACCESS_MASK[]@,System.UInt32@)">
            <summary>Returns the effective permission for an object type.</summary>
            <param name="pguidObjectType">A GUID for the object type whose permission is being queried.</param>
            <param name="pUserSid">
            A pointer to a SID structure that represents the security principal whose effective permission is being determined.
            </param>
            <param name="pszServerName">A pointer to null-terminated wide character string that represents the server name.</param>
            <param name="pSD">
            A pointer to a SECURITY_DESCRIPTOR structure that represents the object's security descriptor. The security descriptor is
            used to perform the access check.
            </param>
            <param name="ppObjectTypeList">
            A pointer to a pointer to an OBJECT_TYPE_LIST structure that represents the array of object types in the object tree for the
            object. If an object does not support property access, use the following technique to specify the value for the OBJECT_TYPE_LIST.
            </param>
            <param name="pcObjectTypeListLength">A pointer to a ULONG that receives the count of object types pointed to by ppObjectTypeList.</param>
            <param name="ppGrantedAccessList">
            A pointer to a pointer to an ACCESS_MASK that receives the array of granted access masks. The operating system will use
            LocalFree to free the memory allocated for this parameter.
            </param>
            <param name="pcGrantedAccessListLength">
            A pointer to a ULONG variable that receives the count of granted access masks pointed to by the ppGrantedAccessList parameter.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.IEffectivePermission2">
            <summary>
            The IEffectivePermission2 interface provides a way to determine effective permissions for a security principal on an object in a
            way where the principal's security context may be compounded with a device context or adjusted in other ways. Additionally, it
            determines the effective permissions even when multiple security checks apply. The access control editor uses this information to
            communicate the effective permissions to the client.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.IEffectivePermission2.ComputeEffectivePermissionWithSecondarySecurity(Vanara.PInvoke.PSID,Vanara.PInvoke.PSID,System.String,Vanara.PInvoke.AclUI.SECURITY_OBJECT[],System.UInt32,Vanara.PInvoke.AdvApi32.TOKEN_GROUPS@,Vanara.PInvoke.Authz.AUTHZ_SID_OPERATION[],Vanara.PInvoke.AdvApi32.TOKEN_GROUPS@,Vanara.PInvoke.Authz.AUTHZ_SID_OPERATION[],Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION@,Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_OPERATION[],Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION@,Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_OPERATION[],Vanara.PInvoke.AclUI.EFFPERM_RESULT_LIST[])">
            <summary>
            The ComputeEffectivePermissionWithSecondarySecurity method computes the effective permissions for an object. It supports
            integrating secondary or custom security policies. You may choose to provide this additional security information by
            implementing the ISecurityInformation4 interface. This method supports compound identity, which is when a principal's access
            token contains user and device authorization information.
            </summary>
            <param name="pSid">
            A pointer to a SID structure that represents the security principal whose effective permission is being determined.
            </param>
            <param name="pDeviceSid">
            A pointer to a SID structure that represents the device from which the principal is accessing the object. If this is not NULL
            and you are using the AuthzAccessCheck function to compute the effective permissions, then the device SID may be compounded
            with the pSid parameter by using the AuthzInitializeCompoundContext function.
            </param>
            <param name="pszServerName">
            The name of the server on which the object resides. This is the same name that was returned from the
            ISecurityInformation::GetObjectInformation method.
            </param>
            <param name="pSecurityObjects">
            An array of security objects. This array is composed of objects that were deduced by the access control editor in addition to
            the ones returned from the ISecurityInformation4::GetSecondarySecurity method.
            </param>
            <param name="dwSecurityObjectCount">
            The number of security objects in the pSecurityObjects parameter, and the number of results lists in the pEffpermResultLists parameter.
            </param>
            <param name="pUserGroups">
            A pointer to additional user groups that should be used to modify the security context which was initialized from the pSid
            parameter. If you are using the AuthzAccessCheck function to compute the effective permissions, then the modification may be
            done by calling the AuthzModifySids function using AuthzContextInfoGroupsSids as the SidClass parameter.
            </param>
            <param name="pAuthzUserGroupsOperations">
            Pointer to an array of AUTHZ_SID_OPERATION structures that specify how the user groups in the authz context must be modified
            for each user group in the pUserGroups argument. This array contains as many elements as the number of groups in the
            pUserGroups parameter.
            </param>
            <param name="pDeviceGroups">
            A pointer to additional device groups that should be used to modify the security context which was initialized from the pSid
            parameter or one that was created by compounding the contexts that were initialized from the pSid and pDeviceSid parameters.
            If you are using the AuthzAccessCheck function to compute the effective permissions, then the modification may be done by
            calling the AuthzModifySids function using AuthzContextInfoDeviceSids as the SidClass parameter.
            </param>
            <param name="pAuthzDeviceGroupsOperations">
            Pointer to an array of AUTHZ_SID_OPERATION enumeration types that specify how the device groups in the authz context must be
            modified for each device group in the pDeviceGroups argument. This array contains as many elements as the number of groups in
            the pDeviceGroups parameter.
            </param>
            <param name="pAuthzUserClaims">
            Pointer to an AUTHZ_SECURITY_ATTRIBUTES_INFORMATION structure that contains the user claims context that should be used to
            modify the security context that was initialized from the pSid parameter. If you are using the AuthzAccessCheck function to
            compute the effective permissions, then the modification may be done by calling the AuthzModifyClaims function using
            AuthzContextInfoUserClaims as the ClaimClass parameter.
            </param>
            <param name="pAuthzUserClaimsOperations">
            Pointer to an AUTHZ_SECURITY_ATTRIBUTE_OPERATION enumeration type that specifies the operations associated with the user
            claims context.
            </param>
            <param name="pAuthzDeviceClaims">
            A pointer to the device claims context that should be used to modify the security context that was initialized from the pSid
            parameter or one that was created by compounding the contexts that were initialized from the pSid and pDeviceSid parameters.
            This may be supplied by the caller, even if the pDeviceSid parameter is not. If you are using the AuthzAccessCheck function
            to compute the effective permissions, then the modification may be done by calling the AuthzModifyClaims function using
            AuthzContextInfoDeviceClaims as the ClaimClass parameter.
            </param>
            <param name="pAuthzDeviceClaimsOperations">
            Pointer to an AUTHZ_SECURITY_ATTRIBUTE_OPERATION enumeration type that specifies the operations associated with the device
            claims context.
            </param>
            <param name="pEffpermResultLists">
            A pointer to an array of the effective permissions results of type EFFPERM_RESULT_LIST. This array is dwSecurityObjectCount
            elements long. The array is initialized by the caller and the implementation is expected to set all fields of each member in
            the array, indicating what access was granted by the corresponding security object.
            <para>
            If a security object was considered, the fEvaluated member should be set to TRUE. In this case, the pObjectTypeList and
            pGrantedAccessList members should both be cObjectTypeListLength elements long. The pObjectTypeList member must point to
            memory that is owned by the resource manager and must remain valid until the EditSecurity function exits. The
            pGrantedAccessList member is freed by the caller by using the LocalFree function. If the resource manager does not support
            object ACEs, then the pObjectTypeList member should point to the NULL GUID, the cObjectTypeListLength member should be 1, and
            the pGrantedAccessList member should be a single DWORD.
            </para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.ISecurityInformation">
            <summary>
            The ISecurityInformation interface enables the access control editor to communicate with the caller of the CreateSecurityPage and
            EditSecurity functions. The editor calls the interface methods to retrieve information that is used to initialize its pages and
            to determine the editing options available to the user. The editor also calls the interface methods to pass the user's input back
            to the application.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.ISecurityInformation.GetObjectInformation(Vanara.PInvoke.AclUI.SI_OBJECT_INFO@)">
            <summary>
            The GetObjectInformation method requests information that the access control editor uses to initialize its pages and to
            determine the editing options available to the user.
            </summary>
            <param name="object_info">
            A pointer to an SI_OBJECT_INFO structure. Your implementation must fill this structure to pass information back to the access
            control editor.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.ISecurityInformation.GetSecurity(Vanara.PInvoke.SECURITY_INFORMATION,Vanara.PInvoke.PSECURITY_DESCRIPTOR@,System.Boolean)">
            <summary>
            The GetSecurity method requests a security descriptor for the securable object whose security descriptor is being edited. The
            access control editor calls this method to retrieve the object's current or default security descriptor.
            </summary>
            <param name="RequestInformation">
            A set of SECURITY_INFORMATION bit flags that indicate the parts of the security descriptor being requested. This parameter
            can be a combination of the following values.
            </param>
            <param name="SecurityDescriptor">
            A pointer to a variable that your implementation must set to a pointer to the object's security descriptor. The security
            descriptor must include the components requested by the RequestedInformation parameter.
            <para>The system calls the LocalFree function to free the returned pointer.</para>
            </param>
            <param name="fDefault">
            If this parameter is TRUE, ppSecurityDescriptor should return an application-defined default security descriptor for the
            object. The access control editor uses this default security descriptor to reinitialize the property page.
            <para>
            The access control editor sets this parameter to TRUE only if the user clicks the Default button. The Default button is
            displayed only if you set the SI_RESET flag in the ISecurityInformation::GetObjectInformation method. If no default security
            descriptor is available, do not set the SI_RESET flag.
            </para>
            <para>If this flag is FALSE, ppSecurityDescriptor should return the object's current security descriptor.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.ISecurityInformation.SetSecurity(Vanara.PInvoke.SECURITY_INFORMATION,Vanara.PInvoke.PSECURITY_DESCRIPTOR)">
            <summary>
            The SetSecurity method provides a security descriptor containing the security information the user wants to apply to the
            securable object. The access control editor calls this method when the user clicks Okay or Apply.
            </summary>
            <param name="RequestInformation">
            A set of SECURITY_INFORMATION bit flags that indicate the parts of the security descriptor to set.
            </param>
            <param name="SecurityDescriptor">
            A pointer to a security descriptor containing the new security information. Do not assume the security descriptor is in
            self-relative form; it can be either absolute or self-relative.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.ISecurityInformation.GetAccessRights(System.Guid@,System.Int32,Vanara.PInvoke.AclUI.SI_ACCESS[]@,System.UInt32@,System.UInt32@)">
            <summary>
            The GetAccessRights method requests information about the access rights that can be controlled for a securable object. The
            access control editor calls this method to retrieve display strings and other information used to initialize the property pages.
            </summary>
            <param name="guidObject">
            A pointer to a GUID structure that identifies the type of object for which access rights are being requested. If this
            parameter is NULL or a pointer to GUID_NULL, return the access rights for the object being edited. Otherwise, the GUID
            identifies a child object type returned by the ISecurityInformation::GetInheritTypes method. The GUID corresponds to the
            InheritedObjectType member of an object-specific ACE.
            </param>
            <param name="dwFlags">
            A set of bit flags that indicate the property page being initialized. This value is zero if the basic security page is being
            initialized. Otherwise, it is a combination of the following values.
            </param>
            <param name="access">
            A pointer to an array of SI_ACCESS structures. The array must include one entry for each access right. You can specify access
            rights that apply to the object itself, as well as object-specific access rights that apply only to a property set or
            property on the object.
            </param>
            <param name="access_count">A pointer to ULONG that indicates the number of entries in the ppAccess array.</param>
            <param name="DefaultAccess">
            A pointer to ULONG that indicates the zero-based index of the array entry that contains the default access rights. The access
            control editor uses this entry as the initial access rights in a new ACE.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.ISecurityInformation.MapGeneric(System.Guid@,System.Security.AccessControl.AceFlags@,Vanara.PInvoke.ACCESS_MASK@)">
            <summary>
            The MapGeneric method requests that the generic access rights in an access mask be mapped to their corresponding standard and
            specific access rights. For more information about generic, standard, and specific access rights, see Access Rights and
            Access Masks.
            </summary>
            <param name="guidObjectType">
            A pointer to a GUID structure that identifies the type of object to which the access mask applies. If this member is NULL or
            a pointer to GUID_NULL, the access mask applies to the object itself.
            </param>
            <param name="AceFlags">
            A pointer to the AceFlags member of the ACE_HEADER structure from the ACE whose access mask is being mapped.
            </param>
            <param name="Mask">
            A pointer to an access mask that contains the generic access rights to map. Your implementation must map the generic access
            rights to the corresponding standard and specific access rights for the specified object type.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.ISecurityInformation.GetInheritTypes(Vanara.PInvoke.AclUI.SI_INHERIT_TYPE[]@,System.UInt32@)">
            <summary>
            The GetInheritTypes method requests information about how ACEs can be inherited by child objects. For more information, see
            ACE Inheritance.
            </summary>
            <param name="InheritType">
            A pointer to a variable you should set to a pointer to an array of SI_INHERIT_TYPE structures. The array should include one
            entry for each combination of inheritance flags and child object type that you support.
            </param>
            <param name="InheritTypesCount">
            A pointer to a variable that you should set to indicate the number of entries in the ppInheritTypes array.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.ISecurityInformation.PropertySheetPageCallback(Vanara.PInvoke.HWND,Vanara.PInvoke.AclUI.PropertySheetCallbackMessage,Vanara.PInvoke.AclUI.SI_PAGE_TYPE)">
            <summary>
            The PropertySheetPageCallback method notifies an EditSecurity or CreateSecurityPage caller that an access control editor
            property page is being created or destroyed.
            </summary>
            <param name="hwnd">
            If uMsg is PSPCB_SI_INITDIALOG, hwnd is a handle to the property page dialog box. Otherwise, hwnd is NULL.
            </param>
            <param name="uMsg">Identifies the message being received.</param>
            <param name="uPage">
            A value from the SI_PAGE_TYPE enumeration type that indicates the type of access control editor property page being created
            or destroyed.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.ISecurityInformation2">
            <summary>
            The ISecurityInformation2 interface enables the access control editor to obtain information from the client that is not provided
            by the ISecurityInformation interface. The client does not need to implement ISecurityInformation2 unless the default behavior of
            the access control editor is unsuitable for the client.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.ISecurityInformation2.IsDaclCanonical(Vanara.PInvoke.PACL)">
            <summary>
            The IsDaclCanonical method determines whether the ACEs contained in the specified DACL structure are ordered according to the
            definition of DACL ordering implemented by the client.
            </summary>
            <param name="pDacl">A pointer to a discretionary ACL structure initialized by InitializeAcl.</param>
            <returns>
            Returns TRUE if the ACEs contained in the specified DACL structure are ordered according to the definition of DACL ordering
            implemented by the client. Returns FALSE if the ACEs are not ordered correctly.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.ISecurityInformation2.LookupSids(System.UInt32,Vanara.PInvoke.PSID[],System.IntPtr@)">
            <summary>
            The LookupSids method returns the common names corresponding to each of the elements in the specified list of SIDs.
            </summary>
            <param name="cSids">The number of pointers to SID structures pointed to by rgpSids.</param>
            <param name="rgpSids">A pointer to an array of pointers to SID structures.</param>
            <param name="ppdo">
            A pointer to a pointer to a returned data transfer object that contains the common names of the SIDs. Optionally, this
            parameter also returns the user principal name (UPN) of the SIDs in the rgpSids parameter. The data transfer object is a
            SID_INFO structure.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.ISecurityInformation3">
            <summary>
            The ISecurityInformation3 interface provides methods necessary for displaying an elevated access control editor when a user
            clicks the Edit button on an access control editor page that displays an image of a shield on that Edit button. The image of a
            shield is displayed on the Edit button when the access control editor is launched by a process with a token that lacks permission
            to save changes to the object being edited.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.ISecurityInformation3.GetFullResourceName(System.String@)">
            <summary>
            The GetFullResourceName method retrieves the full path and file name of the object associated with the access control editor
            that is displayed by calling the OpenElevatedEditor method.
            </summary>
            <returns>The full path and file name of the object for which permissions are to be edited.</returns>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.ISecurityInformation3.OpenElevatedEditor(Vanara.PInvoke.HWND,Vanara.PInvoke.AclUI.SI_PAGE_TYPE)">
            <summary>
            The OpenElevatedEditor method opens an access control editor when a user clicks the Edit button on an access control editor
            page that displays an image of a shield on that Edit button. The image of a shield is displayed when the access control
            editor is launched by a process with a token that lacks permission to save changes to the object being edited.
            </summary>
            <param name="hWnd">The parent window of the access control editor.</param>
            <param name="uPage">
            A value of the SI_PAGE_TYPE enumeration that indicates the page type on which to display the elevated access control editor.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.ISecurityInformation4">
            <summary>
            The ISecurityInformation4 interface enables the resource manager to provide additional information when computing effective
            permissions using the IEffectivePermission2 interface.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.ISecurityInformation4.GetSecondarySecurity(Vanara.PInvoke.AclUI.SECURITY_OBJECT[]@,System.UInt32@)">
            <summary>The GetSecondarySecurity method returns additional security contexts that may impact access to the resource.</summary>
            <param name="pSecurityObjects">
            An array of SECURITY_OBJECT structures that contain the secondary security objects associated with the resources that are set
            on success. The array is owned by the caller and is freed by using the LocalFree function. The pwszName member is also freed
            by using LocalFree. If the cbData or cbData2 members of the SECURITY_OBJECT structure are not zero, then the caller must free
            the corresponding pData or pData2 by using LocalFree. If either of those members are zero, then the corresponding pData and
            pData2 members are owned by the resource manager and must remain valid until the EditSecurity function returns.
            </param>
            <param name="pSecurityObjectCount">The number of security objects in the pSecurityObjects parameter that are set on success.</param>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.ISecurityObjectTypeInfo">
            <summary>
            The ISecurityObjectTypeInfo interface provides a means of determining the source of inherited access control entries (ACEs) in
            discretionary access control lists (DACLs) and system access control lists (SACLs). The access control editor uses this
            information to communicate the inheritance source to the client.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.ISecurityObjectTypeInfo.GetInheritSource(System.Int32,Vanara.PInvoke.PACL,Vanara.PInvoke.AdvApi32.INHERITED_FROM[]@)">
            <summary>
            The GetInheritSource method provides a means of determining the source of inherited access control entries (ACEs) in
            discretionary access control lists (DACLs) and system access control lists (SACLs).
            </summary>
            <param name="si">A SECURITY_INFORMATION structure that represents the security information of the object.</param>
            <param name="pACL">A pointer to an ACL structure that represents the access control list (ACL) of the object.</param>
            <param name="ppInheritArray">
            A pointer to a pointer to an INHERITED_FROM structure that receives an array of INHERITED_FROM structures. The length of this
            array is the same as the number of ACEs in the ACL referenced by pACL. Each INHERITED_FROM entry in ppInheritArray provides
            inheritance information for the corresponding ACE entry in pACL.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.COMBINE_PAGE_ACTIVATION(Vanara.PInvoke.AclUI.SI_PAGE_TYPE,Vanara.PInvoke.AclUI.SI_PAGE_ACTIVATED)">
            <summary>
            Combines the <see cref="T:Vanara.PInvoke.AclUI.SI_PAGE_TYPE"/> and <see cref="T:Vanara.PInvoke.AclUI.SI_PAGE_ACTIVATED"/> types for use in the last parameter of
            <see cref="M:Vanara.PInvoke.AclUI.EditSecurityAdvanced(Vanara.PInvoke.HWND,Vanara.PInvoke.AclUI.ISecurityInformation,Vanara.PInvoke.AclUI.SI_PAGE_TYPE,Vanara.PInvoke.AclUI.SI_PAGE_ACTIVATED)"/> method.
            </summary>
            <param name="pt">The <see cref="T:Vanara.PInvoke.AclUI.SI_PAGE_TYPE"/> value.</param>
            <param name="pa">The <see cref="T:Vanara.PInvoke.AclUI.SI_PAGE_ACTIVATED"/> value.</param>
            <returns>A combined value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.CreateSecurityPage(Vanara.PInvoke.AclUI.ISecurityInformation)">
            <summary>
            The CreateSecurityPage function creates a basic security property page that enables the user to view and edit the access rights
            allowed or denied by the access control entries (ACEs) in an object's discretionary access control list (DACL). Use the
            PropertySheet function or the PSM_ADDPAGE message to add this page to a property sheet.
            </summary>
            <param name="psi">
            A pointer to your implementation of the ISecurityInformation interface. The system calls the interface methods to retrieve
            information about the object being edited and to return the user's input.
            </param>
            <returns>
            If the function succeeds, the function returns a handle to a basic security property page. If the function fails, it returns
            NULL. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.EditSecurity(Vanara.PInvoke.HWND,Vanara.PInvoke.AclUI.ISecurityInformation)">
            <summary>
            The <c>EditSecurity</c> function displays a property sheet that contains a basic security property page. This property page
            enables the user to view and edit the access rights allowed or denied by the ACEs in an object's DACL.
            </summary>
            <param name="hwndOwner">A handle to the window that owns the property sheet. This parameter can be <c>NULL</c>.</param>
            <param name="psi">
            A pointer to your implementation of the ISecurityInformation interface. The system calls the interface methods to retrieve
            information about the object being edited and to return the user's input.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a nonzero value.</para>
            <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>The <c>EditSecurity</c> function calls the CreateSecurityPage function to create a basic security property page.</para>
            <para>
            During the property page initialization, the system calls the ISecurityInformation::GetSecurity and
            ISecurityInformation::SetSecurity methods to determine whether the user has permission to edit the object's security descriptor.
            The system displays an error message if the user does not have permission.
            </para>
            <para>
            The basic security property page can include an <c>Advanced</c> button for displaying the advanced security property sheet. This
            advanced security property sheet can contain three additional property pages that enable the user to view and edit the object's
            DACL, SACL, and owner.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.EditSecurityAdvanced(Vanara.PInvoke.HWND,Vanara.PInvoke.AclUI.ISecurityInformation,System.UInt32)">
            <summary>
            The <c>EditSecurityAdvanced</c> function extends the EditSecurity function to include the security page type when displaying the
            property sheet that contains a basic security property page. This property page enables the user to view and edit the access
            rights allowed or denied by the access control entries (ACEs) in an object's discretionary access control list (DACL).
            </summary>
            <param name="hwndOwner">A handle to the window that owns the property sheet. This parameter can be <c>NULL</c>.</param>
            <param name="psi">
            A pointer to your implementation of the ISecurityInformation interface. The system calls the interface methods to retrieve
            information about the object being edited and to return the user's input.
            </param>
            <param name="uSIPage">
            A value of the SI_PAGE_TYPE enumeration that indicates the page type on which to display the elevated access control editor.
            </param>
            <returns>
            <para>If the function succeeds, the return value is S_OK.</para>
            <para>
            If the function fails, any other <c>HRESULT</c> value indicates an error. For a list of common error codes, see Common HRESULT Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.EditSecurityAdvanced(Vanara.PInvoke.HWND,Vanara.PInvoke.AclUI.ISecurityInformation,Vanara.PInvoke.AclUI.SI_PAGE_TYPE,Vanara.PInvoke.AclUI.SI_PAGE_ACTIVATED)">
            <summary>
            The <c>EditSecurityAdvanced</c> function extends the EditSecurity function to include the security page type when displaying the
            property sheet that contains a basic security property page. This property page enables the user to view and edit the access
            rights allowed or denied by the access control entries (ACEs) in an object's discretionary access control list (DACL).
            </summary>
            <param name="hwndOwner">A handle to the window that owns the property sheet. This parameter can be <c>NULL</c>.</param>
            <param name="psi">
            A pointer to your implementation of the ISecurityInformation interface. The system calls the interface methods to retrieve
            information about the object being edited and to return the user's input.
            </param>
            <param name="pageType">
            A value of the SI_PAGE_TYPE enumeration that indicates the page type on which to display the elevated access control editor.
            </param>
            <param name="pageActivated">A value of the SI_PAGE_ACTIVATED enumeration that indicates the page type to display.</param>
            <returns>
            <para>If the function succeeds, the return value is S_OK.</para>
            <para>
            If the function fails, any other <c>HRESULT</c> value indicates an error. For a list of common error codes, see Common HRESULT Values.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.EFFPERM_RESULT_LIST">
            <summary>The EFFPERM_RESULT_LIST structure lists the effective permissions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.EFFPERM_RESULT_LIST.fEvaluated">
            <summary>Indicates if the effective permissions results have been evaluated.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.EFFPERM_RESULT_LIST.cObjectTypeListLength">
            <summary>The number of elements in both the pObjectTypeList and pGrantedAccessList members.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.EFFPERM_RESULT_LIST.pObjectTypeList">
            <summary>
            A pointer to an array of OBJECT_TYPE_LIST structures that specifies the properties and property sets for which access was evaluated.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.EFFPERM_RESULT_LIST.pGrantedAccessList">
            <summary>
            A pointer to an array of ACCESS_MASK values that specifies the access rights granted for each corresponding object type.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.SECURITY_OBJECT">
            <summary>The SECURITY_OBJECT structure contains the security object information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SECURITY_OBJECT.pwszName">
            <summary>A pointer to the name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SECURITY_OBJECT.pData">
            <summary>A pointer to the security data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SECURITY_OBJECT.cbData">
            <summary>
            The size, in bytes, of the data pointed to by the pData member. This may be zero if pData contains the data, such as when the
            data is an IUnknown interface pointer, a handle, or data specific to the resource manager that can be stored in pData
            directly without a memory allocation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SECURITY_OBJECT.pData2">
            <summary>A pointer to the additional security data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SECURITY_OBJECT.cbData2">
            <summary>
            The size, in bytes, of the data pointed to by the pData2 member. This may be zero if pData2 contains the data, such as when
            the data is an IUnknown interface pointer, a handle, or data specific to the resource manager that can be stored in pData2
            directly without a memory allocation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SECURITY_OBJECT.Id">
            <summary>
            The identifier for the security object's type. If the fWellKnown member is FALSE, then the Id member has no special
            significance other than to help resource managers distinguish it from other classes of security objects. If the fWellKnown
            member is TRUE, then the Id member is one of the following and the entire structure follows the corresponding representation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SECURITY_OBJECT.fWellKnown">
            <summary>TRUE if the security object represents one of the well-know security objects listed in the Id member.</summary>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.SI_OBJECT_INFO">
            <summary>
            The SI_OBJECT_INFO structure is used by the ISecurityInformation::GetObjectInformation method to specify information used to
            initialize the access control editor.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO.dwFlags">
            <summary>A set of bit flags that determine the editing options available to the user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO.hInstance">
            <summary>
            Identifies a module that contains string resources to be used in the property sheet. The
            ISecurityInformation::GetAccessRights and ISecurityInformation::GetInheritTypes methods can specify string resource
            identifiers for display names.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO.pszServerName">
            <summary>
            A pointer to a null-terminated, Unicode string that names the computer on which to look up account names and SIDs. This value
            can be NULL to specify the local computer. The access control editor does not free this pointer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO.pszObjectName">
            <summary>
            A pointer to a null-terminated, Unicode string that names the object being edited. This name appears in the title of the
            advanced security property sheet and any error message boxes displayed by the access control editor. The access control
            editor does not free this pointer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO.pszPageTitle">
            <summary>
            A pointer to a null-terminated, Unicode string used as the title of the basic security property page. This member is ignored
            unless the SI_PAGE_TITLE flag is set in dwFlags. If the page title is not provided, a default title is used. The access
            control editor does not free this pointer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_OBJECT_INFO.guidObjectType">
            <summary>A GUID for the object. This member is ignored unless the SI_OBJECT_GUID flag is set in dwFlags.</summary>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.SI_OBJECT_INFO.#ctor(Vanara.PInvoke.AclUI.SI_OBJECT_INFO_Flags,System.String,System.String,System.String,System.Nullable{System.Guid})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AclUI.SI_OBJECT_INFO"/> struct.</summary>
            <param name="flags">A set of bit flags that determine the editing options available to the user.</param>
            <param name="objectName">Names the object being edited.</param>
            <param name="serverName">Names the computer on which to look up account names and SIDs.</param>
            <param name="pageTitle">The title of the basic security property page.</param>
            <param name="guidObject">The unique identifier for the object.</param>
        </member>
        <member name="P:Vanara.PInvoke.AclUI.SI_OBJECT_INFO.IsContainer">
            <summary>Gets a value indicating whether this instance is container.</summary>
            <value><c>true</c> if this instance is container; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.SI_OBJECT_INFO.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.SID_INFO">
            <summary>
            The SID_INFO structure contains the list of common names corresponding to the SID structures returned by
            ISecurityInformation2::LookupSids. It is a member of the SID_INFO_LIST structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SID_INFO.pSid">
            <summary>A pointer to a SID structure that identifies one of the SIDs passed into ISecurityInformation2::LookupSids.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SID_INFO.pwzCommonName">
            <summary>A pointer to a string containing the common name corresponding to the SID structure specified in pSid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SID_INFO.pwzClass">
            <summary>
            A pointer to a string describing the SID structure as either a user or a group. The possible values of this string are as
            follows: "Computer", "Group", or "User"
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SID_INFO.pwzUPN">
            <summary>
            A pointer to the user principal name (UPN) corresponding to the SID structure specified in pSid. If a UPN has not been
            designated for the SID structure, the value of this parameter is NULL.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.SI_ACCESS">
            <summary>
            Class contains information about an access right or default access mask for a securable object. The
            <see cref="M:Vanara.PInvoke.AclUI.ISecurityInformation.GetAccessRights(System.Guid@,System.Int32,Vanara.PInvoke.AclUI.SI_ACCESS[]@,System.UInt32@,System.UInt32@)"/> method uses this class to specify information that the access control editor
            uses to initialize its property pages.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_ACCESS.pguid">
            <summary>
            A pointer to a GUID structure that identifies the type of object to which the access right or default access mask applies.
            The GUID can identify a property set or property on the object, or a type of child object that can be contained by the
            object. If this member points to GUID_NULL, the access right applies to the object itself.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_ACCESS.mask">
            <summary>
            A bitmask that specifies the access right described by this structure. The mask can contain any combination of standard and
            specific rights, but should not contain generic rights such as GENERIC_ALL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_ACCESS.pszName">
            <summary>A display string that describes the access right.</summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_ACCESS.dwFlags">
            <summary>A set of <see cref="T:Vanara.PInvoke.AdvApi32.INHERIT_FLAGS"/> that indicate where the access right is displayed.</summary>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.SI_ACCESS.#ctor(System.UInt32,System.String,Vanara.PInvoke.AdvApi32.INHERIT_FLAGS,System.Nullable{System.Guid})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AclUI.SI_ACCESS"/> class.</summary>
            <param name="mask">The access mask.</param>
            <param name="name">The display name.</param>
            <param name="flags">The access flags.</param>
            <param name="objType">Type of the object.</param>
        </member>
        <member name="P:Vanara.PInvoke.AclUI.SI_ACCESS.ObjectTypeId">
            <summary>
            The type of object. This member can be <see cref="F:System.Guid.Empty"/>. The GUID corresponds to the InheritedObjectType member of an
            object-specific ACE.
            </summary>
            <value>The object type identifier.</value>
        </member>
        <member name="T:Vanara.PInvoke.AclUI.SI_INHERIT_TYPE">
            <summary>
            Contains information about how access control entries (ACEs) can be inherited by child objects. The
            <see cref="M:Vanara.PInvoke.AclUI.ISecurityInformation.GetInheritTypes(Vanara.PInvoke.AclUI.SI_INHERIT_TYPE[]@,System.UInt32@)"/> method uses this structure to specify display strings that the access control
            editor uses to initialize its property pages.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_INHERIT_TYPE.pguid">
            <summary>
            A pointer to a GUID structure that identifies the type of child object. This member can be a pointer to GUID_NULL. The GUID
            corresponds to the InheritedObjectType member of an object-specific ACE.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_INHERIT_TYPE.dwFlags">
            <summary>
            A set of <see cref="T:Vanara.PInvoke.AdvApi32.INHERIT_FLAGS"/> that indicate the types of ACEs that can be inherited by the
            <see cref="P:Vanara.PInvoke.AclUI.SI_INHERIT_TYPE.ChildObjectTypeId"/>. These flags correspond to the AceFlags member of an ACE_HEADER structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.AclUI.SI_INHERIT_TYPE.pszName">
            <summary>A display string that describes the child object.</summary>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.SI_INHERIT_TYPE.#ctor(Vanara.PInvoke.AdvApi32.INHERIT_FLAGS,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AclUI.SI_INHERIT_TYPE"/> struct.</summary>
            <param name="flags">The inheritance flags.</param>
            <param name="name">The display name.</param>
        </member>
        <member name="M:Vanara.PInvoke.AclUI.SI_INHERIT_TYPE.#ctor(System.Guid,Vanara.PInvoke.AdvApi32.INHERIT_FLAGS,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AclUI.SI_INHERIT_TYPE"/> struct.</summary>
            <param name="childObjectType">Type of the child object.</param>
            <param name="flags">The inheritance flags.</param>
            <param name="name">The display name.</param>
        </member>
        <member name="P:Vanara.PInvoke.AclUI.SI_INHERIT_TYPE.ChildObjectTypeId">
            <summary>
            The type of child object. This member can be <see cref="F:System.Guid.Empty"/>. The GUID corresponds to the InheritedObjectType member
            of an object-specific ACE.
            </summary>
            <value>The child object type identifier.</value>
        </member>
    </members>
</doc>
