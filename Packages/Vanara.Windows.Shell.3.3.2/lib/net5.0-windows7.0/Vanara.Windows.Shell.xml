<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vanara.Windows.Shell</name>
    </assembly>
    <members>
        <member name="T:Vanara.Windows.Shell.BindContext">
            <summary>Wraps the <see cref="T:System.Runtime.InteropServices.ComTypes.IBindCtx"/> COM type.</summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.BindContext"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.#ctor(Vanara.PInvoke.STGM,System.TimeSpan,Vanara.PInvoke.Ole32.BIND_FLAGS)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.BindContext"/> class.</summary>
            <param name="openMode">
            Represents flags that should be used when opening the file that contains the object identified by the moniker.
            </param>
            <param name="timeout">
            Indicates the amount of time (clock time in milliseconds) that the caller specified to complete the binding operation.
            </param>
            <param name="bindFlags">Flags that control aspects of moniker binding operations.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.BindContext.BindFlags">
            <summary>Flags that control aspects of moniker binding operations.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.BindContext.ClassContext">
            <summary>
            The class context, taken from the CLSCTX enumeration, that is to be used for instantiating the object. Monikers typically pass
            this value to the dwClsContext parameter of CoCreateInstance.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.BindContext.Deadline">
            <summary>
            <para>
            The clock time by which the caller would like the binding operation to be completed. This member lets the caller limit the
            execution time of an operation when speed is of primary importance. A value of zero indicates that there is no deadline. Callers
            most often use this capability when calling the IMoniker::GetTimeOfLastChange method, though it can be usefully applied to other
            operations as well. The CreateBindCtx function initializes this field to zero.
            </para>
            <para>
            Typical deadlines allow for a few hundred milliseconds of execution. This deadline is a recommendation, not a requirement;
            however, operations that exceed their deadline by a large amount may cause delays for the end user. Each moniker implementation
            should try to complete its operation by the deadline, or fail with the error MK_E_EXCEEDEDDEADLINE.
            </para>
            <para>
            If a binding operation exceeds its deadline because one or more objects that it needs are not running, the moniker
            implementation should register the objects responsible in the bind context using the IBindCtxV::RegisterObjectParam. The objects
            should be registered under the parameter names "ExceededDeadline", "ExceededDeadline1", "ExceededDeadline2", and so on. If the
            caller later finds the object in the running object table, the caller can retry the binding operation.
            </para>
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.BindContext.Locale">
            <summary>
            The LCID value indicating the client's preference for the locale to be used by the object to which they are binding. A moniker
            passes this value to IClassActivator::GetClassObject.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.BindContext.OpenMode">
            <summary>
            Flags that should be used when opening the file that contains the object identified by the moniker. The binding operation uses
            these flags in the call to IPersistFile::Load when loading the file. If the object is already running, these flags are ignored
            by the binding operation. The default value is STGM_READWRITE.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.BindContext.TrackFlags">
            <summary>
            <para>
            A moniker can use this value during link tracking. If the original persisted data that the moniker is referencing has been
            moved, the moniker can attempt to reestablish the link by searching for the original data though some adequate mechanism. This
            member provides additional information on how the link should be resolved. See the documentation of the fFlags parameter in IShellLink::Resolve.
            </para>
            <para>COM's file moniker implementation uses the shell link mechanism to reestablish links and passes these flags to IShellLink::Resolve.</para>
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.BindContext.WindowHandle">
            <summary>
            A handle to the window that becomes the owner of the elevation UI, if applicable. If <c>hwnd</c> is <c>NULL</c>, COM will call
            the GetActiveWindow function to find a window handle associated with the current thread. This case might occur if the client is
            a script, which cannot fill in a <c>BIND_OPTS3</c> structure. In this case, COM will try to use the window associated with the
            script thread.
            </summary>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.EnumObjectParam">
            <summary>
            Retrieves a pointer to an interface that can be used to enumerate the keys of the bind context's string-keyed table of pointers.
            </summary>
            <returns>A list of keys of the bind context's string-keyed table of pointers.</returns>
            <remarks>
            <para>The keys returned by the enumerator are the ones previously specified in calls to IBindCtxV::RegisterObjectParam.</para>
            <para>Notes to Callers</para>
            <para>
            A bind context maintains a table of interface pointers, each associated with a string key. This enables communication between a
            moniker implementation and the caller that initiated the binding operation. One party can store an interface pointer under a
            string known to both parties so that the other party can later retrieve it from the bind context.
            </para>
            <para>
            In the system implementation of the IBindCtxV interface, this method is not implemented. Therefore, calling this method results
            in a return value of E_NOTIMPL.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.GetObjectParam(System.String)">
            <summary>
            Retrieves an interface pointer to the object associated with the specified key in the bind context's string-keyed table of pointers.
            </summary>
            <param name="pszKey">The bind context string key to be searched for. Key string comparison is case-sensitive.</param>
            <returns>
            An IUnknown interface pointer to the object associated with pszKey. When successful, the implementation calls AddRef. It is the
            caller's responsibility to call Release. If an error occurs, the implementation sets this value to <see langword="null"/>.
            </returns>
            <remarks>
            <para>
            A bind context maintains a table of interface pointers, each associated with a string key. This enables communication between a
            moniker implementation and the caller that initiated the binding operation. One party can store an interface pointer under a
            string known to both parties so that the other party can later retrieve it from the bind context.
            </para>
            <para>
            The pointer this method retrieves must have previously been inserted into the table using the IBindCtxV::RegisterObjectParam method.
            </para>
            <para>Notes to Callers</para>
            <para>
            Objects using monikers to locate other objects can call this method when a binding operation fails to get specific information
            about the error that occurred. Depending on the error, it may be possible to correct the situation and retry the binding
            operation. See IBindCtxV::RegisterObjectParam for more information.
            </para>
            <para>
            Moniker implementations can call this method to handle situations where a caller initiates a binding operation and requests
            specific information. By convention, the implementer should use key names that begin with the string form of the CLSID of a
            moniker class. (See the StringFromCLSID function.)
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.GetRunningObjectTable">
            <summary>
            Retrieves an interface pointer to the running object table (ROT) for the computer on which this bind context is running.
            </summary>
            <returns>
            A IRunningObjectTable for the running object table. If an error occurs, this value is <see langword="null"/>. If the value is
            non- <see langword="null"/>, the implementation calls AddRef on the running table object; it is the caller's responsibility to
            call Release.
            </returns>
            <remarks>
            <para>
            The running object table is a globally accessible table on each computer. It keeps track of all the objects that are currently
            running on the computer.
            </para>
            <para>Notes to Callers</para>
            <para>
            Typically, those implementing a new moniker class (through an implementation of IMoniker interface) call
            <c>GetRunningObjectTable</c>. It is useful to call this method in an implementation of IMoniker::BindToObject or
            IMoniker::IsRunning to check whether an object is currently running. You can also call this method in the implementation of
            IMoniker::GetTimeOfLastChange to learn when a running object was last modified.
            </para>
            <para>
            Moniker implementations should call this method instead of using the <c>GetRunningObjectTable</c> function. This makes it
            possible for future implementations of IBindCtxV to modify binding behavior.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.RegisterObjectBound(System.Object)">
            <summary>Registers an object with the bind context to ensure that the object remains active until the bind context is released.</summary>
            <param name="punk">A pointer to the IUnknown interface on the object that is being registered as bound.</param>
            <remarks>
            <para>
            Those writing a new moniker class (through an implementation of the IMoniker interface) should call this method whenever the
            implementation activates an object. This happens most often in the course of binding a moniker, but it can also happen while
            retrieving a moniker's display name, parsing a display name into a moniker, or retrieving the time that an object was last modified.
            </para>
            <para>
            <c>RegisterObjectBound</c> calls AddRef to create an additional reference to the object. You must, however, still release your
            own copy of the pointer. Calling this method twice for the same object creates two references to that object. You can release a
            reference obtained through a call to this method by calling IBindCtxV::RevokeObjectBound. All references held by the bind
            context are released when the bind context itself is released.
            </para>
            <para>
            Calling <c>RegisterObjectBound</c> to register an object with a bind context keeps the object active until the bind context is
            released. Reusing a bind context in a subsequent binding operation (either for another piece of the same composite moniker or
            for a different moniker) can make the subsequent binding operation more efficient because it doesn't have to reload that object.
            This, however, improves performance only if the subsequent binding operation requires some of the same objects as the original
            one, so you need to balance the possible performance improvement of reusing a bind context against the costs of keeping objects
            activated unnecessarily.
            </para>
            <para>
            IBindCtxV does not provide a method to retrieve a pointer to an object registered using <c>RegisterObjectBound</c>. Assuming the
            object has registered itself with the running object table, moniker implementations can call IRunningObjectTable::GetObject to
            retrieve a pointer to the object.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.RegisterObjectParam(System.String,System.Object)">
            <summary>Associates an object with a string key in the bind context's string-keyed table of pointers.</summary>
            <param name="pszKey">The bind context string key under which the object is being registered. Key string comparison is case-sensitive.</param>
            <param name="punk">
            <para>A pointer to the IUnknown interface on the object that is to be registered.</para>
            <para>The method calls AddRef on the pointer.</para>
            </param>
            <remarks>
            <para>
            A bind context maintains a table of interface pointers, each associated with a string key. This enables communication between a
            moniker implementation and the caller that initiated the binding operation. One party can store an interface pointer under a
            string known to both parties so that the other party can later retrieve it from the bind context.
            </para>
            <para>Binding operations subsequent to the use of this method can use IBindCtxV::GetObjectParam to retrieve the stored pointer.</para>
            <para>Notes to Callers</para>
            <para>
            <c>RegisterObjectParam</c> is useful to those implementing a new moniker class (through an implementation of IMoniker) and to
            moniker clients (those who use monikers to bind to objects).
            </para>
            <para>
            In implementing a new moniker class, you call this method when an error occurs during moniker binding to inform the caller of
            the cause of the error. The key that you would obtain with a call to this method would depend on the error condition. Following
            is a list of common moniker binding errors, describing for each the keys that would be appropriate:
            </para>
            <list type="bullet">
            <item>
            <term>
            MK_E_EXCEEDEDDEADLINEâ€”If a binding operation exceeds its deadline because a given object is not running, you should register
            the object's moniker using the first unused key from the list: "ExceededDeadline", "ExceededDeadline1", "ExceededDeadline2", and
            so on. If the caller later finds the moniker in the running object table, the caller can retry the binding operation.
            </term>
            </item>
            <item>
            <term>
            MK_E_CONNECTMANUALLYâ€”The "ConnectManually" key indicates a moniker whose binding requires assistance from the end user. To
            request that the end user manually connect to the object, the caller can retry the binding operation after showing the moniker's
            display name. Common reasons for this error are that a password is needed or that a floppy needs to be mounted.
            </term>
            </item>
            <item>
            <term>
            E_CLASSNOTFOUNDâ€”The "ClassNotFound" key indicates a moniker whose class could not be found. (The server for the object
            identified by this moniker could not be located.) If this key is used for an OLE compound-document object, the caller can use
            IMoniker::BindToStorage to bind to the object and then try to carry out a <c>Treat As...</c> or <c>Convert To...</c> operation
            to associate the object with a different server. If this is successful, the caller can retry the binding operation.
            </term>
            </item>
            </list>
            <para>
            A moniker client with detailed knowledge of the implementation of the moniker can also call this method to pass private
            information to that implementation.
            </para>
            <para>
            You can define new strings as keys for storing pointers. By convention, you should use key names that begin with the string form
            of the CLSID of the moniker class. (See the StringFromCLSID function.)
            </para>
            <para>
            If the pszKey parameter matches the name of an existing key in the bind context's table, the new object replaces the existing
            object in the table.
            </para>
            <para>When you register an object using this method, the object is not released until one of the following occurs:</para>
            <list type="bullet">
            <item>
            <term>It is replaced in the table by another object with the same key.</term>
            </item>
            <item>
            <term>It is removed from the table by a call to IBindCtxV::RevokeObjectParam.</term>
            </item>
            <item>
            <term>The bind context is released. All registered objects are released when the bind context is released.</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.RevokeObjectParam(System.String)">
            <summary>
            Removes the specified key and its associated pointer from the bind context's string-keyed table of objects. The key must have
            previously been inserted into the table with a call to RegisterObjectParam.
            </summary>
            <param name="pszKey">The bind context string key to be removed. Key string comparison is case-sensitive.</param>
            <remarks>
            <para>
            A bind context maintains a table of interface pointers, each associated with a string key. This enables communication between a
            moniker implementation and the caller that initiated the binding operation. One party can store an interface pointer under a
            string known to both parties so that the other party can later retrieve it from the bind context.
            </para>
            <para>
            This method is used to remove an entry from the table. If the specified key is found, the bind context also releases its
            reference to the object.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.Vanara#PInvoke#Ole32#IBindCtxV#EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
            <summary>
            Retrieves a pointer to an interface that can be used to enumerate the keys of the bind context's string-keyed table of pointers.
            </summary>
            <param name="ppenum">
            The address of an IEnumString* pointer variable that receives the interface pointer to the enumerator. If an error occurs,
            *ppenum is set to <c>NULL</c>. If *ppenum is non- <c>NULL</c>, the implementation calls AddRef on *ppenum; it is the caller's
            responsibility to call Release.
            </param>
            <returns>This method can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
            <remarks>
            <para>The keys returned by the enumerator are the ones previously specified in calls to IBindCtxV::RegisterObjectParam.</para>
            <para>Notes to Callers</para>
            <para>
            A bind context maintains a table of interface pointers, each associated with a string key. This enables communication between a
            moniker implementation and the caller that initiated the binding operation. One party can store an interface pointer under a
            string known to both parties so that the other party can later retrieve it from the bind context.
            </para>
            <para>
            In the system implementation of the IBindCtxV interface, this method is not implemented. Therefore, calling this method results
            in a return value of E_NOTIMPL.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.System#Runtime#InteropServices#ComTypes#IBindCtx#EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
            <summary>
            Retrieves a pointer to an interface that can be used to enumerate the keys of the bind context's string-keyed table of pointers.
            </summary>
            <param name="ppenum">
            The address of an IEnumString* pointer variable that receives the interface pointer to the enumerator. If an error occurs,
            *ppenum is set to <c>NULL</c>. If *ppenum is non- <c>NULL</c>, the implementation calls AddRef on *ppenum; it is the caller's
            responsibility to call Release.
            </param>
            <returns>This method can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
            <remarks>
            <para>The keys returned by the enumerator are the ones previously specified in calls to IBindCtx::RegisterObjectParam.</para>
            <para>Notes to Callers</para>
            <para>
            A bind context maintains a table of interface pointers, each associated with a string key. This enables communication between a
            moniker implementation and the caller that initiated the binding operation. One party can store an interface pointer under a
            string known to both parties so that the other party can later retrieve it from the bind context.
            </para>
            <para>
            In the system implementation of the IBindCtx interface, this method is not implemented. Therefore, calling this method results
            in a return value of E_NOTIMPL.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.Vanara#PInvoke#Ole32#IBindCtxV#GetBindOptions(Vanara.PInvoke.Ole32.BIND_OPTS_V)">
            <summary>Retrieves the binding options stored in this bind context.</summary>
            <param name="pbindopts">
            A pointer to an initialized structure that receives the current binding parameters on return. See BIND_OPTS, BIND_OPTS2, and BIND_OPTS3.
            </param>
            <returns>This method can return the standard return values E_UNEXPECTED and S_OK.</returns>
            <remarks>
            <para>
            A bind context contains a block of parameters that are common to most IMoniker operations and that do not change as the
            operation moves from piece to piece of a composite moniker.
            </para>
            <para>Notes to Callers</para>
            <para>
            You typically call this method if you are writing your own moniker class. (This requires that you implement the IMoniker
            interface.) You call this method to retrieve the parameters specified by the moniker client.
            </para>
            <para>
            You must initialize the structure that is filled in by this method. Before calling this method, you must initialize the
            <c>cbStruct</c> member to the size of the structure.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.System#Runtime#InteropServices#ComTypes#IBindCtx#GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
            <summary>Retrieves the binding options stored in this bind context.</summary>
            <param name="pbindopts">
            A pointer to an initialized structure that receives the current binding parameters on return. See BIND_OPTS, BIND_OPTS2, and BIND_OPTS3.
            </param>
            <returns>This method can return the standard return values E_UNEXPECTED and S_OK.</returns>
            <remarks>
            <para>
            A bind context contains a block of parameters that are common to most IMoniker operations and that do not change as the
            operation moves from piece to piece of a composite moniker.
            </para>
            <para>Notes to Callers</para>
            <para>
            You typically call this method if you are writing your own moniker class. (This requires that you implement the IMoniker
            interface.) You call this method to retrieve the parameters specified by the moniker client.
            </para>
            <para>
            You must initialize the structure that is filled in by this method. Before calling this method, you must initialize the
            <c>cbStruct</c> member to the size of the structure.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.Vanara#PInvoke#Ole32#IBindCtxV#GetObjectParam(System.String,System.Object@)">
            <summary>
            Retrieves an interface pointer to the object associated with the specified key in the bind context's string-keyed table of pointers.
            </summary>
            <param name="pszKey">The bind context string key to be searched for. Key string comparison is case-sensitive.</param>
            <param name="ppunk">
            The address of an IUnknown* pointer variable that receives the interface pointer to the object associated with pszKey. When
            successful, the implementation calls AddRef on *ppunk. It is the caller's responsibility to call Release. If an error occurs,
            the implementation sets *ppunk to <c>NULL</c>.
            </param>
            <returns>If the method succeeds, the return value is S_OK. Otherwise, it is E_FAIL.</returns>
            <remarks>
            <para>
            A bind context maintains a table of interface pointers, each associated with a string key. This enables communication between a
            moniker implementation and the caller that initiated the binding operation. One party can store an interface pointer under a
            string known to both parties so that the other party can later retrieve it from the bind context.
            </para>
            <para>
            The pointer this method retrieves must have previously been inserted into the table using the IBindCtxV::RegisterObjectParam method.
            </para>
            <para>Notes to Callers</para>
            <para>
            Objects using monikers to locate other objects can call this method when a binding operation fails to get specific information
            about the error that occurred. Depending on the error, it may be possible to correct the situation and retry the binding
            operation. See IBindCtxV::RegisterObjectParam for more information.
            </para>
            <para>
            Moniker implementations can call this method to handle situations where a caller initiates a binding operation and requests
            specific information. By convention, the implementer should use key names that begin with the string form of the CLSID of a
            moniker class. (See the StringFromCLSID function.)
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.System#Runtime#InteropServices#ComTypes#IBindCtx#GetObjectParam(System.String,System.Object@)">
            <summary>
            Retrieves an interface pointer to the object associated with the specified key in the bind context's string-keyed table of pointers.
            </summary>
            <param name="pszKey">The bind context string key to be searched for. Key string comparison is case-sensitive.</param>
            <param name="ppunk">
            The address of an IUnknown* pointer variable that receives the interface pointer to the object associated with pszKey. When
            successful, the implementation calls AddRef on *ppunk. It is the caller's responsibility to call Release. If an error occurs,
            the implementation sets *ppunk to <c>NULL</c>.
            </param>
            <returns>If the method succeeds, the return value is S_OK. Otherwise, it is E_FAIL.</returns>
            <remarks>
            <para>
            A bind context maintains a table of interface pointers, each associated with a string key. This enables communication between a
            moniker implementation and the caller that initiated the binding operation. One party can store an interface pointer under a
            string known to both parties so that the other party can later retrieve it from the bind context.
            </para>
            <para>
            The pointer this method retrieves must have previously been inserted into the table using the IBindCtx::RegisterObjectParam method.
            </para>
            <para>Notes to Callers</para>
            <para>
            Objects using monikers to locate other objects can call this method when a binding operation fails to get specific information
            about the error that occurred. Depending on the error, it may be possible to correct the situation and retry the binding
            operation. See IBindCtx::RegisterObjectParam for more information.
            </para>
            <para>
            Moniker implementations can call this method to handle situations where a caller initiates a binding operation and requests
            specific information. By convention, the implementer should use key names that begin with the string form of the CLSID of a
            moniker class. (See the StringFromCLSID function.)
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.Vanara#PInvoke#Ole32#IBindCtxV#GetRunningObjectTable(Vanara.PInvoke.Ole32.IRunningObjectTable@)">
            <summary>
            Retrieves an interface pointer to the running object table (ROT) for the computer on which this bind context is running.
            </summary>
            <param name="pprot">
            The address of a IRunningObjectTable* pointer variable that receives the interface pointer to the running object table. If an
            error occurs, *pprot is set to <c>NULL</c>. If *pprot is non- <c>NULL</c>, the implementation calls AddRef on the running table
            object; it is the caller's responsibility to call Release.
            </param>
            <returns>This method can return the standard return values E_OUTOFMEMORY, E_UNEXPECTED, and S_OK.</returns>
            <remarks>
            <para>
            The running object table is a globally accessible table on each computer. It keeps track of all the objects that are currently
            running on the computer.
            </para>
            <para>Notes to Callers</para>
            <para>
            Typically, those implementing a new moniker class (through an implementation of IMoniker interface) call
            <c>GetRunningObjectTable</c>. It is useful to call this method in an implementation of IMoniker::BindToObject or
            IMoniker::IsRunning to check whether an object is currently running. You can also call this method in the implementation of
            IMoniker::GetTimeOfLastChange to learn when a running object was last modified.
            </para>
            <para>
            Moniker implementations should call this method instead of using the <c>GetRunningObjectTable</c> function. This makes it
            possible for future implementations of IBindCtxV to modify binding behavior.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.System#Runtime#InteropServices#ComTypes#IBindCtx#GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
            <summary>
            Retrieves an interface pointer to the running object table (ROT) for the computer on which this bind context is running.
            </summary>
            <param name="pprot">
            The address of a IRunningObjectTable* pointer variable that receives the interface pointer to the running object table. If an
            error occurs, *pprot is set to <c>NULL</c>. If *pprot is non- <c>NULL</c>, the implementation calls AddRef on the running table
            object; it is the caller's responsibility to call Release.
            </param>
            <returns>This method can return the standard return values E_OUTOFMEMORY, E_UNEXPECTED, and S_OK.</returns>
            <remarks>
            <para>
            The running object table is a globally accessible table on each computer. It keeps track of all the objects that are currently
            running on the computer.
            </para>
            <para>Notes to Callers</para>
            <para>
            Typically, those implementing a new moniker class (through an implementation of IMoniker interface) call
            <c>GetRunningObjectTable</c>. It is useful to call this method in an implementation of IMoniker::BindToObject or
            IMoniker::IsRunning to check whether an object is currently running. You can also call this method in the implementation of
            IMoniker::GetTimeOfLastChange to learn when a running object was last modified.
            </para>
            <para>
            Moniker implementations should call this method instead of using the <c>GetRunningObjectTable</c> function. This makes it
            possible for future implementations of IBindCtx to modify binding behavior.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.Vanara#PInvoke#Ole32#IBindCtxV#RegisterObjectBound(System.Object)">
            <summary>Registers an object with the bind context to ensure that the object remains active until the bind context is released.</summary>
            <param name="punk">A pointer to the IUnknown interface on the object that is being registered as bound.</param>
            <returns>This method can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
            <remarks>
            <para>
            Those writing a new moniker class (through an implementation of the IMoniker interface) should call this method whenever the
            implementation activates an object. This happens most often in the course of binding a moniker, but it can also happen while
            retrieving a moniker's display name, parsing a display name into a moniker, or retrieving the time that an object was last modified.
            </para>
            <para>
            <c>RegisterObjectBound</c> calls AddRef to create an additional reference to the object. You must, however, still release your
            own copy of the pointer. Calling this method twice for the same object creates two references to that object. You can release a
            reference obtained through a call to this method by calling IBindCtxV::RevokeObjectBound. All references held by the bind
            context are released when the bind context itself is released.
            </para>
            <para>
            Calling <c>RegisterObjectBound</c> to register an object with a bind context keeps the object active until the bind context is
            released. Reusing a bind context in a subsequent binding operation (either for another piece of the same composite moniker or
            for a different moniker) can make the subsequent binding operation more efficient because it doesn't have to reload that object.
            This, however, improves performance only if the subsequent binding operation requires some of the same objects as the original
            one, so you need to balance the possible performance improvement of reusing a bind context against the costs of keeping objects
            activated unnecessarily.
            </para>
            <para>
            IBindCtxV does not provide a method to retrieve a pointer to an object registered using <c>RegisterObjectBound</c>. Assuming the
            object has registered itself with the running object table, moniker implementations can call IRunningObjectTable::GetObject to
            retrieve a pointer to the object.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.Vanara#PInvoke#Ole32#IBindCtxV#RegisterObjectParam(System.String,System.Object)">
            <summary>Associates an object with a string key in the bind context's string-keyed table of pointers.</summary>
            <param name="pszKey">The bind context string key under which the object is being registered. Key string comparison is case-sensitive.</param>
            <param name="punk">
            <para>A pointer to the IUnknown interface on the object that is to be registered.</para>
            <para>The method calls AddRef on the pointer.</para>
            </param>
            <returns>This method can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
            <remarks>
            <para>
            A bind context maintains a table of interface pointers, each associated with a string key. This enables communication between a
            moniker implementation and the caller that initiated the binding operation. One party can store an interface pointer under a
            string known to both parties so that the other party can later retrieve it from the bind context.
            </para>
            <para>Binding operations subsequent to the use of this method can use IBindCtxV::GetObjectParam to retrieve the stored pointer.</para>
            <para>Notes to Callers</para>
            <para>
            <c>RegisterObjectParam</c> is useful to those implementing a new moniker class (through an implementation of IMoniker) and to
            moniker clients (those who use monikers to bind to objects).
            </para>
            <para>
            In implementing a new moniker class, you call this method when an error occurs during moniker binding to inform the caller of
            the cause of the error. The key that you would obtain with a call to this method would depend on the error condition. Following
            is a list of common moniker binding errors, describing for each the keys that would be appropriate:
            </para>
            <list type="bullet">
            <item>
            <term>
            MK_E_EXCEEDEDDEADLINEâ€”If a binding operation exceeds its deadline because a given object is not running, you should register
            the object's moniker using the first unused key from the list: "ExceededDeadline", "ExceededDeadline1", "ExceededDeadline2", and
            so on. If the caller later finds the moniker in the running object table, the caller can retry the binding operation.
            </term>
            </item>
            <item>
            <term>
            MK_E_CONNECTMANUALLYâ€”The "ConnectManually" key indicates a moniker whose binding requires assistance from the end user. To
            request that the end user manually connect to the object, the caller can retry the binding operation after showing the moniker's
            display name. Common reasons for this error are that a password is needed or that a floppy needs to be mounted.
            </term>
            </item>
            <item>
            <term>
            E_CLASSNOTFOUNDâ€”The "ClassNotFound" key indicates a moniker whose class could not be found. (The server for the object
            identified by this moniker could not be located.) If this key is used for an OLE compound-document object, the caller can use
            IMoniker::BindToStorage to bind to the object and then try to carry out a <c>Treat As...</c> or <c>Convert To...</c> operation
            to associate the object with a different server. If this is successful, the caller can retry the binding operation.
            </term>
            </item>
            </list>
            <para>
            A moniker client with detailed knowledge of the implementation of the moniker can also call this method to pass private
            information to that implementation.
            </para>
            <para>
            You can define new strings as keys for storing pointers. By convention, you should use key names that begin with the string form
            of the CLSID of the moniker class. (See the StringFromCLSID function.)
            </para>
            <para>
            If the pszKey parameter matches the name of an existing key in the bind context's table, the new object replaces the existing
            object in the table.
            </para>
            <para>When you register an object using this method, the object is not released until one of the following occurs:</para>
            <list type="bullet">
            <item>
            <term>It is replaced in the table by another object with the same key.</term>
            </item>
            <item>
            <term>It is removed from the table by a call to IBindCtxV::RevokeObjectParam.</term>
            </item>
            <item>
            <term>The bind context is released. All registered objects are released when the bind context is released.</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.Vanara#PInvoke#Ole32#IBindCtxV#ReleaseBoundObjects">
            <summary>Releases all pointers to all objects that were previously registered by calls to RegisterObjectBound.</summary>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
            <remarks>
            <para>
            You rarely call this method directly. The system's IBindCtxV implementation calls this method when the pointer to the
            <c>IBindCtxV</c> interface on the bind context is released (the bind context is released). If a bind context is not released,
            all of the registered objects remain active.
            </para>
            <para>
            If the same object has been registered more than once, this method calls the Release method on the object the number of times it
            was registered.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.System#Runtime#InteropServices#ComTypes#IBindCtx#ReleaseBoundObjects">
            <summary>Releases all pointers to all objects that were previously registered by calls to RegisterObjectBound.</summary>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
            <remarks>
            <para>
            You rarely call this method directly. The system's IBindCtx implementation calls this method when the pointer to the
            <c>IBindCtx</c> interface on the bind context is released (the bind context is released). If a bind context is not released, all
            of the registered objects remain active.
            </para>
            <para>
            If the same object has been registered more than once, this method calls the Release method on the object the number of times it
            was registered.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.Vanara#PInvoke#Ole32#IBindCtxV#RevokeObjectBound(System.Object)">
            <summary>Removes the object from the bind context, undoing a previous call to RegisterObjectBound.</summary>
            <param name="punk">A pointer to the IUnknown interface on the object to be removed.</param>
            <returns>
            <para>This method can return the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>The object was released successfully.</term>
            </item>
            <item>
            <term>MK_E_NOTBOUND</term>
            <term>The object was not previously registered.</term>
            </item>
            </list>
            </returns>
            <remarks>You would rarely call this method. It is documented primarily for completeness.</remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.System#Runtime#InteropServices#ComTypes#IBindCtx#RevokeObjectBound(System.Object)">
            <summary>Removes the object from the bind context, undoing a previous call to RegisterObjectBound.</summary>
            <param name="punk">A pointer to the IUnknown interface on the object to be removed.</param>
            <returns>
            <para>This method can return the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>The object was released successfully.</term>
            </item>
            <item>
            <term>MK_E_NOTBOUND</term>
            <term>The object was not previously registered.</term>
            </item>
            </list>
            </returns>
            <remarks>You would rarely call this method. It is documented primarily for completeness.</remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.Vanara#PInvoke#Ole32#IBindCtxV#RevokeObjectParam(System.String)">
            <summary>
            Removes the specified key and its associated pointer from the bind context's string-keyed table of objects. The key must have
            previously been inserted into the table with a call to RegisterObjectParam.
            </summary>
            <param name="pszKey">The bind context string key to be removed. Key string comparison is case-sensitive.</param>
            <returns>
            <para>This method can return the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>The specified key was removed successfully.</term>
            </item>
            <item>
            <term>S_FALSE</term>
            <term>The object was not previously registered.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            A bind context maintains a table of interface pointers, each associated with a string key. This enables communication between a
            moniker implementation and the caller that initiated the binding operation. One party can store an interface pointer under a
            string known to both parties so that the other party can later retrieve it from the bind context.
            </para>
            <para>
            This method is used to remove an entry from the table. If the specified key is found, the bind context also releases its
            reference to the object.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.System#Runtime#InteropServices#ComTypes#IBindCtx#RevokeObjectParam(System.String)">
            <summary>
            Removes the specified key and its associated pointer from the bind context's string-keyed table of objects. The key must have
            previously been inserted into the table with a call to RegisterObjectParam.
            </summary>
            <param name="pszKey">The bind context string key to be removed. Key string comparison is case-sensitive.</param>
            <returns>
            <para>This method can return the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>The specified key was removed successfully.</term>
            </item>
            <item>
            <term>S_FALSE</term>
            <term>The object was not previously registered.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            A bind context maintains a table of interface pointers, each associated with a string key. This enables communication between a
            moniker implementation and the caller that initiated the binding operation. One party can store an interface pointer under a
            string known to both parties so that the other party can later retrieve it from the bind context.
            </para>
            <para>
            This method is used to remove an entry from the table. If the specified key is found, the bind context also releases its
            reference to the object.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.Vanara#PInvoke#Ole32#IBindCtxV#SetBindOptions(Vanara.PInvoke.Ole32.BIND_OPTS_V)">
            <summary>Sets new values for the binding parameters stored in the bind context.</summary>
            <param name="pbindopts">A pointer to a BIND_OPTS, BIND_OPTS2, or BIND_OPTS3 structure containing the binding parameters.</param>
            <returns>This method can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
            <remarks>
            <para>
            A bind context contains a block of parameters that are common to most IMoniker operations. These parameters do not change as the
            operation moves from piece to piece of a composite moniker.
            </para>
            <para>Subsequent binding operations can call IBindCtxV::GetBindOptions to retrieve these parameters.</para>
            <para>Notes to Callers</para>
            <para>This method can be called by moniker clients (those who use monikers to acquire interface pointers to objects).</para>
            <para>
            When you first create a bind context by using the CreateBindCtx function, the fields of the BIND_OPTS structure are initialized
            to the following values:
            </para>
            <para>
            You can use the <c>IBindCtxV::SetBindOptions</c> method to modify these values before using the bind context, if you want values
            other than the defaults.
            </para>
            <para>
            <c>SetBindOptions</c> copies the members of the specified structure, but not the COSERVERINFO structure and the pointers it
            contains. Callers may not free these pointers until the bind context is released.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.BindContext.System#Runtime#InteropServices#ComTypes#IBindCtx#SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
            <summary>Sets new values for the binding parameters stored in the bind context.</summary>
            <param name="pbindopts">A pointer to a BIND_OPTS, BIND_OPTS2, or BIND_OPTS3 structure containing the binding parameters.</param>
            <returns>This method can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
            <remarks>
            <para>
            A bind context contains a block of parameters that are common to most IMoniker operations. These parameters do not change as the
            operation moves from piece to piece of a composite moniker.
            </para>
            <para>Subsequent binding operations can call IBindCtx::GetBindOptions to retrieve these parameters.</para>
            <para>Notes to Callers</para>
            <para>This method can be called by moniker clients (those who use monikers to acquire interface pointers to objects).</para>
            <para>
            When you first create a bind context by using the CreateBindCtx function, the fields of the BIND_OPTS structure are initialized
            to the following values:
            </para>
            <para>
            You can use the <c>IBindCtx::SetBindOptions</c> method to modify these values before using the bind context, if you want values
            other than the defaults.
            </para>
            <para>
            <c>SetBindOptions</c> copies the members of the specified structure, but not the COSERVERINFO structure and the pointers it
            contains. Callers may not free these pointers until the bind context is released.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.Windows.Shell.ControlPanel">
            <summary>Provides a means to open Control Panel items and get their paths.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ControlPanel.IsClassicView">
            <summary>Gets a value indicating whether the most recent Control Panel view was Classic view.</summary>
            <value>
            <see langword="true"/> if the most recent Control Panel view was Classic view; otherwise, <see langword="false"/> for Category view.
            </value>
        </member>
        <member name="M:Vanara.Windows.Shell.ControlPanel.GetPath(Vanara.PInvoke.Shell32.ControlPanelItem)">
            <summary>Gets the path of a Control Panel item.</summary>
            <param name="item">The Control Panel item.</param>
            <returns>The path.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ControlPanel.GetPath(System.Guid)">
            <summary>Gets the path of a Control Panel GUID.</summary>
            <param name="item">The Control Panel GUID.</param>
            <returns>The path.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ControlPanel.GetPath(System.String)">
            <summary>Gets the path of a Control Panel item.</summary>
            <param name="item">The Control Panel item's canonical name.</param>
            <returns>The path.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ControlPanel.Open">
            <summary>Opens the Control Panel.</summary>
            <returns><see langword="true"/> if the Control Panel has been opened. <see langword="false"/> if an error prevented opening.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ControlPanel.Open(Vanara.PInvoke.Shell32.ControlPanelItem,System.String)">
            <summary>Opens the specified Control Panel item.</summary>
            <param name="item">The Control Panel item.</param>
            <param name="page">Optional. The Control Panel page.</param>
            <returns>
            <see langword="true"/> if this item is supported and has been opened. <see langword="false"/> if an error prevented opening or
            the item or page was unsupported on this OS.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">page</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.ControlPanel.Open(System.String,System.String)">
            <summary>Opens the specified Control Panel item.</summary>
            <param name="item">The Control Panel item's canonical name.</param>
            <param name="page">Optional. The Control Panel page.</param>
            <returns>
            <see langword="true"/> if this item is supported and has been opened. <see langword="false"/> if an error prevented opening or
            the item or page was unsupported on this OS.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">page</exception>
        </member>
        <member name="T:Vanara.Windows.Shell.FileUsageType">
            <summary>Constants used to indicate how a file in use is being used.</summary>
            <remarks>
            The interpretation of "playing" or "editing" is left to the application's implementation. Generally, "playing" would refer to a
            media file while "editing" can refer to any file being altered in an application. However, the application itself best knows how to
            map these terms to its actions.
            </remarks>
        </member>
        <member name="F:Vanara.Windows.Shell.FileUsageType.Playing">
            <summary>The file is being played by the process that has it open.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.FileUsageType.Editing">
            <summary>The file is being edited by the process that has it open.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.FileUsageType.Generic">
            <summary>
            The file is open in the process for an unspecified action or an action that does not readily fit into the other two categories.
            </summary>
        </member>
        <member name="T:Vanara.Windows.Shell.FileInUseHandler">
             <summary>
             A handler for applications that open file types that can be opened by other applications. An application's use of this object
             enables Windows Explorer to discover the source of sharing errors, which enables users to address and retry operations that fail due
             to those errors. This object handles registering the file with the Running Object Table (see <see cref="T:Vanara.PInvoke.Ole32.IRunningObjectTable" />). It will revoke
             that registration on disposal or when the <see cref="P:Vanara.Windows.Shell.FileInUseHandler.Registered" /> property is set to <see langword="false"/>.
             </summary>
             <remarks>This object should be created for the duration of use of any file that can be opened by other applications. It's scope should follow
             that of the file handle or file stream.</remarks>
             <example>
               <code title="Example use of FileInUseHandler"><![CDATA[// The following should be taken as example methods within the application that handle opening and closing files.
            private Dictionary<string, (FileStream fileStream, FileInUseHandler inUseHandler)> openFiles =
               new Dictionary<string, (FileStream, FileInUseHandler)>();
            
            private void OpenFile(string filePath)
            {
            	// Create the in-use handler tied to the 'mainForm' of this application.
            	var inUseHandler = new FileInUseHandler(filePath, mainForm, FileUsageType.Editing);
            	// Assign event handler to close this file if requested and allowed.
            	inUseHandler.CloseFile += (s, e) => CloseFile(((FileInUseHandler)s).FilePath);
            	// Assign event handler to prompt the user if another app requests control of this file.
            	inUseHandler.CloseRequested += (s, e) =>
            	   e.Cancel = MessageBox.Show($"Another application has requested that {Path.GetFileName(((FileInUseHandler)s).FilePath)} be closed to allow it to edit. Allow?",
            	   "Close file request", MessageBoxButtons.YesNo) == DialogResult.No;
            	// Capture file name, open file stream and in-use handler.
            	openFiles.Add(filePath, (File.OpenWrite(filePath), inUseHandler));
            }
            
            private void CloseFile(string filePath)
            {
            	// If the file is open, close the stream via disposal, and revoke in-use registration via disposal
            	if (openFiles.TryGetValue(filePath, out var info))
            	{
            		info.fileStream.Dispose();
            		info.inUseHandler.Dispose();
            		openFiles.Remove(filePath);
            	}
            }]]></code>
             </example>
             <seealso cref="T:Vanara.PInvoke.Shell32.IFileIsInUse" />
             <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Vanara.Windows.Shell.FileInUseHandler.#ctor(System.String,System.Windows.Forms.IWin32Window,Vanara.Windows.Shell.FileUsageType)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.FileInUseHandler"/> class.</summary>
            <param name="filePath">The file path.</param>
            <param name="parent">The parent.</param>
            <param name="usageType">Type of the usage.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.FileInUseHandler.Finalize">
            <summary>Finalizes an instance of the <see cref="T:Vanara.Windows.Shell.FileInUseHandler"/> class.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.FileInUseHandler.CloseFile">
            <summary>Occurs after permission has been given to close the file and the file must now be closed.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.FileInUseHandler.CloseRequested">
            <summary>
            Occurs when another application is requesting that the file be closed. If this event is not registered or if in response to this
            event, you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property to <see langword="true"/>, then the requesting application will
            be informed that it cannot take control.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.FileInUseHandler.ActivationWindow">
            <summary>
            Gets or sets the top-level window of the application that is using the file that should be activated when requested. If this
            value is <see langword="null"/>, then the calling application will be told that it cannot activate the file's owning application.
            </summary>
            <value>The activation window.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.FileInUseHandler.FilePath">
            <summary>
            Gets or sets the full path to the file that is in use by this application. Setting this value will revoke any prior file's
            registration in the ROT and register this file there.
            </summary>
            <value>The full path to the file that is in use by this application. This value cannot be <see langword="null"/>.</value>
            <exception cref="T:System.ArgumentNullException">FilePath</exception>
        </member>
        <member name="P:Vanara.Windows.Shell.FileInUseHandler.FileUsageType">
            <summary>Gets or sets a value that indicates how the file in use is being used.</summary>
            <value>The type of the file use.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.FileInUseHandler.Registered">
            <summary>
            Gets or sets a value indicating whether the file specified in <see cref="P:Vanara.Windows.Shell.FileInUseHandler.FilePath"/> is registered in the Running Object Table.
            </summary>
            <value><see langword="true"/> if registered; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.FileInUseHandler.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.FileInUseHandler.Dispose(System.Boolean)">
            <summary>Releases unmanaged and - optionally - managed resources.</summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:Vanara.Windows.Shell.IconLocation">
            <summary>Wraps the icon location string used by some Shell classes.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.IconLocation.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.IconLocation"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.IconLocation.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.IconLocation"/> class.</summary>
            <param name="module">The module file name.</param>
            <param name="resourceIdOrIndex">If this number is positive, this is the index of the resource in the module file. If negative, the absolute value of the number is the resource ID of the icon in the module file.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.IconLocation.Icon">
            <summary>Gets the icon referred to by this instance.</summary>
            <value>The icon.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.IconLocation.TryParse(System.String,Vanara.Windows.Shell.IconLocation@)">
            <summary>Tries to parse the specified string to create a <see cref="T:Vanara.Windows.Shell.IconLocation"/> instance.</summary>
            <param name="value">The string representation in the format of either "ModuleFileName,ResourceIndex" or "ModuleFileName,-ResourceID".</param>
            <param name="loc">The resulting <see cref="T:Vanara.Windows.Shell.IconLocation"/> instance on success.</param>
            <returns><c>true</c> if successfully parsed.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.IconLocation.ToString">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.IndirectResource">
            <summary>Wraps a resource reference used by some Shell classes.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.IndirectResource.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.IndirectResource"/> class.</summary>
            <param name="value">The value of the string.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.IndirectResource.#ctor(System.String,System.Int32,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.IndirectResource"/> class.</summary>
            <param name="module">The module file name.</param>
            <param name="resourceIdOrIndex">
            If this number is positive, this is the index of the resource in the module file. If negative, the absolute value of the number
            is the resource ID of the resource in the module file.
            </param>
            <param name="versionModifier">The version modifier. This value can be, and usually is, <see langword="null"/>.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.IndirectResource.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.IndirectResource"/> class.</summary>
            <param name="packageNameOrPriFile">The package name or package resource index file name.</param>
            <param name="packageLocator">The package locator.</param>
            <exception cref="T:System.ArgumentNullException">packageNameOrPriFile or packageLocator</exception>
            <exception cref="T:System.ArgumentException">Package locator must start with 'ms-resource://' - packageLocator</exception>
        </member>
        <member name="P:Vanara.Windows.Shell.IndirectResource.IsValid">
            <summary>Returns true if this location is valid.</summary>
            <value><c>true</c> if this location is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.IndirectResource.ModuleFileName">
            <summary>Gets the module file name.</summary>
            <value>The module file name.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.IndirectResource.PackageLocator">
            <summary>Gets the resource name used to lookup the resource within a package.</summary>
            <value>The resource lookup name.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.IndirectResource.PackageName">
            <summary>
            Gets the name of the package. The string is extracted from the Resources.pri file stored in the app's root directory of the
            package identified by PackageFullName, using the resource as a locator. The retrieved string is copied to the output buffer and
            the function returns S_OK. The string is extracted based on the app's environment or ResourceContext. Note: This string must
            refer to a package installed for the current user.If it does not, the call will fail.
            </summary>
            <value>The name of the package. Something like "Microsoft.Camera_6.2.8376.0_x64__8wekyb3d8bbwe".</value>
        </member>
        <member name="P:Vanara.Windows.Shell.IndirectResource.PackageResourceIndexFile">
            <summary>
            Gets the package resource index file name. The Package Resource Index (PRI) is a binary format introduced in Windows 8 that
            contains indexed resources or references to resources. The .pri file is bundled as part of an app's package. For more
            information on .pri files, see Creating and retrieving resources in Windows Store apps. The string is extracted from the.pri
            file named, using the resource as a locator.The retrieved string is copied to the output buffer and the function returns S_OK.
            The string is extracted based on the current Shell environment or ResourceContext.
            </summary>
            <value>The package resource index file name. Something like "C:\Program Files\WindowsApps\Microsoft.Camera_6.2.8376.0_x64__8wekyb3d8bbwe\resources.pri".</value>
        </member>
        <member name="P:Vanara.Windows.Shell.IndirectResource.RawValue">
            <summary>Gets the raw value of the string.</summary>
            <value>Returns a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.IndirectResource.ResourceId">
            <summary>Gets or sets the resource index or resource ID.</summary>
            <value>
            If this number is positive, this is the index of the resource in the module file. If negative, the absolute value of the number
            is the resource ID of the icon in the module file.
            </value>
        </member>
        <member name="P:Vanara.Windows.Shell.IndirectResource.VersionModifier">
            <summary>Gets the version modifier. This value is rarely used.</summary>
            <value>The version modifier (e.g. "v2").</value>
        </member>
        <member name="M:Vanara.Windows.Shell.IndirectResource.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.IndirectString">
            <summary>Wraps a string resource reference used by some Shell classes.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.IndirectString.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.IndirectString"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.IndirectString.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.IndirectString"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.IndirectString.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.IndirectString"/> class.</summary>
            <param name="module">The module file name.</param>
            <param name="resourceIdOrIndex">
            If this number is positive, this is the index of the resource in the module file. If negative, the absolute value of the number
            is the resource ID of the string in the module file.
            </param>
        </member>
        <member name="P:Vanara.Windows.Shell.IndirectString.Value">
            <summary>Gets the localized string referred to by this instance.</summary>
            <value>The referenced localized string.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.IndirectString.op_Implicit(Vanara.Windows.Shell.IndirectString)~System.String">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.Windows.Shell.IndirectString"/> to <see cref="T:System.String"/>.</summary>
            <param name="ind">The ind.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.IndirectString.op_Implicit(System.String)~Vanara.Windows.Shell.IndirectString">
            <summary>Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Vanara.Windows.Shell.IndirectString"/>.</summary>
            <param name="s">The s.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.IndirectString.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.IndirectString.TryParse(System.String,Vanara.Windows.Shell.IndirectString@)">
            <summary>Tries to parse the specified string to create a <see cref="T:Vanara.Windows.Shell.IndirectString"/> instance.</summary>
            <param name="value">The string representation in the format of either "ModuleFileName,ResourceIndex" or "ModuleFileName,-ResourceID".</param>
            <param name="loc">The resulting <see cref="T:Vanara.Windows.Shell.IndirectString"/> instance on success.</param>
            <returns><c>true</c> if successfully parsed.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.NativeClipboard">
            <summary>
            Initializes and closes a session using the Clipboard calling <see cref="M:Vanara.PInvoke.User32.OpenClipboard(Vanara.PInvoke.HWND)"/> and then <see cref="M:Vanara.PInvoke.User32.CloseClipboard"/> on
            disposal. This can be called multiple times in nested calls and will ensure the Clipboard is only opened and closed at the highest scope.
            </summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.#ctor(System.Boolean,Vanara.PInvoke.HWND)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.NativeClipboard"/> class.</summary>
            <param name="empty">If set to <see langword="true"/>, <see cref="M:Vanara.PInvoke.User32.EmptyClipboard"/> is called to clear the Clipboard.</param>
            <param name="hWndNewOwner">
            A handle to the window to be associated with the open clipboard. If this parameter is <c>HWND.NULL</c>, the open clipboard is
            associated with the current task.
            </param>
        </member>
        <member name="E:Vanara.Windows.Shell.NativeClipboard.ClipboardUpdate">
            <summary>Occurs when whenever the contents of the Clipboard have changed.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.NativeClipboard.CurrentlySupportedFormats">
            <summary>Retrieves the currently supported clipboard formats.</summary>
            <value>A sequence of the currently supported formats.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.GetClipboardOwner">
            <summary>Retrieves the window handle of the current owner of the clipboard.</summary>
            <returns>
            <para>If the function succeeds, the return value is the handle to the window that owns the clipboard.</para>
            <para>If the clipboard is not owned, the return value is <c>IntPtr.Zero</c>.</para>
            </returns>
            <remarks>
            <para>The clipboard can still contain data even if the clipboard is not currently owned.</para>
            <para>In general, the clipboard owner is the window that last placed data in clipboard.</para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.GetFirstFormatAvailable(System.Int32[])">
            <summary>Retrieves the first available clipboard format in the specified list.</summary>
            <param name="idList">The clipboard formats, in priority order.</param>
            <returns>
            If the function succeeds, the return value is the first clipboard format in the list for which data is available. If the
            clipboard is empty, the return value is 0. If the clipboard contains data, but not in any of the specified formats, the return
            value is –1.
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.GetOpenClipboardWindow">
            <summary>Retrieves the handle to the window that currently has the clipboard open.</summary>
            <returns>
            If the function succeeds, the return value is the handle to the window that has the clipboard open. If no window has the
            clipboard open, the return value is <c>IntPtr.Zero</c>.
            </returns>
            <remarks>
            If an application or DLL specifies a <c>NULL</c> window handle when calling the OpenClipboard function, the clipboard is opened
            but is not associated with a window. In such a case, <c>GetOpenClipboardWindow</c> returns <c>IntPtr.Zero</c>.
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.IsFormatAvailable(System.String)">
            <summary>Determines whether the clipboard contains data in the specified format.</summary>
            <param name="format">The name of a standard or registered clipboard format.</param>
            <returns>If the clipboard format is available, the return value is <see langword="true"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.IsFormatAvailable(System.Int32)">
            <summary>Determines whether the clipboard contains data in the specified format.</summary>
            <param name="id">A standard or registered clipboard format.</param>
            <returns>If the clipboard format is available, the return value is <see langword="true"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.DanagerousGetData(System.Int32)">
            <summary>
            Retrieves data from the clipboard in a specified format. The clipboard must have been opened previously and this pointer cannot
            be used once <see cref="T:Vanara.Windows.Shell.NativeClipboard"/> goes out of scope.
            </summary>
            <param name="formatId">A clipboard format. For a description of the standard clipboard formats, see Standard Clipboard Formats.</param>
            <returns>
            <para>If the function succeeds, the return value is the handle to a clipboard object in the specified format.</para>
            <para>If the function fails, the return value is <c>IntPtr.Zero</c>. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para><c>Caution</c> Clipboard data is not trusted. Parse the data carefully before using it in your application.</para>
            <para>An application can enumerate the available formats in advance by using the EnumClipboardFormats function.</para>
            <para>
            The clipboard controls the handle that the <c>GetClipboardData</c> function returns, not the application. The application should
            copy the data immediately. The application must not free the handle nor leave it locked. The application must not use the handle
            after the <see cref="M:Vanara.Windows.Shell.NativeClipboard.Empty"/> method is called, after <see cref="T:Vanara.Windows.Shell.NativeClipboard"/> is disposed, or after any of the
            <c>Set...</c> methods are called with the same clipboard format.
            </para>
            <para>
            The system performs implicit data format conversions between certain clipboard formats when an application calls the
            <c>GetClipboardData</c> function. For example, if the CF_OEMTEXT format is on the clipboard, a window can retrieve data in the
            CF_TEXT format. The format on the clipboard is converted to the requested format on demand. For more information, see
            Synthesized Clipboard Formats.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.DanagerousGetData(System.String)">
            <summary>
            Retrieves data from the clipboard in a specified format. The clipboard must have been opened previously and this pointer cannot
            be used once <see cref="T:Vanara.Windows.Shell.NativeClipboard"/> goes out of scope.
            </summary>
            <param name="format">A clipboard format. For a description of the standard clipboard formats, see Standard Clipboard Formats.</param>
            <returns>
            <para>If the function succeeds, the return value is the handle to a clipboard object in the specified format.</para>
            <para>If the function fails, the return value is <c>IntPtr.Zero</c>. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para><c>Caution</c> Clipboard data is not trusted. Parse the data carefully before using it in your application.</para>
            <para>An application can enumerate the available formats in advance by using the EnumClipboardFormats function.</para>
            <para>
            The clipboard controls the handle that the <c>GetClipboardData</c> function returns, not the application. The application should
            copy the data immediately. The application must not free the handle nor leave it locked. The application must not use the handle
            after the <see cref="M:Vanara.Windows.Shell.NativeClipboard.Empty"/> method is called, after <see cref="T:Vanara.Windows.Shell.NativeClipboard"/> is disposed, or after any of the
            <c>Set...</c> methods are called with the same clipboard format.
            </para>
            <para>
            The system performs implicit data format conversions between certain clipboard formats when an application calls the
            <c>GetClipboardData</c> function. For example, if the CF_OEMTEXT format is on the clipboard, a window can retrieve data in the
            CF_TEXT format. The format on the clipboard is converted to the requested format on demand. For more information, see
            Synthesized Clipboard Formats.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.Empty">
            <summary>
            Empties the clipboard and frees handles to data in the clipboard. The function then assigns ownership of the clipboard to the
            window that currently has the clipboard open.
            </summary>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.EnumAvailableFormats">
            <summary>Enumerates the data formats currently available on the clipboard.</summary>
            <returns>An enumeration of the data formats currently available on the clipboard.</returns>
            <remarks>
            <para>
            The <c>EnumFormats</c> function enumerates formats in the order that they were placed on the clipboard. If you are copying
            information to the clipboard, add clipboard objects in order from the most descriptive clipboard format to the least descriptive
            clipboard format. If you are pasting information from the clipboard, retrieve the first clipboard format that you can handle.
            That will be the most descriptive clipboard format that you can handle.
            </para>
            <para>
            The system provides automatic type conversions for certain clipboard formats. In the case of such a format, this function
            enumerates the specified format, then enumerates the formats to which it can be converted.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.GetText(System.Windows.Forms.TextDataFormat)">
            <summary>Gets the text from the native Clipboard in the specified format.</summary>
            <param name="format">The format.</param>
            <returns>The string value or <see langword="null"/> if the format is not available.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.SetBinaryData(System.String,System.Byte[])">
            <summary>Places data on the clipboard in a specified clipboard format.</summary>
            <param name="format">The clipboard format. This parameter can be a registered format or any of the standard clipboard formats.</param>
            <param name="data">The binary data in the specified format.</param>
            <exception cref="T:System.ArgumentNullException">data</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.SetBinaryData(System.Int32,System.Byte[])">
            <summary>Places data on the clipboard in a specified clipboard format.</summary>
            <param name="formatId">The clipboard format. This parameter can be a registered format or any of the standard clipboard formats.</param>
            <param name="data">The binary data in the specified format.</param>
            <exception cref="T:System.ArgumentNullException">data</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.SetData``1(System.Int32,``0)">
            <summary>Places data on the clipboard in a specified clipboard format.</summary>
            <param name="formatId">The clipboard format. This parameter can be a registered format or any of the standard clipboard formats.</param>
            <param name="data">The data in the format dictated by <paramref name="formatId"/>.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.SetData``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>Places data on the clipboard in a specified clipboard format.</summary>
            <param name="formatId">The clipboard format. This parameter can be a registered format or any of the standard clipboard formats.</param>
            <param name="values">The data in the format dictated by <paramref name="formatId"/>.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.SetData(System.Int32,System.Collections.Generic.IEnumerable{System.String},Vanara.InteropServices.StringListPackMethod,System.Runtime.InteropServices.CharSet)">
            <summary>Places data on the clipboard in a specified clipboard format.</summary>
            <param name="formatId">The clipboard format. This parameter can be a registered format or any of the standard clipboard formats.</param>
            <param name="values">The list of strings.</param>
            <param name="packing">The packing type for the strings.</param>
            <param name="charSet">The character set to use for the strings.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.SetText(System.String,System.String,System.String)">
            <summary>Sets multiple text types to the Clipboard.</summary>
            <param name="text">The Unicode Text value.</param>
            <param name="htmlText">The HTML text value. If <see langword="null"/>, this format will not be set.</param>
            <param name="rtfText">The Rich Text Format value. If <see langword="null"/>, this format will not be set.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.SetText(System.String,System.Windows.Forms.TextDataFormat)">
            <summary>Sets a specific text type to the Clipboard.</summary>
            <param name="value">The text value.</param>
            <param name="format">The clipboard text format to set.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.SetUrl(System.String,System.String)">
            <summary>Sets a URL with optional title to the clipboard.</summary>
            <param name="url">The URL.</param>
            <param name="title">The title. This value can be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException">url</exception>
        </member>
        <member name="F:Vanara.Windows.Shell.NativeClipboard.MoveableHGlobalMethods.Instance">
            <summary>Gets a static instance of these methods.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.MoveableHGlobalMethods.AllocMem(System.Int32)">
            <summary>Gets a handle to a memory allocation of the specified size.</summary>
            <param name="size">The size, in bytes, of memory to allocate.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.MoveableHGlobalMethods.FreeMem(System.IntPtr)">
            <summary>Frees the memory associated with a handle.</summary>
            <param name="hMem">A memory handle.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.MoveableHGlobalMethods.LockMem(System.IntPtr)">
            <summary>Locks the memory of a specified handle and gets a pointer to it.</summary>
            <param name="hMem">A memory handle.</param>
            <returns>A pointer to the locked memory.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.MoveableHGlobalMethods.ReAllocMem(System.IntPtr,System.Int32)">
            <summary>Gets the reallocation method.</summary>
            <param name="hMem">A memory handle.</param>
            <param name="size">The size, in bytes, of memory to allocate.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.MoveableHGlobalMethods.UnlockMem(System.IntPtr)">
            <summary>Unlocks the memory of a specified handle.</summary>
            <param name="hMem">A memory handle.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.SafeMoveableHGlobalHandle.#ctor(System.IntPtr,Vanara.PInvoke.SizeT,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.NativeClipboard.SafeMoveableHGlobalHandle"/> class.</summary>
            <param name="handle">The handle.</param>
            <param name="size">The size of memory allocated to the handle, in bytes.</param>
            <param name="ownsHandle">if set to <c>true</c> if this class is responsible for freeing the memory on disposal.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.SafeMoveableHGlobalHandle.#ctor(Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.NativeClipboard.SafeMoveableHGlobalHandle"/> class.</summary>
            <param name="size">The size of memory to allocate, in bytes.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">size - The value of this argument must be non-negative</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.SafeMoveableHGlobalHandle.#ctor(System.Byte[])">
            <summary>
            Allocates from unmanaged memory to represent an array of pointers and marshals the unmanaged pointers (IntPtr) to the native
            array equivalent.
            </summary>
            <param name="bytes">Array of unmanaged pointers</param>
            <returns>SafeMoveableHGlobalHandle object to an native (unmanaged) array of pointers</returns>
        </member>
        <member name="P:Vanara.Windows.Shell.NativeClipboard.SafeMoveableHGlobalHandle.Null">
            <summary>Represents a NULL memory pointer.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.NativeClipboard.SafeMoveableHGlobalHandle.Size">
            <summary>Gets or sets the size in bytes of the allocated memory block.</summary>
            <value>The size in bytes of the allocated memory block.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.SafeMoveableHGlobalHandle.CreateFromList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Allocates from unmanaged memory to represent a structure with a variable length array at the end and marshal these structure
            elements. It is the callers responsibility to marshal what precedes the trailing array into the unmanaged memory. ONLY
            structures with attribute StructLayout of LayoutKind.Sequential are supported.
            </summary>
            <typeparam name="T">Type of the trailing array of structures</typeparam>
            <param name="values">Collection of structure objects</param>
            <param name="prefixBytes">Number of bytes preceding the trailing array of structures</param>
            <returns><see cref="T:Vanara.Windows.Shell.NativeClipboard.SafeMoveableHGlobalHandle"/> object to an native (unmanaged) structure with a trail array of structures</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.SafeMoveableHGlobalHandle.CreateFromStringList(System.Collections.Generic.IEnumerable{System.String},Vanara.InteropServices.StringListPackMethod,System.Runtime.InteropServices.CharSet,System.Int32)">
            <summary>Allocates from unmanaged memory sufficient memory to hold an array of strings.</summary>
            <param name="values">The list of strings.</param>
            <param name="packing">The packing type for the strings.</param>
            <param name="charSet">The character set to use for the strings.</param>
            <param name="prefixBytes">Number of bytes preceding the trailing strings.</param>
            <returns>
            <see cref="T:Vanara.Windows.Shell.NativeClipboard.SafeMoveableHGlobalHandle"/> object to an native (unmanaged) array of strings stored using the <paramref
            name="packing"/> model and the character set defined by <paramref name="charSet"/>.
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.SafeMoveableHGlobalHandle.CreateFromStructure``1(``0@)">
            <summary>Allocates from unmanaged memory sufficient memory to hold an object of type T.</summary>
            <typeparam name="T">Native type</typeparam>
            <param name="value">The value.</param>
            <returns><see cref="T:Vanara.Windows.Shell.NativeClipboard.SafeMoveableHGlobalHandle"/> object to an native (unmanaged) memory block the size of T.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.NativeClipboard.SafeMoveableHGlobalHandle.op_Implicit(System.IntPtr)~Vanara.Windows.Shell.NativeClipboard.SafeMoveableHGlobalHandle">
            <summary>Converts an <see cref="T:System.IntPtr"/> to a <see cref="T:Vanara.Windows.Shell.NativeClipboard.SafeMoveableHGlobalHandle"/> where it owns the reference.</summary>
            <param name="ptr">The <see cref="T:System.IntPtr"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.RecycleBin">
            <summary>A static object that represents the system Recycle Bin.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.RecycleBin.Count">
            <summary>Gets the count of the items in the Recycle Bin. Depending on the number of items, this can take some time.</summary>
            <value>The number of items.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.RecycleBin.ShellFolderInstance">
            <summary>Gets the underlying <see cref="T:Vanara.Windows.Shell.ShellFolder"/> instance.</summary>
            <value>The <see cref="T:Vanara.Windows.Shell.ShellFolder"/> instance.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.RecycleBin.Size">
            <summary>Gets the total size of all items in the Recycle Bin.</summary>
            <value>The total size of all items in the Recycle Bin.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.RecycleBin.DeleteToRecycleBin(System.String,System.Boolean)">
            <summary>Deletes the specified file or directory to the Recycle Bin.</summary>
            <param name="path">The full path of the file or directory.</param>
            <param name="hideUI"><see langword="true"/> to hide all user interface interactions; <see langword="false"/> to allow them.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.RecycleBin.DeleteToRecycleBin(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>Deletes the specified files or directories to the Recycle Bin.</summary>
            <param name="paths">The full paths of the file or directory.</param>
            <param name="hideUI"><see langword="true"/> to hide all user interface interactions; <see langword="false"/> to allow them.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.RecycleBin.Empty(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Empties the Recycle Bin.</summary>
            <param name="hideUI"><see langword="true"/> to hide all user interface interactions; <see langword="false"/> to allow them.</param>
            <param name="noConfirmation">
            <see langword="true"/> to indicate that no dialog box confirming the deletion of the objects will be displayed; <see
            langword="false"/> otherwise.
            </param>
            <param name="noSound">if set to <see langword="true"/> no sound will be played when the operation is complete.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.RecycleBin.GetItemFromOriginalPath(System.String)">
            <summary>Gets the <see cref="T:Vanara.Windows.Shell.ShellItem"/> in the Recycle Bin from the path of originally deleted file or directory.</summary>
            <param name="itemPath">The deleted items full original path.</param>
            <returns>
            The <see cref="T:Vanara.Windows.Shell.ShellItem"/> matching the item specified in <paramref name="itemPath"/> or <see langword="null"/> if not found.
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.RecycleBin.GetItems">
            <summary>Gets all the <see cref="T:Vanara.Windows.Shell.ShellItem"/> references at the top level of the Recycle Bin.</summary>
            <returns>A sequence of <see cref="T:Vanara.Windows.Shell.ShellItem"/> objects at the top level of the Recycle Bin.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.RecycleBin.Restore(Vanara.Windows.Shell.ShellItem,System.Boolean)">
            <summary>Restores the specified deleted item to it's original location.</summary>
            <param name="deletedItem">
            The <see cref="T:Vanara.Windows.Shell.ShellItem"/> of the deleted item in the Recycle Bin. This cannot be a reference to an undeleted shell item.
            </param>
            <param name="hideUI"><see langword="true"/> to hide all user interface interactions; <see langword="false"/> to allow them.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.RecycleBin.Restore(System.Collections.Generic.IEnumerable{Vanara.Windows.Shell.ShellItem},System.Boolean)">
            <summary>Restores the specified deleted items to their original location.</summary>
            <param name="deletedItems">
            A sequence of <see cref="T:Vanara.Windows.Shell.ShellItem"/> objects in the Recycle Bin. These cannot be a references to undeleted shell items.
            </param>
            <param name="hideUI"><see langword="true"/> to hide all user interface interactions; <see langword="false"/> to allow them.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.RecycleBin.RestoreAll(System.Boolean)">
            <summary>Restores all items in the Recycle Bin to their original location.</summary>
            <param name="hideUI"><see langword="true"/> to hide all user interface interactions; <see langword="false"/> to allow them.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.Registration.AppRegistration">
             <summary>Represents the registration entries for an application.</summary>
             <example>
             <code title="Register application with associated extensions.">
            using (var appReg = AppRegistration.Register(Application.ExecutablePath, systemWide))
            {
               appReg.SupportedTypes.Add(".doc");
               appReg.SupportedTypes.Add(".txt");
            }
             </code>
             </example>
             <seealso cref="T:Vanara.Windows.Shell.RegBasedSettings"/>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.AppRegistration.AcceptsUrls">
            <summary>
            Gets or sets a value indicating that your application can accept a URL (instead of a file name) on the command line.
            Applications that can open documents directly from the internet, like web browsers and media players, should set this entry.
            <para>
            When the ShellExecuteEx function starts an application and UseUrl is false, ShellExecuteEx downloads the document to a local
            file and invokes the handler on the local copy.
            </para>
            <para>
            For example, if the application has this entry set and a user right-clicks on a file stored on a web server, the Open verb will
            be made available.If not, the user will have to download the file and open the local copy.
            </para>
            <para>
            In Windows Vista and earlier, this entry indicated that the URL should be passed to the application along with a local file
            name, when called via ShellExecuteEx. In Windows 7, it indicates that the application can understand any http or https url that
            is passed to it, without having to supply the cache file name as well.
            </para>
            </summary>
            <value><see langword="true"/> if the application accepts a URL on the command-line; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.AppRegistration.DefaultIcon">
            <summary>
            Gets or sets a value that enables an application to provide a specific icon to represent the application instead of the first
            icon stored in the .exe file.
            </summary>
            <value>The default icon.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.AppRegistration.DontUseDesktopChangeRouter">
            <summary>
            Gets or sets a value indicating whether debugger applications should avoid file dialog deadlocks when debugging the Windows
            Explorer process. Setting DontUseDesktopChangeRouter to <see langword="true"/> produces a slightly less efficient handling of
            the change notifications, however.
            </summary>
            <value><see langword="true"/> if [dont use desktop change router]; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.AppRegistration.DropTarget">
            <summary>
            Gets or sets the CLSID of an object (usually a local server rather than an in-process server) that implements IDropTarget. By
            default, when the drop target is an executable file, and no DropTarget value is provided, the Shell converts the list of dropped
            files into a command-line parameter and passes it to ShellExecuteEx through lpParameters.
            </summary>
            <value>The drop target's CLSID.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.AppRegistration.FriendlyAppName">
            <summary>
            Gets or sets the localizable name to display for an application instead of just the version information appearing, which may not
            be localizable. The association query ASSOCSTR reads this registry entry value and falls back to use the FileDescription name in
            the version information. If that name is missing, the association query defaults to the display name of the file. Applications
            should use ASSOCSTR_FRIENDLYAPPNAME to retrieve this information to obtain the proper behavior.
            </summary>
            <value>The friendly name of the application.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.AppRegistration.FullPath">
            <summary>
            Gets or sets the fully qualified path to the application. The application name provided can be stated with or without its .exe
            extension. If necessary, the ShellExecuteEx function adds the extension when searching App Paths subkey.
            </summary>
            <value>The full path of the application.</value>
            <exception cref="T:System.InvalidOperationException">
            The executable name cannot be changed once set. Only it's directory can be changed.
            </exception>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.AppRegistration.IsHostApp">
            <summary>
            Gets or sets a value indicating that the process is a host process, such as Rundll32.exe or Dllhost.exe, and should not be
            considered for Start menu pinning or inclusion in the Most Frequently Used (MFU) list. When launched with a shortcut that
            contains a non-null argument list or an explicit Application User Model IDs (AppUserModelIDs), the process can be pinned (as
            that shortcut). Such shortcuts are candidates for inclusion in the MFU list.
            </summary>
            <value><see langword="true"/> if this process is a host process; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.AppRegistration.NoOpenWith">
            <summary>
            Gets or sets a value that indicates that no application is specified for opening this file type. Be aware that if an
            OpenWithProgIDs subkey has been set for an application by file type, and the ProgID subkey itself does not also have a
            NoOpenWith entry, that application will appear in the list of recommended or available applications even if it has specified the
            NoOpenWith entry. For more information, see How to Include an Application in the Open With Dialog Box and How to exclude an
            Application from the Open with Dialog Box.
            </summary>
            <value><see langword="true"/> if no application is specified for opening this file type; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.AppRegistration.NoStartPage">
            <summary>
            Gets or sets a value indicating that the application executable and shortcuts should be excluded from the Start menu and from
            pinning or inclusion in the MFU list. This entry is typically used to exclude system tools, installers and uninstallers, and
            readme files.
            </summary>
            <value>
            <see langword="true"/> if this app should be excluded from the Start menu and from pinning or inclusion in the MFU list;
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.AppRegistration.SupportedProtocols">
            <summary>
            Gets or sets a string that contains the URL protocol schemes for a given key. This can contain multiple values to indicate which
            schemes are supported. This string follows the format of <c>scheme1:scheme2</c>. If this list is not empty, <c>file:</c> will be
            added to the string. This protocol is implicitly supported when SupportedProtocols is defined.
            </summary>
            <value>The supported protocols.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.AppRegistration.SupportedTypes">
            <summary>
            Gets or sets the file types that the application supports. Doing so enables the application to be listed in the cascade menu of
            the Open with dialog box.
            </summary>
            <value>The supported files types.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.AppRegistration.TaskbarGroupIcon">
            <summary>
            Gets or sets the icon used to override the taskbar icon. The window icon is normally used for the taskbar. Setting the
            TaskbarGroupIcon entry causes the system to use the icon from the .exe for the application instead.
            </summary>
            <value>The taskbar icon override.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.AppRegistration.UseExecutableForTaskbarGroupIcon">
            <summary>
            Gets or sets a value that determines if the taskbar should use the default icon of this executable if there is no pinnable
            shortcut for this application, and instead of the icon of the window that was first encountered.
            </summary>
            <value><see langword="true"/> if the taskbar should use the default icon of this executable; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.AppRegistration.Verbs">
            <summary>
            Gets the verbs for calling the application from OpenWith. Without a verb definition specified here, the system assumes that the
            application supports CreateProcess, and passes the file name on the command line. This functionality applies to all the verb
            methods, including DropTarget, ExecuteCommand, and Dynamic Data Exchange (DDE).
            </summary>
            <value>The command verbs associated with the app.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.AppRegistration.Open(System.String,System.Boolean,System.Boolean)">
            <summary>Opens the application registration information for the specified application.</summary>
            <param name="fullApplicationPath">The full path of the application executable for which to get settings.</param>
            <param name="systemWide">
            If <see langword="true"/>, register the application system-wide. If <see langword="false"/>, register the application for the
            current user only.
            </param>
            <param name="readOnly">
            If <see langword="true"/>, provides read-only access to the registration; If <see langword="false"/>, the properties can be set
            to update the registration values.
            </param>
            <returns>A <see cref="T:Vanara.Windows.Shell.Registration.AppRegistration"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">fullApplicationPath</exception>
            <exception cref="T:System.InvalidOperationException">Unable to create application key in the 'App Paths' subkey.</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.AppRegistration.Register(System.String,System.Boolean)">
            <summary>Registers the application on Windows 7 or later.</summary>
            <param name="fullApplicationPath">The full path of the application executable for which to get settings.</param>
            <param name="systemWide">
            If <see langword="true"/>, register the application system-wide. If <see langword="false"/>, register the application for the
            current user only.
            </param>
            <returns>A <see cref="T:Vanara.Windows.Shell.Registration.AppRegistration"/> instance to continue definition of application settings.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.AppRegistration.Unregister(System.String,System.Boolean)">
            <summary>Unregisters the application on Windows 7 or later.</summary>
            <param name="fullApplicationPath">The full path of the application executable to unregister.</param>
            <param name="systemWide">
            If <see langword="true"/>, unregister the application system-wide. If <see langword="false"/>, unregister the application for
            the current user only.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.AppRegistration.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.Windows.Shell.Registration.FileTypeAssociation">
            <summary>Manages registry entries related to file types and file associations.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.FileTypeAssociation.ContentType">
            <summary>Gets or sets the Content Type value to the file type's MIME content type.</summary>
            <value>The MIME content type.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.FileTypeAssociation.DefaultProgId">
            <summary>Gets or sets the default value of the extension subkey to the ProgID to which it is linked.</summary>
            <value>The default ProgID for this extension.</value>
            <exception cref="T:System.InvalidOperationException">The specified ProgId is not registered with the system.</exception>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.FileTypeAssociation.Extension">
            <summary>Gets the extension of this file association.</summary>
            <value>The extension.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.FileTypeAssociation.OpenWithProgIds">
            <summary>
            Gets a list of alternate ProgIDs for this file type. The programs for these ProgIDs appear in the Open with menu and are
            available as default Windows Store apps for the file type. Whenever an application takes over this file type by changing the
            default value, it should also add an entry to this list.
            </summary>
            <value>The open with prog ids.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.FileTypeAssociation.PerceivedType">
            <summary>
            Gets or sets the PerceivedType to which the file belongs, if any. This value is not used by Windows versions prior to Windows
            Vista. For more information, see "Perceived Types and Application Registration".
            </summary>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.FileTypeAssociation.Open(System.String,System.Boolean,System.Boolean)">
            <summary>Opens the specified extension for reading or editing.</summary>
            <param name="extension">The file extension to examine. This value must be in the format ".ext".</param>
            <param name="systemWide">
            If <see langword="true"/>, examine the file association system-wide. If <see langword="false"/>, examine the file association
            for the current user only.
            </param>
            <param name="readOnly">
            If <see langword="true"/>, provides read-only access to the registration; If <see langword="false"/>, the properties can be set
            to update the registration values.
            </param>
            <returns>The requested <see cref="T:Vanara.Windows.Shell.Registration.FileTypeAssociation"/> instance.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.FileTypeAssociation.Register(System.String,System.Boolean)">
            <summary>Registers the specified files extension.</summary>
            <param name="extension">The file extension to register. This value must be in the format ".ext".</param>
            <param name="systemWide">
            If <see langword="true"/>, register the file association system-wide. If <see langword="false"/>, register the file association
            for the current user only.
            </param>
            <returns>A <see cref="T:Vanara.Windows.Shell.Registration.FileTypeAssociation"/> instance to continue definition of file extension settings.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.FileTypeAssociation.Unregister(System.String,System.Boolean)">
            <summary>
            <para>Unregisters the file association.</para>
            <note type="warning">Removing a file association can break multiple applications since this will remove all ProgId associations.
            Do this with extreme caution and forethought. Consider just removing the ProgId for your application using <see cref="P:Vanara.Windows.Shell.Registration.FileTypeAssociation.OpenWithProgIds"/>.</note>
            </summary>
            <param name="extension">The file extension to unregister. This value must be in the format ".ext".</param>
            <param name="systemWide">
            If <span class="keyword"><span class="languageSpecificText"><span class="cs">true</span><span class="vb">True</span><span
            class="cpp">true</span></span></span><span class="nu"><span class="keyword">true</span> ( <span class="keyword">True</span> in
            Visual Basic)</span>, unregister the file association system-wide. If <span class="keyword"><span
            class="languageSpecificText"><span class="cs">false</span><span class="vb">False</span><span
            class="cpp">false</span></span></span><span class="nu"><span class="keyword">false</span> ( <span class="keyword">False</span>
            in Visual Basic)</span>, unregister the file association for the current user only.
            </param>
            <exception cref="T:System.InvalidOperationException">Unable to find association key in the registry.</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.FileTypeAssociation.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.Windows.Shell.Registration.RegBasedKeyCollection">
            <summary>A collection of values under a key that is treated as a collection of strings.</summary>
            <seealso cref="T:System.Collections.Generic.ICollection`1"/>
        </member>
        <member name="F:Vanara.Windows.Shell.Registration.RegBasedKeyCollection.key">
            <summary>The base key from which to perform all queries.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.RegBasedKeyCollection.#ctor(Microsoft.Win32.RegistryKey,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.RegBasedSettings"/> class.</summary>
            <param name="key">The key to use as the base key for queries.</param>
            <param name="readOnly">if set to <c>true</c> the supplied <paramref name="key"/> was opened read-only.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.RegBasedKeyCollection.Count">
            <summary>Gets the count.</summary>
            <value>The count.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.Registration.RegBasedKeyCollection.IsReadOnly">
            <summary>Gets or sets a value indicating whether these settings are read-only.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.RegBasedKeyCollection.Add(System.String)">
            <summary>Adds the specified item.</summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.RegBasedKeyCollection.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.RegBasedKeyCollection.Contains(System.String)">
            <summary>Determines whether this instance contains the object.</summary>
            <param name="item">The item.</param>
            <returns><see langword="true"/> if [contains] [the specified item]; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.RegBasedKeyCollection.CopyTo(System.String[],System.Int32)">
            <summary>Copies to.</summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.RegBasedKeyCollection.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.RegBasedKeyCollection.GetEnumerator">
            <summary>Gets the enumerator.</summary>
            <returns></returns>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.RegBasedKeyCollection.Remove(System.String)">
            <summary>Removes the specified item.</summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.RegBasedKeyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets the enumerator.</summary>
            <returns></returns>
        </member>
        <member name="M:Vanara.Windows.Shell.Registration.RegBasedKeyCollection.EnsureWritable">
            <summary>Checks the ReadOnly flag and throws an exception if it is true.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.VerbMultiSelectModel">
            <summary>A value that determines if a user can select a single item, multiple items, or a selection from an item.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.VerbMultiSelectModel.Unset">
            <summary>
            Inferred from the type of verb implementation you have chosen. For COM-based methods (such as DropTarget and ExecuteCommand)
            Player is assumed, and for the other methods Document is assumed.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.VerbMultiSelectModel.Player">
            <summary>Support any number of items.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.VerbMultiSelectModel.Single">
            <summary>Support only a single selection.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.VerbMultiSelectModel.Document">
            <summary>
            Create a top level window for each item. Doing so limits the number of items activated and helps avoid running out of system
            resources if the user opens too many windows.
            </summary>
        </member>
        <member name="T:Vanara.Windows.Shell.VerbPosition">
            <summary>Determines the placement of a verb in a menu.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.VerbPosition.Undefined">
            <summary>The menu position is undefined.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.VerbPosition.Top">
            <summary>The menu should be displayed at the top.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.VerbPosition.Bottom">
            <summary>The menu should be displayed at the bottom.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.VerbSelectionModel">
            <summary>Determines menu location.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.VerbSelectionModel.Item">
            <summary>Specifies an item verb.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.VerbSelectionModel.BackgroundShortcutMenu">
            <summary>Specifies a verb on the background shortcut menu.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.CommandVerb">
            <summary>Encapsulates a shortcut menu verb in the registry.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.AppliesTo">
            <summary>Gets or sets an Advanced Query Syntax (AQS) expression that determines whether the verb is displayed or hidden.</summary>
            <value>The AQS expression that controls visibility.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.AttributeMask">
            <summary>
            Gets or sets the SFGAO value of the bit values of the mask to test to determine whether the verb should be enabled or disabled.
            </summary>
            <value>The attribute mask.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.AttributeValue">
            <summary>Gets or sets the SFGAO value of the bits that are tested to determine whether the verb should be enabled or disabled.</summary>
            <value>The attribute value.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.Command">
            <summary>Gets or sets the command string used to launch the command in a console window or batch (.bat) file.</summary>
            <value>The command string.</value>
            <remarks>
            If any element of the command string contains or might contain spaces, it must be enclosed in quotation marks. Otherwise, if the
            element contains a space, it will not parse correctly. For instance, "My Program.exe" starts the application properly. If you
            use My Program.exe without quotation marks, then the system attempts to launch My with Program.exe as its first command line
            argument. You should always use quotation marks with arguments such as "%1" that are expanded to strings by the Shell, because
            you cannot be certain that the string will not contain a space.
            </remarks>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.CommandStateHandler">
            <summary>Gets or sets the optional CLSID of an object that implments <c>IExplorerCommandState</c>.</summary>
            <value>The command state handler.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.DefaultAppliesTo">
            <summary>Gets or sets an Advanced Query Syntax (AQS) expression that controls which verb is the default.</summary>
            <value>The AQS expression that controls which verb is the default.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.DelegateExecute">
            <summary>
            Gets or sets the optional CLSID value of the inproc extension that handles an excution within Windows Explorer or IE. For
            Windows Explorer, this value should be also assigned to the <see cref="P:Vanara.Windows.Shell.CommandVerb.ExplorerCommandHandler"/> value and exclusively
            associated with a <see cref="P:Vanara.Windows.Shell.CommandVerb.Command"/> value of "%SYSTEMROOT%\Explorer.exe". For IE, this value should be exclusively
            associated with a <see cref="P:Vanara.Windows.Shell.CommandVerb.Command"/> value of <c>"C:\Program Files\Internet Explorer\iexplore.exe" %1</c>.
            </summary>
            <value>The explorer command handler CLSID.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.DisplayName">
            <summary>
            Gets or sets an optional display name associated with them, which is displayed on the shortcut menu instead of the verb string
            itself. For example, the display string for <c>openas</c> is Open With. Like normal menu strings, including an ampersand
            character in the display string allows keyboard selection of the command.
            </summary>
            <value>The display name for the verb.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.DropTarget">
            <summary>Gets or sets the optional CLSID of the object that implements <c>IDropTarget</c>.</summary>
            <value>The drop target handler's CLSID.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.ExplorerCommandHandler">
            <summary>
            Gets or sets the optional CLSID value of the inproc explorer extension that handles this verb's execution. This value should be
            also assigned to the <see cref="P:Vanara.Windows.Shell.CommandVerb.DelegateExecute"/> value and is generally associated with a <see cref="P:Vanara.Windows.Shell.CommandVerb.Command"/> value of "%SYSTEMROOT%\Explorer.exe".
            </summary>
            <value>The explorer command handler CLSID.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.Extended">
            <summary>
            Gets or sets a value that marks the command as extended and will be displayed only when the user right-clicks an object while
            also pressing the SHIFT key.
            </summary>
            <value>
            <see langword="true"/> if command is only displayed only when the user right-clicks an object while also pressing the SHIFT key;
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.HasLUAShield">
            <summary>
            Gets or sets an Advanced Query Syntax (AQS) expression that controls whether a User Account Control (UAC) shield is displayed.
            </summary>
            <value>The AQS expression that controls whether a User Account Control (UAC) shield is displayed.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.ImpliedSelectionModel">
            <summary>Gets or sets a value that determines on which menu the command is displayed.</summary>
            <value>The implied selection model.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.LegacyDisable">
            <summary>
            Gets or sets a value that tells the system that the verb is not an actual verb, but exists solely for the purpose of backward compatibility.
            </summary>
            <value><see langword="true"/> if disabled; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.MUIVerb">
            <summary>Gets or sets a localizable value that is displayed as a menu's text.</summary>
            <value>The menu's text.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.MultiSelectModel">
            <summary>
            Gets or sets a value that determines if a user can select a single item, multiple items, or a selection from an item.
            </summary>
            <value>The multi select model for the menu.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.Name">
            <summary>Gets the text string that is used by the Shell to identify the associated command.</summary>
            <value>The verb name.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.NeverDefault">
            <summary>
            Gets or sets a value that tells the system that this verb can never be displayed as the default verb for this file type.
            </summary>
            <value><see langword="true"/> if menu can never be set as default; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.OnlyInBrowserWindow">
            <summary>Gets or sets a value that tells the system that this verb can only be displayed when in an Explorer window.</summary>
            <value><see langword="true"/> if menu is only to be displayed when in an Explorer window; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.Position">
            <summary>
            Gets or sets a value that is used to place a verb at the top or bottom of the menu. If there are multiple verbs that specify
            this attribute then the last one to do so gets priority
            </summary>
            <value>The verb menu placement.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.ProgrammaticAccessOnly">
            <summary>Gets or sets a value that tells the system that this verb is available for programmatic access only and not displayed.</summary>
            <value><see langword="true"/> if verb is available for programmatic access only and not displayed; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.SeparatorAfter">
            <summary>Gets or sets a value that tells the system to place a separator after this menu item.</summary>
            <value><see langword="true"/> if a separator should be displayed after this menu item; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.SeparatorBefore">
            <summary>Gets or sets a value that tells the system to place a separator before this menu item.</summary>
            <value><see langword="true"/> if a separator should be displayed before this menu item; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.SuppressionPolicy">
            <summary>Gets or sets a value that controls if verb visibility can be suppressed through policy settings.</summary>
            <value>A <see cref="T:Vanara.PInvoke.Shell32.RESTRICTIONS"/> value.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerb.SuppressionPolicyEx">
            <summary>Gets or sets an optional CLSID for a handler that controls if verb visibility can be suppressed through policy settings.</summary>
            <value>The handler's CLSID value.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.CommandVerb.Equals(Vanara.Windows.Shell.CommandVerb)">
            <summary>Determines if another <see cref="T:Vanara.Windows.Shell.CommandVerb"/> is equal to this instance.</summary>
            <param name="other">The other <see cref="T:Vanara.Windows.Shell.CommandVerb"/>.</param>
            <returns><see langword="true"/> if the items are equal; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.CommandVerbDictionary">
            <summary>A dictionary of Command Verbs defined in the Windows Registry.</summary>
            <seealso cref="T:Vanara.Windows.Shell.RegBasedDictionary`1"/>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerbDictionary.DefaultVerb">
            <summary>Gets or sets the default verb.</summary>
            <value>The default verb.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerbDictionary.Keys">
            <summary>Get the filtered list of keys under the base.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.CommandVerbDictionary.Order">
            <summary>Gets or sets the order of the command verbs.</summary>
            <value>The ordered list of command verbs.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.CommandVerbDictionary.Add(System.String,System.String,System.String,System.Boolean)">
            <summary>Adds the specified command verb.</summary>
            <param name="verb">The command verb name.</param>
            <param name="displayName">
            The command verb display name. This is the string shown to the user when requesting a context menu for a shell item.
            </param>
            <param name="command">The command to execute.</param>
            <param name="setAsDefault">if set to <see langword="true"/> set this verb as default.</param>
            <returns>A <see cref="T:Vanara.Windows.Shell.CommandVerb"/> instance which has been added to the registry.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.CommandVerbDictionary.ContainsKey(System.String)">
            <summary>Determines if a specified key is in the filtered list of keys under the base.</summary>
            <param name="verb">The name of the key to check.</param>
            <returns><see langword="true" /> if the key is found; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.CommandVerbDictionary.Remove(System.String)">
            <summary>Removes the specified key from this dictionary and the registry.</summary>
            <param name="verb">The name of the command verb to remove.</param>
            <returns>A value indicating success (<see langword="true"/>) or failure (<see langword="false"/>).</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.CommandVerbDictionary.TryGetValue(System.String,Vanara.Windows.Shell.CommandVerb@)">
            <summary>Tries to get the <see cref="T:Vanara.Windows.Shell.CommandVerb"/> with the name <paramref name="verb"/>.</summary>
            <param name="verb">The verb name.</param>
            <param name="value">On success, the corresponding <see cref="T:Vanara.Windows.Shell.CommandVerb"/> instance; <see langword="null"/> on failure.</param>
            <returns>A value indicating if <paramref name="verb"/> was found.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.ProgId">
             <summary>Represents a programmatic identifier in the registry for an application.</summary>
             <example>
             <code title="Register a ProgId with a verb and associated extension.">
            using (var progId = ProgId.Register("Company.Product.1", "My first product", systemWide))
            {
               progId.Verbs.Add("open", "Open", Application.ExecutablePath);
               progId.FileTypeAssociations.Add(".txt");
            }
             </code>
             </example>
             <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.AllowSilentDefaultTakeOver">
            <summary>
            Gets a value indicating whether to signal that Windows should ignore this ProgID when determining a default handler for a public
            file type. Regardless of whether this value is set, the ProgID continues to appear in the OpenWith shortcut menu and dialog.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.AlwaysShowExt">
            <summary>Overrides one of the folder options that hides the extension of known file types.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.AppUserModelID">
            <summary>
            Gets the application's explicit Application User Model ID (AppUserModelID) if the application uses an explicit AppUserModelID
            and uses either the system's automatically generated Recent or Frequent Jump Lists or provides a custom Jump List. If an
            application uses an explicit AppUserModelID and does not set this value, items will not appear in that application's Jump Lists.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.CLSID">
            <summary>Gets or sets the CLSID of the COM server associated with this ProgId.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.CurVer">
            <summary>Gets or sets the versioned ProgId for this instance.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.DefaultIcon">
            <summary>Gets the default icon to display for file types associated with this ProgID.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.EditFlags">
            <summary>
            Gets flags that control some aspects of the Shell's handling of the file types linked to this ProgID. EditFlags may also limit
            how much the user can modify certain aspects of these file types using a file's property sheet.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.ExtendedTileInfo">
            <summary>Gets or sets the list of properties to show in the listview on extended tiles.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.FileTypeAssociations">
            <summary>A collection of extensions with which this ProgId is associated.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.FriendlyName">
            <summary>
            Gets a friendly name for that ProgID, suitable to display to the user. The use of this entry to hold the friendly name is
            deprecated by the FriendlyTypeName entry on systems running Windows 2000 or later. However, it may be set for backward compatibility.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.FriendlyTypeName">
            <summary>Gets the friendly name for the ProgID, suitable to display to the user.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.FullDetails">
            <summary>Gets or sets the list of all the properties to show in the details page.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.ID">
            <summary>Gets the programmatic identifier.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.InfoTip">
            <summary>
            Gets the brief help message that the Shell displays for this ProgID. This may be a string, a IndirectString, or a PropertyDescriptionList.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.IsShortcut">
            <summary>
            Allows an application to register a file name extension as a shortcut file type. If a file has a file name extension that has
            been registered as a shortcut file type, the system automatically adds the system-defined link overlay icon (a small arrow) to
            the file's icon.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.NeverShowExt">
            <summary>Gets or sets a value indicating that the extension is never to be shown regardless of folder options.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.NoOpen">
            <summary>
            Specifies that the associated ProgId should not be opened by users. The value is presented as a warning to users. Use <see
            cref="F:System.String.Empty"/> to use the system prompt.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.PreviewDetails">
            <summary>Gets or sets the list of properties to display in the preview pane.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.PreviewTitle">
            <summary>Gets or sets the one or two properties to display in the preview pane title section.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.TileInfo">
            <summary>Gets or sets the list of properties to show in the listview on tiles.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ProgId.Verbs">
            <summary>Gets the command verbs associated with this ProgID.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ProgId.Open(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ProgId"/> class.</summary>
            <param name="progId">The programmatic identifier string.</param>
            <param name="readOnly">
            If <see langword="true"/>, provides read-only access to the registration; If <see langword="false"/>, the properties can be set
            to update the registration values.
            </param>
            <param name="autoLoadVersioned">
            if set to <c>true</c> automatically load a referenced versioned ProgId instead of the specified ProgId.
            </param>
            <param name="systemWide">
            If <see langword="true"/>, open the ProgId for system-wide use. If <see langword="false"/>, open the ProgId for the current user only.
            </param>
            <returns>The requested <see cref="T:Vanara.Windows.Shell.ProgId"/> instance.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ProgId.Register(System.String,System.String,System.Boolean)">
            <summary>Registers the programmatic identifier (ProgId).</summary>
            <param name="progId">
            The key name for the ProgId. The proper format of a ProgID key name is [Vendor or Application].[Component].[Version], separated
            by periods and with no spaces, as in Word.Document.6. The Version portion is optional but strongly recommended.
            </param>
            <param name="friendlyName">
            The friendly name for this ProgID, suitable to display to the user. The use of this entry to hold the friendly name is
            overridden by the FriendlyTypeName entry on systems running Windows 2000 or later.
            </param>
            <param name="systemWide">
            If <see langword="true"/>, register the ProgId system-wide. If <see langword="false"/>, register the ProgId for the current user only.
            </param>
            <returns>A <see cref="T:Vanara.Windows.Shell.ProgId"/> instance to continue definition of ProgId settings.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ProgId.Unregister(System.String,System.Boolean,System.Boolean)">
            <summary>Unregisters the ProgID.</summary>
            <param name="progId">The key for the ProgID. The function will succeed even if this value does not exists.</param>
            <param name="withFileExt">If set to <see langword="true"/>, also remove all associated registered file extensions.</param>
            <param name="systemWide">
            If <see langword="true"/>, register the ProgId system-wide. If <see langword="false"/>, register the ProgId for the current user only.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.ProgId.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.Windows.Shell.FileTypeCollection">
            <summary>A virtual collection of file types associated with a ProgId in the Windows Registry.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.FileTypeCollection.Count">
            <summary>Gets the count.</summary>
            <value>The count.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.FileTypeCollection.IsReadOnly">
            <summary>Gets or sets a value indicating whether these settings are read-only.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.FileTypeCollection.IsSystemWide">
            <summary>Gets or sets a value indicating whether these settings are read-only.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.FileTypeCollection.Add(System.String)">
            <summary>Adds the specified item.</summary>
            <param name="ext">The extension to associate.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.FileTypeCollection.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.FileTypeCollection.Contains(System.String)">
            <summary>Determines whether this instance contains the object.</summary>
            <param name="item">The item.</param>
            <returns><see langword="true"/> if [contains] [the specified item]; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.FileTypeCollection.CopyTo(System.String[],System.Int32)">
            <summary>Copies to.</summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.FileTypeCollection.GetEnumerator">
            <summary>Gets the enumerator.</summary>
            <returns></returns>
        </member>
        <member name="M:Vanara.Windows.Shell.FileTypeCollection.Remove(System.String)">
            <summary>Removes the specified item.</summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Windows.Shell.FileTypeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets the enumerator.</summary>
            <returns></returns>
        </member>
        <member name="M:Vanara.Windows.Shell.FileTypeCollection.EnsureWritable">
            <summary>Checks the ReadOnly flag and throws an exception if it is true.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.RegBasedDictionary`1">
            <summary>A virtual dictionary that is based on values in the Windows Registry.</summary>
            <typeparam name="T">Type used to capture multiple values within the registry.</typeparam>
            <seealso cref="T:Vanara.Collections.VirtualReadOnlyDictionary`2"/>
        </member>
        <member name="F:Vanara.Windows.Shell.RegBasedDictionary`1.readOnly">
            <summary>Read-only flag.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.RegBasedDictionary`1.key">
            <summary>The base registry key for this dictionary.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.RegBasedDictionary`1.#ctor(Microsoft.Win32.RegistryKey,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.RegBasedDictionary`1"/> class.</summary>
            <param name="baseKey">The base registry key.</param>
            <param name="readOnly">if set to <see langword="true"/> render this dictionary read-only.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.RegBasedDictionary`1.Keys">
            <summary>Get the filtered list of keys under the base.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.RegBasedDictionary`1.ContainsKey(System.String)">
            <summary>Determines if a specified key is in the filtered list of keys under the base.</summary>
            <param name="key">The name of the key to check.</param>
            <returns><see langword="true"/> if the key is found; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.RegBasedDictionary`1.SubKeyFilter(System.String)">
            <summary>
            Returns a value that indicates if the provided <paramref name="keyName"/> value should be included in the list of available keys.
            </summary>
            <param name="keyName">Name of the key.</param>
            <returns><see langword="true"/> if <paramref name="keyName"/> is an included key; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.RegBasedSettings">
            <summary>Base class for registry based settings.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.RegBasedSettings.key">
            <summary>The base key from which to perform all queries.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.RegBasedSettings.#ctor(Microsoft.Win32.RegistryKey,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.RegBasedSettings"/> class.</summary>
            <param name="key">The key to use as the base key for queries.</param>
            <param name="readOnly">if set to <c>true</c> the supplied <paramref name="key"/> was opened read-only.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.RegBasedSettings.IsSystemWide">
            <summary>Gets a value indicating whether this instance is system wide.</summary>
            <value><see langword="true"/> if this instance is system wide; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.RegBasedSettings.ReadOnly">
            <summary>Gets or sets a value indicating whether these settings are read-only.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.RegBasedSettings.Equals(Vanara.Windows.Shell.RegBasedSettings)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.RegBasedSettings.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.RegBasedSettings.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.RegBasedSettings.System#IComparable{Vanara#Windows#Shell#RegBasedSettings}#CompareTo(Vanara.Windows.Shell.RegBasedSettings)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.RegBasedSettings.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.RegBasedSettings.EnsureWritable">
            <summary>Checks the ReadOnly flag and throws an exception if it is true.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.RegBasedSettings.ToggleKeyValue(System.String,System.Boolean)">
            <summary>Toggles the value identified by having a named subkey present.</summary>
            <param name="name">The name of the subkey.</param>
            <param name="set">if set to <c>true</c>, creates a subkey named <paramref name="name"/>; otherwise deletes that subkey.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.RegBasedSettings.ToggleValue(System.String,System.Boolean)">
            <summary>Toggles the value identified by having a named value present.</summary>
            <param name="name">The name of the value.</param>
            <param name="set">if set to <c>true</c>, creates a value named <paramref name="name"/>; otherwise deletes that value.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.RegBasedSettings.UpdateKeyValue(System.String,System.String,System.String)">
            <summary>Updates the value identified by having a named subkey with its default value set.</summary>
            <param name="name">The name of the subkey.</param>
            <param name="value">The value of the default value.</param>
            <param name="deleteIfValue">The value that, if equal to <paramref name="value"/>, causes the removal of the subkey.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.RegBasedSettings.UpdateValue``1(System.String,``0,Microsoft.Win32.RegistryValueKind,``0)">
            <summary>Updates the value identified by having a named value.</summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="name">The name of the value.</param>
            <param name="value">The value of the value.</param>
            <param name="valueKind">Kind of the value.</param>
            <param name="deleteIfValue">The value that, if equal to <paramref name="value"/>, causes the removal of the value.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellAssociation">
            <summary>Represents a Shell file association defined in the Windows Registry. Wraps <see cref="T:Vanara.PInvoke.ShlwApi.IQueryAssociations"/>.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellAssociation.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellAssociation"/> class.</summary>
            <param name="ext">The file extension. This should be in the ".ext" format.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.FileAssociations">
            <summary>Gets all the file associations defined for the system.</summary>
            <value>Returns a <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> value.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.AppIconReference">
            <summary>
            The icon reference of the app associated with the file type or URI scheme. This is configured by users in their default program settings.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.AppId">
            <summary>
            The AppUserModelID of the app associated with the file type or URI scheme. This is configured by users in their default program settings.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.AppPublisher">
            <summary>
            The publisher of the app associated with the file type or URI scheme. This is configured by users in their default program settings.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.ContentType">
            <summary>
            Introduced in Internet Explorer 6. Describes a general type of MIME file association, such as image and bmp, so that
            applications can make general assumptions about a specific file type.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.DefaultIcon">
            <summary>
            Introduced in Internet Explorer 6. Returns the path to the icon resources to use by default for this association. Positive
            numbers indicate an index into the dll's resource table, while negative numbers indicate a resource ID. An example of the syntax
            for the resource is "c:\myfolder\myfile.dll,-1".
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.Extension">
            <summary>The extension string.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.FriendlyAppName">
            <summary>The friendly name of an executable file.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.FriendlyDocName">
            <summary>The friendly name of a document type.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.Handlers">
            <summary>Gets a list of file name extension handlers.</summary>
            <value>The handlers for this association.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.InfoTip">
            <summary>
            Corresponds to the InfoTip registry value. Returns an info tip for an item, or list of properties in the form of an
            IPropertyDescriptionList from which to create an info tip, such as when hovering the cursor over a file name. The list of
            properties can be parsed with PSGetPropertyDescriptionListFromString.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.ProgId">
            <summary>
            The ProgID provided by the app associated with the file type or URI scheme. This if configured by users in their default program settings.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.QuickTip">
            <summary>
            Introduced in Internet Explorer 6. Corresponds to the QuickTip registry value. Same as ASSOCSTR_INFOTIP, except that it always
            returns a list of property names in the form of an IPropertyDescriptionList. The difference between this value and
            ASSOCSTR_INFOTIP is that this returns properties that are safe for any scenario that causes slow property retrieval, such as
            offline or slow networks. Some of the properties returned from ASSOCSTR_INFOTIP might not be appropriate for slow property
            retrieval scenarios. The list of properties can be parsed with PSGetPropertyDescriptionListFromString.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.ShellExtension">
            <summary>
            Introduced in Internet Explorer 6. For an object that has a Shell extension associated with it, you can use this to retrieve the
            CLSID of that Shell extension object by passing a string representation of the IID of the interface you want to retrieve as the
            parameter of IQueryAssociations::GetString. For example, if you want to retrieve a handler that implements the IExtractImage
            interface, you would specify "{BB2E617C-0920-11d1-9A0B-00C04FC2D6C1}", which is the IID of IExtractImage.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.SupportedUriProtocols">
            <summary>Introduced in Windows 8.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.TileInfo">
            <summary>
            Introduced in Internet Explorer 6. Corresponds to the TileInfo registry value. Contains a list of properties to be displayed for
            a particular file type in a Windows Explorer window that is in tile view. This is the same as ASSOCSTR_INFOTIP, but, like
            ASSOCSTR_QUICKTIP, it also returns a list of property names in the form of an IPropertyDescriptionList. The list of properties
            can be parsed with PSGetPropertyDescriptionListFromString.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.Verbs">
            <summary>Gets the command verbs for this file association.</summary>
            <value>Returns a <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> value.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellAssociation.CreateFromAppExeName(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellAssociation"/> class based on the supplied executable name.</summary>
            <param name="appExeName">The full path of the application executable.</param>
            <returns>A <see cref="T:Vanara.Windows.Shell.ShellAssociation"/> instance if <paramref name="appExeName"/> exists; <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellAssociation.CreateFromCLSID(System.Guid)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellAssociation"/> class based on the supplied CLSID.</summary>
            <param name="classId">The CLSID.</param>
            <returns>A <see cref="T:Vanara.Windows.Shell.ShellAssociation"/> instance if <paramref name="classId"/> exists; <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellAssociation.CreateFromProgId(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellAssociation"/> class based on the supplied programmatic identifier (ProgId).
            </summary>
            <param name="progId">The ProgId.</param>
            <returns>A <see cref="T:Vanara.Windows.Shell.ShellAssociation"/> instance if <paramref name="progId"/> exists; <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellAssociation.FromFileExtension(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellAssociation"/> class based on the supplied file extension.</summary>
            <param name="ext">The file extension. This should be in the ".ext" format.</param>
            <returns>A <see cref="T:Vanara.Windows.Shell.ShellAssociation"/> instance if <paramref name="ext"/> exists; <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellAssociation.GetData(Vanara.PInvoke.ShlwApi.ASSOCDATA,System.String)">
            <summary>Searches for and retrieves file or protocol association-related binary data from the registry.</summary>
            <param name="data">The ASSOCDATA value that specifies the type of data that is to be returned.</param>
            <param name="extra">
            An optional string with information about the location of the data. It is normally set to a Shell verb such as open. Set this
            parameter to <see langword="null"/> if it is not used.
            </param>
            <returns>A value that, when this method returns successfully, receives the requested data value.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellAssociation.GetKey(Vanara.PInvoke.ShlwApi.ASSOCKEY,System.String)">
            <summary>Searches for and retrieves a file or protocol association-related key from the registry.</summary>
            <param name="key">The ASSOCKEY value that specifies the type of key that is to be returned.</param>
            <param name="extra">
            An optional string with information about the location of the key. It is normally set to a Shell verb such as open. Set this
            parameter to <see langword="null"/> if it is not used.
            </param>
            <returns>A handle to the resulting registry key.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellAssociation.GetString(Vanara.PInvoke.ShlwApi.ASSOCSTR,System.String)">
            <summary>Searches for and retrieves a file or protocol association-related string from the registry.</summary>
            <param name="astr">An ASSOCSTR value that specifies the type of string that is to be returned.</param>
            <param name="extra">
            An optional string with information about the location of the string. It is typically set to a Shell verb such as open. Set this
            parameter to <see langword="null"/> if it is not used.
            </param>
            <returns>
            A string used to return the requested string. If there are no results for this value, <see langword="null"/> is returned.
            </returns>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellAssociation.ShellAssociationHandler">
            <summary>Represents a handler (executable) for a <see cref="T:Vanara.Windows.Shell.ShellAssociation"/>.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.ShellAssociationHandler.IconLocation">
            <summary>Retrieves the location of the icon associated with the application.</summary>
            <value>
            An <see cref="P:Vanara.Windows.Shell.ShellAssociation.ShellAssociationHandler.IconLocation"/> instance that contains the path and the index of the icon within the resource file for the
            application's icon.
            </value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.ShellAssociationHandler.IsRecommended">
            <summary>Indicates whether the application is registered as a recommended handler for the queried file type.</summary>
            <value><see langword="true"/> if this instance is recommended; otherwise, <see langword="false"/>.</value>
            <remarks>
            <para>
            Applications that register themselves as handlers for particular file types can specify whether they are recommended
            handlers. This has no effect on the actual behavior of the applications when launched. It is simply provided as a hint to
            the user and a value that the UI can utilize programmatically, if desired. For example, the Shell's <c>Open With</c> dialog
            separates entries into <c>Recommended Programs</c> and <c>Other Programs</c>.
            </para>
            <para>
            Note that program recommendations may change over time. One example is provided when the user chooses an application from
            the <c>Other Programs</c> of the <c>Open With</c> dialog to open a particular file type. That may cause the Shell to
            "promote" that application to recommended status for that file type. Because the recommended status may change over time,
            applications should not cache this value, but query it each time it is needed.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.ShellAssociationHandler.Name">
            <summary>Retrieves the full path and file name of the executable file associated with the file type.</summary>
            <value>A string that contains the full path of the file, including the file name.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellAssociation.ShellAssociationHandler.UIName">
            <summary>Retrieves the display name of an application.</summary>
            <value>A string that contains the display name of the application.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellAssociation.ShellAssociationHandler.Equals(Vanara.PInvoke.Shell32.IAssocHandler)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellAssociation.ShellAssociationHandler.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellAssociation.ShellAssociationHandler.Invoke(Vanara.Windows.Shell.ShellItem[])">
            <summary>Directly invokes the associated handler.</summary>
            <param name="items">A sequence of selected items on which to invoke the handler.</param>
            <remarks>
            <para>
            IAssocHandler objects are typically used to populate an <c>Open With</c> menu. When one of those menu items is selected,
            this method is called to launch the chosen application.
            </para>
            <para>Invoke and CreateInvoker</para>
            <para>
            The IDataObject used by these methods can represent either a single file or a selection of multiple files. Not all
            applications support the multiple file option. The applications that do support that scenario might impose other
            restrictions, such as the number of files that can be opened simultaneously, or the acceptable combination of file types.
            </para>
            <para>
            Therefore, an application often must determine whether the handler supports the selection before trying to invoke the
            handler. For example, an application might enable a menu item only if it has verified that the selection in question was
            supported by that handler.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellAssociation.ShellAssociationHandler.MakeDefault(System.String)">
            <summary>Sets an application as the default application for this file type.</summary>
            <param name="description">
            <para>A string that contains the display name of the application.</para>
            </param>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellRegistrar">
            <summary>Contains static methods used to register and unregister shell items in the Windows Registry.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellRegistrar.Applications">
            <summary>Gets a dictionary of registered applications in the current system.</summary>
            <value>The dictionary of registered applications.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellRegistrar.FileTypeAssociations">
            <summary>Gets a dictionary of registered file type associations in the current system.</summary>
            <value>The dictionary of file type associations.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellRegistrar.ProgIds">
            <summary>Gets a dictionary of registered ProgId's in the current system.</summary>
            <value>The dictionary of ProgId values.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellRegistrar.ShellAssociations">
            <summary>Gets a dictionary of registered shell associations in the current system.</summary>
            <value>The dictionary of shell associations.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellRegistrar.CLSID(System.Type)">
            <summary>Gets the CLSID for the specified type.</summary>
            <param name="type">The type.</param>
            <returns>The CLSID value for the type. Calls <see cref="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)"/> to get the value.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellRegistrar.IsRegisteredAsLocalServer``1(System.Reflection.Assembly,System.Boolean,System.Nullable{System.Guid})">
            <summary>Determines if the specified type is registered as a COM Local Server.</summary>
            <typeparam name="TComObject">The type of the COM object.</typeparam>
            <param name="assembly">
            The assembly used to get the full path of the executable. If this value is <see langword="null"/>, then the assembly of
            <typeparamref name="TComObject"/> will be used.
            </param>
            <param name="systemWide">
            If set to <see langword="true"/>, registration is checked in HKLM; otherwise it is registered for the user only in HKCU.
            </param>
            <param name="appId">The AppId to relate to this CLSID. If <see langword="null"/>, the CLSID value will be used.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellRegistrar.UnregisterLocalServer``1(System.Boolean,System.Nullable{System.Guid})">
            <summary>Unregisters the COM Local Server.</summary>
            <typeparam name="TComObject">The type of the COM object.</typeparam>
            <param name="systemWide">
            If set to <see langword="true"/>, the COM object is unregistered system-wide from HKLM; otherwise it is unregistered for the
            user only in HKCU.
            </param>
            <param name="appId">The AppId to relate to this CLSID. If <see langword="null"/>, the CLSID value will be used.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellDataObject">
            <summary>Shell extended <see cref="T:System.Windows.Forms.DataObject"/>.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataObject.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellDataObject"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataObject.#ctor(System.Object)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellDataObject"/> class and adds the specified object to it.</summary>
            <param name="data">The data to store.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataObject.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellDataObject"/> class and adds the specified object in the specified format.
            </summary>
            <param name="format">
            The format of the specified data. See <see cref="T:System.Windows.Forms.DataFormats"/> for predefined formats.
            </param>
            <param name="data">The data to store.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataObject.#ctor(Vanara.Windows.Shell.ShellItem[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellDataObject"/> class.</summary>
            <param name="items">A list of ShellItem instances.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellDataObject.InDragLoop">
            <summary>This format identifier is used by a data object to indicate whether it is in a drag-and-drop loop.</summary>
            <remarks>
            Some drop targets might call IDataObject::GetData and attempt to extract data while the object is still within the drag-and-drop
            loop. Fully rendering the object for each such occurrence might cause the drag cursor to stall. If the data object supports
            CFSTR_INDRAGLOOP, the target can instead use that format to check the status of the drag-and-drop loop and avoid memory
            intensive rendering of the object until it is actually dropped. The formats that are memory intensive to render should still be
            included in the FORMATETC enumerator and in calls to IDataObject::QueryGetData. If the data object does not set
            CFSTR_INDRAGLOOP, it should act as if the value is set to zero.
            </remarks>
            <value><see langword="true"/> if the data object is within a drag-and-drop loop; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellDataObject.PreferredDropEffect">
            <summary>
            <para>
            This value is used by a drop source to specify whether its preferred method of data transfer is move or copy. A drop target
            requests this format by calling the data object's IDataObject::GetData method. This value is set to <see
            cref="F:System.Windows.Forms.DragDropEffects.Move"/> if a move operation is preferred or <see cref="F:System.Windows.Forms.DragDropEffects.Copy"/> if a copy operation is preferred.
            </para>
            <para>
            This feature is used when a source can support either a move or copy operation. It uses the CFSTR_PREFERREDDROPEFFECT format to
            communicate its preference to the target. Because the target is not obligated to honor the request, the target must call the
            source's IDataObject::SetData method with a CFSTR_PERFORMEDDROPEFFECT format to tell the data object which operation was
            actually performed.
            </para>
            <para>
            With a delete-on-paste operation, the CFSTR_PREFERREDDROPFORMAT format is used to tell the target whether the source did a cut
            or copy. With a drag-and-drop operation, you can use CFSTR_PREFERREDDROPFORMAT to specify the Shell's action. If this format is
            not present, the Shell performs a default action, based on context. For instance, if a user drags a file from one volume and
            drops it on another volume, the Shell's default action is to copy the file. By including a CFSTR_PREFERREDDROPFORMAT format in
            the data object, you can override the default action and explicitly tell the Shell to copy, move, or link the file. If the user
            chooses to drag with the right button, CFSTR_PREFERREDDROPFORMAT specifies the default command on the drag-and-drop shortcut
            menu. The user is still free to choose other commands on the menu.
            </para>
            <para>
            Before Microsoft Internet Explorer 4.0, an application indicated that it was transferring shortcut file types by setting
            FD_LINKUI in the dwFlags member of the FILEDESCRIPTOR structure. Targets then had to use a potentially time-consuming call to
            IDataObject::GetData to find out if the FD_LINKUI flag was set. Now, the preferred way to indicate that shortcuts are being
            transferred is to use the CFSTR_PREFERREDDROPEFFECT format set to DROPEFFECT_LINK. However, for backward compatibility with
            older systems, sources should still set the FD_LINKUI flag.
            </para>
            </summary>
            <value>Specifies whether its preferred method of data transfer is move or copy.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellDataObject.TargetClsid">
            <summary>
            <para>This format identifier is used by a target to provide its CLSID to the source.</para>
            <para>
            This format is used primarily to allow objects to be deleted by dragging them to the Recycle Bin. When an object is dropped in
            the Recycle Bin, the source's IDataObject::SetData method is called with a CFSTR_TARGETCLSID format set to the Recycle Bin's
            CLSID (CLSID_RecycleBin). The source can then delete the original object.
            </para>
            </summary>
            <value>The CLSID.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataObject.GetData(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataObject.GetData(System.String,System.Int32)">
            <summary>Retrieves the data associated with the specified data format at the specified index.</summary>
            <param name="format">
            The format of the data to retrieve. See <see cref="T:System.Windows.Forms.DataFormats"></see> for predefined formats.
            </param>
            <param name="index">The index of the data to retrieve.</param>
            <returns>An object containing the raw data for the specified data format at the specified index.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataObject.GetFileNameMap">
            <summary>
            This is used when a group of files in CF_HDROP format is being renamed as well as transferred. The data consists of an STGMEDIUM
            structure that contains a global memory object. The structure's hGlobal member points to a double null-terminated character
            array. This array contains a new name for each file, in the same order that the files are listed in the accompanying CF_HDROP
            format. The format of the character array is the same as that used by CF_HDROP to list the transferred files.
            </summary>
            <returns>A list of strings containing a name for each file.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataObject.GetShellIdList">
             <summary>
             <para>
             This format identifier is used when transferring the locations of one or more existing namespace objects. It is used in much the
             same way as CF_HDROP, but it contains PIDLs instead of file system paths. Using PIDLs allows the CFSTR_SHELLIDLIST format to
             handle virtual objects as well as file system objects. The data is an STGMEDIUM structure that contains a global memory object.
             The structure's hGlobal member points to a CIDA structure.
             </para>
             <para>
             The aoffset member of the CIDA structure is an array containing offsets to the beginning of the ITEMIDLIST structure for each
             PIDL that is being transferred. To extract a particular PIDL, first determine its index. Then, add the aoffset value that
             corresponds to that index to the address of the CIDA structure.
             </para>
             <para>
             The first element of aoffset contains an offset to the fully qualified PIDL of a parent folder. If this PIDL is empty, the
             parent folder is the desktop. Each of the remaining elements of the array contains an offset to one of the PIDLs to be
             transferred. All of these PIDLs are relative to the PIDL of the parent folder.
             </para>
             <para>
             The following two macros can be used to retrieve PIDLs from a CIDA structure. The first takes a pointer to the structure and
             retrieves the PIDL of the parent folder. The second takes a pointer to the structure and retrieves one of the other PIDLs,
             identified by its zero-based index.
             </para>
             <code lang="cpp">#define GetPIDLFolder(pida) (LPCITEMIDLIST)(((LPBYTE)pida)+(pida)-&gt;aoffset[0])
            #define GetPIDLItem(pida, i) (LPCITEMIDLIST)(((LPBYTE)pida)+(pida)-&gt;aoffset[i+1])</code>
             <note type="note">The value that is returned by these macros is a pointer to the PIDL's ITEMIDLIST structure. Since these
             structures vary in length, you must determine the end of the structure by walking through each of the ITEMIDLIST structure's
             SHITEMID structures until you reach the two-byte NULL that marks the end.</note>
             </summary>
             <returns>A list of strings containing a name for each file.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellFileDescriptor">
            <summary>
            Describes the properties of a file that is being copied by means of the clipboard during a Microsoft ActiveX drag-and-drop operation.
            </summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileDescriptor.#ctor(System.IO.FileInfo)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellFileDescriptor"/> class.</summary>
            <param name="fileInfo">The file information.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileDescriptor.IconSize">
            <summary>The width and height of the file icon.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileDescriptor.Info">
            <summary>Gets the file information.</summary>
            <value>The file information.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileDescriptor.IsShortcut">
            <summary>Treat the operation as a shortcut.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileDescriptor.ScreenPosition">
            <summary>The screen coordinates of the file object.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileDescriptor.ShowProgressUI">
            <summary>progress indicator is shown with drag-and-drop operations.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileDescriptor.TypeIdClsid">
            <summary>The file type identifier.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellDataTable">
            <summary>Represents a <see cref="T:System.Data.DataTable"/> that is populated asynchronously with information about shell items.</summary>
            <seealso cref="T:System.Data.DataTable"/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataTable.#ctor(System.Collections.Generic.IEnumerable{Vanara.Windows.Shell.ShellItem})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellDataTable"/> class with a list of shell items.</summary>
            <param name="items">The items for which to collect information.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataTable.#ctor(Vanara.Windows.Shell.ShellFolder,Vanara.Windows.Shell.FolderItemFilter)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellDataTable"/> class with the items from a shell folder.</summary>
            <param name="folder">The folder whose items are to be retrieved.</param>
            <param name="filter">The filter to determine which child items of the folder are enumerated.</param>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellDataTable.AllFastRowsAdded">
            <summary>Occurs when all rows have been added in a call to populate the table with their fast properties.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellDataTable.TableLoaded">
            <summary>Occurs when all rows have been added in a call to populate the table with all (fast and slow) properties.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellDataTable.DefaultColumns">
            <summary>Gets the columns that should be on by default in Details view.</summary>
            <value>The default columns.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataTable.GetColumnAlignment(System.Data.DataColumn)">
            <summary>Gets a column's visual alignment.</summary>
            <param name="column">The column to check.</param>
            <returns>The suggested alignment of the column when displayed.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataTable.GetColumnPropertyKey(System.Data.DataColumn)">
            <summary>Gets the column property key.</summary>
            <param name="column">The column to check.</param>
            <returns>The property key associated with the column.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataTable.GetColumnState(System.Data.DataColumn)">
            <summary>Gets the state of the column.</summary>
            <param name="column">The column to check.</param>
            <returns>A value describing how the column values should be treated.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataTable.GetPIDL(System.Data.DataRow)">
            <summary>Gets the PIDL for the row.</summary>
            <param name="row">The row to check.</param>
            <returns>The PIDL from the row.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataTable.IsColumnSlow(System.Data.DataColumn)">
            <summary>Determines whether the specified column takes longer to retrieve.</summary>
            <param name="column">The column to check.</param>
            <returns><see langword="true"/> if the column takes longer to retrieve; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataTable.PopulateTableAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>Populates the table with all the requested shell items.</summary>
            <param name="columns">The names of the columns to populate.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataTable.PopulateTableAsync(System.Collections.Generic.IEnumerable{Vanara.PInvoke.Ole32.PROPERTYKEY},System.Threading.CancellationToken)">
            <summary>Populates the table with all the requested shell items.</summary>
            <param name="columns">The PROPERTYKEY values of the columns to populate.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataTable.PopulateTableAsync(System.Collections.Generic.IEnumerable{System.Data.DataColumn},System.Threading.CancellationToken)">
            <summary>Populates the table with all the requested shell items.</summary>
            <param name="columns">The columns to populate.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDataTable.RefreshAsync(System.Threading.CancellationToken)">
            <summary>Refreshes the data table. If columns have not been previously provided, the default columns are used.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.ComClassFactory">
            <summary>An implementation of <see cref="T:Vanara.PInvoke.Ole32.IClassFactory"/> to be used in conjunction with <see cref="T:Vanara.Windows.Shell.IComObject"/> derivatives.</summary>
            <seealso cref="T:Vanara.PInvoke.Ole32.IClassFactory"/>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Vanara.Windows.Shell.ComClassFactory.#ctor(Vanara.Windows.Shell.IComObject,Vanara.PInvoke.Ole32.CLSCTX,Vanara.PInvoke.Ole32.REGCLS)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ComClassFactory"/> class.</summary>
            <param name="punkObject">The COM object that is to be registered as a class object and queried for interfaces.</param>
            <param name="classContext">The context within which the COM object is to be run.</param>
            <param name="classUse">Indicates how connections are made to the class object.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ComClassFactory.Resume">
            <summary>
            Resumes activation requests for class objects using <see cref="M:Vanara.PInvoke.Ole32.CoResumeClassObjects"/>. Must use
            <see cref="F:Vanara.PInvoke.Ole32.REGCLS.REGCLS_SUSPENDED"/> in the constructor.
            </summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ComClassFactory.Vanara#PInvoke#Ole32#IClassFactory#CreateInstance(System.Object,System.Guid@,System.Object@)">
            <summary>Creates an uninitialized object.</summary>
            <param name="pUnkOuter">
            If the object is being created as part of an aggregate, specify a pointer to the controlling IUnknown interface of the aggregate.
            Otherwise, this parameter must be <c>NULL</c>.
            </param>
            <param name="riid">
            A reference to the identifier of the interface to be used to communicate with the newly created object. If pUnkOuter is
            <c>NULL</c>, this parameter is generally the IID of the initializing interface; if pUnkOuter is non- <c>NULL</c>, <paramref name="riid"/>
            must be IID_IUnknown.
            </param>
            <param name="ppv">
            The address of pointer variable that receives the interface pointer requested in <paramref name="riid"/>. Upon successful return, *ppvObject
            contains the requested interface pointer. If the object does not support the interface specified in <paramref name="riid"/>, the implementation must
            set *ppvObject to <c>NULL</c>.
            </param>
            <returns>
            <para>
            This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>The specified object was created.</term>
            </item>
            <item>
            <term>CLASS_E_NOAGGREGATION</term>
            <term>The pUnkOuter parameter was non-NULL and the object does not support aggregation.</term>
            </item>
            <item>
            <term>E_NOINTERFACE</term>
            <term>The object that ppvObject points to does not support the interface identified by <paramref name="riid"/>.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ComClassFactory.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ComClassFactory.Vanara#PInvoke#Ole32#IClassFactory#LockServer(System.Boolean)">
            <summary>Locks an object application open in memory. This enables instances to be created more quickly.</summary>
            <param name="fLock">If <c>TRUE</c>, increments the lock count; if <c>FALSE</c>, decrements the lock count.</param>
            <returns>This method can return the standard return values E_OUTOFMEMORY, E_UNEXPECTED, E_FAIL, and S_OK.</returns>
            <remarks>
            <c>IClassFactory::LockServer</c> controls whether an object's server is kept in memory. Keeping the application alive in memory
            allows instances to be created more quickly.
            </remarks>
        </member>
        <member name="T:Vanara.Windows.Shell.IComObject">
            <summary>Exposed methods from <see cref="T:Vanara.Windows.Shell.ComObject"/>.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.IComObject.QueryInterface(System.Guid@)">
            <summary>Creates an uninitialized object.</summary>
            <param name="riid">
            A reference to the identifier of the interface to be used to communicate with the newly created object. This parameter is
            generally the IID of the initializing interface.
            </param>
            <returns>
            The interface pointer requested in <paramref name="riid"/>. If the object does not support the interface specified in
            <paramref name="riid"/>, the implementation must return <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.IComObject.QuitMessageLoop(System.Int32)">
            <summary>Quits the message loop by sending PostQuitMessage.</summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.IComObject.Run(System.TimeSpan)">
            <summary>Runs the message loop.</summary>
            <param name="timeout">
            The time span after which the message loop will be terminated. If this value equals TimeSpan.Zero or is not specified, the
            message loop will run until the <see cref="M:Vanara.Windows.Shell.IComObject.QuitMessageLoop(System.Int32)"/> method is called or the message loop receives a quit message.
            </param>
        </member>
        <member name="T:Vanara.Windows.Shell.ComObject">
            <summary>
            Base class for all COM objects which handles calling AddRef and Release for the assembly, connection to IClassFactory, implements
            IObjectWithSite, using an internal message loop, and a mechanism to issue a non-blocking call to itself. Once implemented, you only
            need to implement your own interfaces. The IClassFactory implementation can get any derived interfaces through casting for calls to
            its QueryInterface method. If you want more control, override the QueryInterface method in this class.
            </summary>
            <remarks>See <see cref="T:Vanara.Windows.Shell.ShellDropTarget"/> for an example of how to use this class to create a local COM server.</remarks>
            <seealso cref="T:System.IDisposable"/>
            <seealso cref="T:Vanara.PInvoke.Ole32.IObjectWithSite"/>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObject.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ComObject"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObject.#ctor(Vanara.PInvoke.Ole32.CLSCTX,Vanara.PInvoke.Ole32.REGCLS)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ComObject"/> class.</summary>
            <param name="classContext">The context within which the COM object is to be run.</param>
            <param name="classUse">Indicates how connections are made to the class object.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.ComObject.Site">
            <summary>Gets or sets the site exposed by <see cref="T:Vanara.PInvoke.Ole32.IObjectWithSite"/>.</summary>
            <value>The site object.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObject.CancelTimeout">
            <summary>
            Cancels the timeout specified in the <see cref="M:Vanara.Windows.Shell.ComObject.Run(System.TimeSpan)"/> method. This should be called when the application knows that it wants to
            keep running, for example when it receives the incoming call to invoke the verb.
            </summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObject.QueryInterface(System.Guid@)">
            <summary>Creates an uninitialized object.</summary>
            <param name="riid">
            A reference to the identifier of the interface to be used to communicate with the newly created object. This parameter is
            generally the IID of the initializing interface.
            </param>
            <returns>
            The interface pointer requested in <paramref name="riid"/>. If the object does not support the interface specified in
            <paramref name="riid"/>, the implementation must return <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObject.QueueNonBlockingCallback(System.Action{System.Object},System.Object)">
            <summary>
            Queues a non-blocking callback. This is useful in situations where a method cannot block an implemented method but further
            processing is needed. For example, IDropTarget::DragDrop and IExecuteCommand::Execute.
            </summary>
            <param name="callback">The callback method.</param>
            <param name="tag">An optional object that will be passed to the callback.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObject.QuitMessageLoop(System.Int32)">
            <summary>Quits the message loop by sending PostQuitMessage.</summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObject.Run(System.TimeSpan)">
            <summary>Runs the message loop.</summary>
            <param name="timeout">
            The time span after which the message loop will be terminated. If this value equals TimeSpan.Zero or is not specified, the
            message loop will run until the <see cref="M:Vanara.Windows.Shell.ComObject.QuitMessageLoop(System.Int32)"/> method is called or the message loop receives a quit message.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObject.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObject.Vanara#PInvoke#Ole32#IObjectWithSite#GetSite(System.Guid@,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObject.Vanara#PInvoke#Ole32#IObjectWithSite#SetSite(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObject.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellCommand">
            <summary>
            Wraps the functionality of IInitializeCommand. When deriving, handling the <see cref="E:Vanara.Windows.Shell.ShellCommand.InitializeCommand"/> event is optional.
            </summary>
            <seealso cref="T:Vanara.Windows.Shell.ComObject"/>
            <seealso cref="T:Vanara.PInvoke.Shell32.IInitializeCommand"/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellCommand.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellCommand"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellCommand.#ctor(Vanara.PInvoke.Ole32.CLSCTX,Vanara.PInvoke.Ole32.REGCLS)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellCommand"/> class.</summary>
            <param name="classContext">The context within which the COM object is to be run.</param>
            <param name="classUse">Indicates how connections are made to the class object.</param>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellCommand.InitializeCommand">
            <summary>Occurs when the shell command is initialized.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellCommand.CommandName">
            <summary>Gets the name of the command returned by <c>IInitializeCommand.Initialize</c>.</summary>
            <value>
            The name of the command as found in the registry. This value is <see langword="null"/> until <c>IInitializeCommand.Initialize</c>
            is called by the host.
            </value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellCommand.Properties">
            <summary>Gets the properties exposed through <c>IInitializeCommand.Initialize</c>.</summary>
            <value>
            Gets a <see cref="T:Vanara.Windows.Shell.PropertyBag"/> instance. This value is <see langword="null"/> until <c>IInitializeCommand.Initialize</c> is
            called by the host.
            </value>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellCommand.Vanara#PInvoke#Shell32#IInitializeCommand#Initialize(System.String,Vanara.PInvoke.OleAut32.IPropertyBag)">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellDropTarget">
             <summary>
             COM object that implements IDropTarget. Solves race problem on drop and simplifies interface calls. All IDropTarget methods call
             their equivalent On[MethodName] equivalents. To specialize their handling, simply override the On[MethodName] method or hook an event
             to the corresponding event.
             </summary>
             <remarks>
             This class provides an easy means of creating a COM based out-of-process DropTarget.
             <list type="number">
             <item>Create a .NET application project.</item>
             <item>Delete the Program.cs file that includes the Main method.</item>
             <item>Create a new class and derive it from <see cref="T:Vanara.Windows.Shell.ShellDropTarget"/> with the attributes in the example below.</item>
             <item>Ensure the project is built as "X86".</item>
             </list>
             <code title="Example" lang="cs">[Guid("&lt;Your GUID here&gt;"), ClassInterface(ClassInterfaceType.None)]
            public class MyDropTarget : ShellDropTarget
            {
               // In your constructor, be sure to override the DragEnter and DragDrop events and set the effect you desire.
               public MyDropTarget() : base()
               {
                  // Setting the effect to Copy here ensure we continue to get drag/drop messages
                  DragEnter += (s, e) =&gt; e.Effect = DragDropEffects.Copy;
            
                  DragDrop += MyDragDrop;
               }
            
               // This event handler for DragDrop should never hold up the shell. To accommodate a non-blocking response,
               // use the 'QueueNonBlockingCallback' method which uses PostThreadMessage to run a delegate as shown below.
               private void MyDragDrop(object sender, DragEventArgs e)
               {
                  // Setting the effect to None here ends drag/drop messages
                  e.Effect = DragDropEffects.None;
                  // Notice we're passing in the DragEventArgs.Data property that contains the shell item array from the Shell.
                  QueueNonBlockingCallback(DisplayData, e.Data);
               }
            
               // This delegate will get run outside of the Shell's calling path and can display a UI or perform any other
               // function on the list of shell items passed to it.
               private void DisplayData(object ido)
               {
                  // *** Replace with your functionality ***
                  using (var shia = ShellItemArray.FromDataObject(ido as DataObject))
                  {
                     var szMsg = $"Found {shia.Count} item(s): " + string.Join(", ", shia.Select(i =&gt; i.Name));
                     MessageBox.Show(szMsg, "MyDropTarget");
                  }
                  // Don't fail to call QuitMessageLoop once you're done processing the Shell call.
                  QuitMessageLoop();
               }
            
               // This is the main thread of the application. When called from the Shell, it will append the -embedding argument to indicate that
               // a message loop needs to start running and the COM server registered. All that is accomplished by calling the 'Run' method
               // on your new class.
               [STAThread]
               private static void Main(string[] args)
               {
                  // *** Replace with your ProgID, name and display name ***
                  const string progID = "txtfile";
                  const string verbDisplayName = "DropTarget Verb Sample";
                  const string verbName = "DropTargetVerb";
            
                  var arg = args.Length &gt; 0 ? args[0].TrimStart('-', '/').ToLowerInvariant() : null;
                  switch (arg)
                  {
                     // Handle a call from the Shell launching this out-of-proc server
                     case "embedding":
                        new MyDropTarget().Run(TimeSpan.FromSeconds(30));
                        break;
            
                     // Unregister this out-of-proc server from handling the DropTarget. This can be omitted if done by an installer.
                     case "unregister":
                        using (var progid = new ProgId(progID, false))
                           progid.Verbs.Remove(verbName);
                        ShellRegistrar.UnregisterLocalServer&lt;MyDropTarget&gt;(false);
                        break;
            
                     // Register this out-of-proc server to handle the DropTarget. This can be omitted if done by an installer.
                     default:
                        ShellRegistrar.RegisterLocalServer&lt;MyDropTarget&gt;("MyTestDropTarget", systemWide: false);
                        using (var progid = new ProgId(progID, false))
                        using (var verb = progid.Verbs.Add(verbName, verbDisplayName))
                        {
                           verb.DropTarget = Marshal.GenerateGuidForType(typeof(MyDropTarget));
                           verb.NeverDefault = true;
                        }
                        break;
                  }
               }
            }</code></remarks>
             <seealso cref="T:Vanara.Windows.Shell.ComObject"/>
             <seealso cref="T:Vanara.PInvoke.Ole32.IDropTarget"/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDropTarget.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellDropTarget"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDropTarget.#ctor(Vanara.PInvoke.Ole32.CLSCTX,Vanara.PInvoke.Ole32.REGCLS)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellDropTarget"/> class.</summary>
            <param name="classContext">The context within which the COM object is to be run.</param>
            <param name="classUse">Indicates how connections are made to the class object.</param>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellDropTarget.DragDrop">
            <summary>Occurs when a drag-and-drop operation is started. All calls from this event must be non-blocking.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellDropTarget.DragEnter">
            <summary>Occurs to request whether a drop can be accepted, and, if so, the effect of the drop.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellDropTarget.DragLeave">
            <summary>Occurs when the object is told to remove target feedback and releases the data object.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellDropTarget.DragOver">
            <summary>
            Occurs so target can provide feedback to the user and communicate the drop's effect to the DoDragDrop function so it can
            communicate the effect of the drop back to the source.
            </summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDropTarget.Vanara#PInvoke#Ole32#IDropTarget#DragEnter(System.Runtime.InteropServices.ComTypes.IDataObject,Vanara.PInvoke.MouseButtonState,System.Drawing.Point,Vanara.PInvoke.Ole32.DROPEFFECT@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDropTarget.Vanara#PInvoke#Ole32#IDropTarget#DragLeave">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDropTarget.Vanara#PInvoke#Ole32#IDropTarget#DragOver(Vanara.PInvoke.MouseButtonState,System.Drawing.Point,Vanara.PInvoke.Ole32.DROPEFFECT@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellDropTarget.Vanara#PInvoke#Ole32#IDropTarget#Drop(System.Runtime.InteropServices.ComTypes.IDataObject,Vanara.PInvoke.MouseButtonState,System.Drawing.Point,Vanara.PInvoke.Ole32.DROPEFFECT@)">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellExecuteCommand">
             <summary>
             Wraps the functionality of IExecuteCommand. To implement, derive from this class and override the <see cref="M:Vanara.Windows.Shell.ShellExecuteCommand.OnExecute"/> method. All Shell items
             passed to the command are available through the <see cref="P:Vanara.Windows.Shell.ShellExecuteCommand.SelectedItems"/> property.
             </summary>
             <remarks>
             This class provides an easy means of creating a COM based out-of-process DropTarget.
             <list type="number">
             <item>Create a .NET application project.</item>
             <item>Delete the Program.cs file that includes the Main method.</item>
             <item>Create a new class and derive it from <see cref="T:Vanara.Windows.Shell.ShellExecuteCommand"/> with the attributes in the example below.</item>
             <item>Ensure the project is built as "X86".</item>
             </list>
             <code title="Example" lang="cs">// Full implementation of a shell context menu handler using IExecuteCommand. 
            [ComVisible(true), Guid("&lt;Your GUID here&gt;"), ClassInterface(ClassInterfaceType.None)]
            public class MyExecCmd : ShellExecuteCommand
            {
            	  // *** Replace with your ProgID, verb name and display name ***
               const string progID = "txtfile";
               const string verbName = "ExecuteCommandVerb";
               const string verbDisplayName = "ExecuteCommand Verb Sample";
            
               // Overridden method performs all the functionality of your verb handler. The properties from ShellExecuteCommand should all be set
               // and can be used for your implementation. Once you have completed all work required of this command, you must call the
               // QuitMessageLoop method to finish processing all messages and then exit. If you fail to call QuitMessageLoop, this process will run
               // indefinitely and future context menu requests will not be handled.
               public override void OnExecute()
               {
                  var szMsg = $"Found {SelectedItems.Count} item(s) called with '{CommandName}' verb: " + string.Join(", ", SelectedItems.Select(i =&gt; i.Name));
                  if (!UIDisplayBlocked)
                     MessageBox.Show(szMsg, verbDisplayName);
                  // Don't fail to call QuitMessageLoop once you're done processing the Shell call.
                  QuitMessageLoop();
               }
            
               // This is the main thread of the application. When called from the Shell, it will append the -embedding argument to indicate that a
               // message loop needs to start running and the COM server registered. All that is accomplished by calling the 'Run' method on your
               // new class. You may choose to register or unregister based on alternate command-line arguments. It is highly recommended that you
               // supply a timeout to the Run method to prevent a failure from leaving this process running indefinitely. The timeout is automatically
               // canceled once the OnExecute method is called so as to prevent long-running code from being terminated. You must specify the
               // [STAThread] attribute on this method for the handler to function.
               [STAThread]
               private static void Main(string[] args)
               {
                  if (args.Length &gt; 0 &amp;&amp; args[0] == "-embedding")
                     new MyExecCmd().Run(TimeSpan.FromSeconds(30));
               }
            
               // This method registers this out-of-proc server to handle the DelegateExecute. This can be omitted if done by an installer.
               private static void Register()
               {
                  ShellRegistrar.RegisterLocalServer&lt;MyExecCmd&gt;(verbDisplayName, systemWide: false);
                  using (var progid = new ProgId(progID, false))
                  using (var verb = progid.Verbs.Add(verbName, verbDisplayName))
                     verb.DelegateExecute = Marshal.GenerateGuidForType(typeof(MyExecCmd));
               }
            
               // This method unregisters this out-of-proc server from handling the DelegateExecute. This can be omitted if done by an uninstaller.
               private static void Unregister()
               {
                  using (var progid = new ProgId(progID, false))
                     progid.Verbs.Remove(verbName);
                  ShellRegistrar.UnregisterLocalServer&lt;MyExecCmd&gt;(false);
               }
            }</code></remarks>
             <seealso cref="T:Vanara.PInvoke.Shell32.IExecuteCommand" />
             <seealso cref="T:Vanara.PInvoke.Shell32.IObjectWithSelection" />
        </member>
        <member name="M:Vanara.Windows.Shell.ShellExecuteCommand.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellExecuteCommand"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellExecuteCommand.#ctor(Vanara.PInvoke.Ole32.CLSCTX,Vanara.PInvoke.Ole32.REGCLS)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellExecuteCommand"/> class.</summary>
            <param name="classContext">The context within which the COM object is to be run.</param>
            <param name="classUse">Indicates how connections are made to the class object.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellExecuteCommand.KeyState">
            <summary>Gets a value based on the current state of the keys CTRL and SHIFT.</summary>
            <value>The value based on the current state of the keys CTRL and SHIFT.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellExecuteCommand.NewWorkingDirectory">
            <summary>Gets a new working directory. This value is <see langword="null"/> if the current working directory is to be used.</summary>
            <value>Returns a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellExecuteCommand.Parameters">
            <summary>Gets the parameter values for the verb.</summary>
            <value>Returns a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellExecuteCommand.Position">
            <summary>
            Gets the screen coordinates at which the user right-clicked to invoke the shortcut menu from which a command was chosen.
            Applications can use this information to present any UI. This is particularly useful in a multi-monitor situation. The default
            position is the center of the default monitor.
            </summary>
            <value>Returns a <see cref="T:System.Drawing.Point"/> value.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellExecuteCommand.SelectedItems">
            <summary>Gets or sets the selected shell items.</summary>
            <value>The selected shell items.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellExecuteCommand.UIDisplayBlocked">
            <summary>Gets a value indicating whether any UI associated with the selected Shell item should be displayed.</summary>
            <value><see langword="true"/> if display of any associated UI is blocked; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellExecuteCommand.WindowState">
            <summary>Gets the specified window's visual state.</summary>
            <value>Returns a <see cref="T:Vanara.PInvoke.ShowWindowCommand"/> value.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellExecuteCommand.OnExecute">
            <summary>Called in response to <c>IExecuteCommand.Execute()</c>.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellExecuteCommand.Vanara#PInvoke#Shell32#IExecuteCommand#Execute">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellExecuteCommand.Vanara#PInvoke#Shell32#IObjectWithSelection#GetSelection(System.Guid@,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellExecuteCommand.Vanara#PInvoke#Shell32#IExecuteCommand#SetDirectory(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellExecuteCommand.Vanara#PInvoke#Shell32#IExecuteCommand#SetKeyState(Vanara.PInvoke.MouseButtonState)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellExecuteCommand.Vanara#PInvoke#Shell32#IExecuteCommand#SetNoShowUI(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellExecuteCommand.Vanara#PInvoke#Shell32#IExecuteCommand#SetParameters(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellExecuteCommand.Vanara#PInvoke#Shell32#IExecuteCommand#SetPosition(System.Drawing.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellExecuteCommand.Vanara#PInvoke#Shell32#IObjectWithSelection#SetSelection(Vanara.PInvoke.Shell32.IShellItemArray)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellExecuteCommand.Vanara#PInvoke#Shell32#IExecuteCommand#SetShowWindow(Vanara.PInvoke.ShowWindowCommand)">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.Windows.Shell.ExecutableType">
            <summary>Specifies the executable file type.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ExecutableType.Nonexecutable">
            <summary>The file executable type is not able to be determined.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ExecutableType.DOS">
            <summary>The file is an MS-DOS .exe, .com, or .bat file.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ExecutableType.Win32Console">
            <summary>The file is a Microsoft Win32®-based console application.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ExecutableType.Windows">
            <summary>The file is a Windows application.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellIconType">
            <summary>The type of icon to be returned from <see cref="M:Vanara.Windows.Shell.ShellFileInfo.GetIcon(Vanara.Windows.Shell.ShellIconType)"/>.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellIconType.Small">
            <summary>Retrieve the file's small icon.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellIconType.Large">
            <summary>Retrieve the file's large icon.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellIconType.ShellDefinedSize">
            <summary>Retrieve a Shell-sized icon.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellIconType.LinkOverlay">
            <summary>Add the link overlay to the file's icon</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellIconType.Open">
            <summary>Retrieve the file's open icon.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellIconType.Selected">
            <summary>Blend the file's icon with the system highlight color.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellFileInfo">
            <summary>Information and icons for any shell file.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileInfo.#ctor(System.String)">
            <summary>Initializes a new instance of the ShellFileInfo class, which acts as a wrapper for a file path within the Windows Shell.</summary>
            <param name="fileName">The fully qualified name of the new file, or the relative file name.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileInfo.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellFileInfo"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileInfo.#ctor(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Initializes a new instance of the ShellFileInfo class, which acts as a wrapper for a file path within the Windows Shell.</summary>
            <param name="pidl">The ID list.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileInfo.DisplayName">
            <summary>Gets the display name for the file.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileInfo.ExecutableType">
            <summary>Gets the executable type of the file.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileInfo.Exists">
            <summary>Gets a value indicating whether the file or directory exists.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileInfo.IconLocation">
            <summary>Gets the icon location for this file.</summary>
            <value>The <see cref="P:Vanara.Windows.Shell.ShellFileInfo.IconLocation"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileInfo.IconOverlayIndex">
            <summary>Gets the index of the icon overlay.</summary>
            <value>The index of the icon overlay, or -1 if no overlay is set.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileInfo.LargeIcon">
            <summary>Gets the large icon for the file.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileInfo.Length">
            <summary>Gets the size, in bytes, of the current link file.</summary>
            <value>The length in bytes of the file.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileInfo.Name">
            <summary>
            For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the
            Name property gets the name of the directory.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileInfo.ShellAttributes">
            <summary>Gets the shell item attributes.</summary>
            <value>The shell item attributes.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileInfo.SmallIcon">
            <summary>Gets the small icon for the file.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileInfo.SystemIcon">
            <summary>Gets the icon for this shell item from the system.</summary>
            <value>The system icon on success; <c>null</c> on failure.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileInfo.TypeName">
            <summary>Gets the type name for the file.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileInfo.Delete">
            <summary>Permanently deletes the file.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileInfo.GetIcon(Vanara.Windows.Shell.ShellIconType)">
            <summary>Gets the icon defined by the set of flags provided.</summary>
            <param name="iconType">Flags to specify type of the icon.</param>
            <returns><see cref="T:System.Drawing.Icon"/> if successful; <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileInfo.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileInfo.SetName(System.String)">
            <summary>Sets the name.</summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileInfo.GetInfo">
            <summary>Gets the information.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellFileOperationDialog">
            <summary>The Shell's progress dialog.</summary>
            <seealso cref="T:System.ComponentModel.Component"/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperationDialog.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellFileOperationDialog"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperationDialog.#ctor(System.ComponentModel.IContainer)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellFileOperationDialog"/> class.</summary>
            <param name="container">The container.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellFileOperationDialog.DialogStatus">
            <summary>Provides operation status flags for ShellFileOperationDialog.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.DialogStatus.NotStarted">
            <summary>The dialog has not been started.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.DialogStatus.Running">
            <summary>Operation is running, no user intervention.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.DialogStatus.Paused">
            <summary>Operation has been paused by the user.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.DialogStatus.Cancelled">
            <summary>Operation has been canceled by the user - now go undo.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.DialogStatus.Stopped">
            <summary>Operation has been stopped by the user - terminate completely.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.DialogStatus.Errors">
            <summary>Operation has gone as far as it can go without throwing error dialogs.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellFileOperationDialog.OperationMode">
            <summary>Flags used in Mode</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationMode.Default">
            <summary>Use the default progress dialog operations mode.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationMode.Running">
            <summary>The operation is running.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationMode.Starting">
            <summary>The operation is gathering data before it begins, such as calculating the predicted operation time.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationMode.Undoing">
            <summary>The operation is rolling back due to an Undo command from the user.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationMode.BlockedByErrors">
            <summary>Error dialogs are blocking progress from continuing.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationMode.Indeterminate">
            <summary>The length of the operation is indeterminate. Do not show a timer and display the progress bar in marquee mode.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellFileOperationDialog.OperationType">
            <summary>Describes an action being performed that requires progress to be shown to the user using progress dialog.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationType.None">
            <summary>No action is being performed.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationType.Moving">
            <summary>Files are being moved.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationType.Copying">
            <summary>Files are being copied.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationType.Recycling">
            <summary>Files are being deleted.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationType.ApplyingAttributes">
            <summary>A set of attributes are being applied to files.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationType.Downloading">
            <summary>A file is being downloaded from a remote source.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationType.SearchingInternet">
            <summary>An Internet search is being performed.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationType.Calculating">
            <summary>A calculation is being performed.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationType.Uploading">
            <summary>A file is being uploaded to a remote source.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationType.SearchingFiles">
            <summary>A local search is being performed.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationType.Deleting">
            <summary>Windows Vista and later. A deletion is being performed.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationType.Renaming">
            <summary>Windows Vista and later. A renaming action is being performed.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationType.Formatting">
            <summary>Windows Vista and later. A formatting action is being performed.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperationDialog.OperationType.CopyMoving">
            <summary>Windows 7 and later. A copy or move action is being performed.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.AllowUndo">
            <summary>The operation can be undone in the dialog. (The Stop button becomes Undo)</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.CurrentItem">
            <summary>
            A ShellItem that represents the item currently being operated on by the operation engine. This property is only used in Windows
            7 and later. In earlier versions, this property should be <see langword="null"/>
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.Destination">
            <summary>A ShellItem that represents the target Shell item.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.ElapsedTime">
            <summary>Gets the elapsed time.</summary>
            <value>The elapsed time, accurate to milliseconds.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.HideDestinationPath">
            <summary>Don't display the path of destination file in progress dialog</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.HideLocations">
            <summary>Don't display the location line in the progress dialog</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.HideSourcePath">
            <summary>Don't display the path of source file in progress dialog</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.Mode">
            <summary>Gets or sets progress dialog operations mode.</summary>
            <value>The mode.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.Operation">
            <summary>Sets which progress dialog operation is occurring, and whether we are in pre-flight or undo mode.</summary>
            <value>Specifies operation. See <see cref="T:Vanara.Windows.Shell.ShellFileOperationDialog.OperationType"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.ProgressBarMaxValue">
            <summary>Total points, used for showing progress in points.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.ProgressBarValue">
            <summary>Current points, used for showing progress in points.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.ProgressDialogItemsMaxValue">
            <summary>Specifies total items, used for showing progress in items.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.ProgressDialogItemsValue">
            <summary>Current items, used for showing progress in items.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.ProgressDialogSizeMaxValue">
            <summary>Total size in bytes, used for showing progress in bytes.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.ProgressDialogSizeValue">
            <summary>Current size in bytes, used for showing progress in bytes.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.RemainingTime">
            <summary>Gets the remaining time.</summary>
            <value>The remaining time, accurate to milliseconds.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.ShowPauseButton">
            <summary>Add a pause button (operation can be paused)</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.Source">
            <summary>A ShellItem that represents the source Shell item.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperationDialog.Status">
            <summary>Gets operation status for progress dialog.</summary>
            <value>The operation status. See <see cref="T:Vanara.Windows.Shell.ShellFileOperationDialog.DialogStatus"/>.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperationDialog.PauseTimer">
            <summary>Pauses progress dialog timer.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperationDialog.ResetTimer">
            <summary>Resets progress dialog timer to 0.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperationDialog.ResumeTimer">
            <summary>Resumes progress dialog timer.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperationDialog.Start(System.Windows.Forms.IWin32Window)">
            <summary>Starts the specified progress dialog.</summary>
            <param name="owner">
            A value that represents the window of the owner window for the common dialog box. This value can be <see langword="null"/>.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperationDialog.Stop">
            <summary>Stops current progress dialog.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperationDialog.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Component"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellFileOperations">
            <summary>Queued and static file operations using the Shell.</summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.#ctor(System.Windows.Forms.IWin32Window)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellFileOperations"/> class.</summary>
            <param name="owner">The window that owns the modal dialog. This value can be <see langword="null"/>.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.Finalize">
            <summary>Finalizes an instance of the <see cref="T:Vanara.Windows.Shell.ShellFileOperations"/> class.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellFileOperations.FinishOperations">
            <summary>Performs caller-implemented actions after the last operation performed by the call to IFileOperation is complete.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellFileOperations.PostCopyItem">
            <summary>Performs caller-implemented actions after the copy process for each item is complete.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellFileOperations.PostDeleteItem">
            <summary>Performs caller-implemented actions after the delete process for each item is complete.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellFileOperations.PostMoveItem">
            <summary>Performs caller-implemented actions after the move process for each item is complete.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellFileOperations.PostNewItem">
            <summary>Performs caller-implemented actions after the new item is created.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellFileOperations.PostRenameItem">
            <summary>Performs caller-implemented actions after the rename process for each item is complete.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellFileOperations.PreCopyItem">
            <summary>Performs caller-implemented actions before the copy process for each item begins.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellFileOperations.PreDeleteItem">
            <summary>Performs caller-implemented actions before the delete process for each item begins.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellFileOperations.PreMoveItem">
            <summary>Performs caller-implemented actions before the move process for each item begins.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellFileOperations.PreNewItem">
            <summary>Performs caller-implemented actions before the process to create a new item begins.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellFileOperations.PreRenameItem">
            <summary>Performs caller-implemented actions before the rename process for each item begins.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellFileOperations.StartOperations">
            <summary>Performs caller-implemented actions before any specific file operations are performed.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellFileOperations.UpdateProgress">
            <summary>Occurs when a progress update is received.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperations.AnyOperationsAborted">
            <summary>
            Gets a value that states whether any file operations initiated by a call to <see cref="M:Vanara.Windows.Shell.ShellFileOperations.PerformOperations"/> were stopped before
            they were complete. The operations could be stopped either by user action or silently by the system.
            </summary>
            <value><see langword="true"/> if any file operations were aborted before they were complete; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperations.CustomProgressDialog">
            <summary>Specifies a dialog box used to display the progress of the operation.</summary>
            <value>A ShellFileOperationDialog object that represents the dialog box.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperations.Options">
            <summary>Gets or sets options that control file operations.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperations.OwnerWindow">
            <summary>Gets or sets the parent or owner window for progress and dialog windows.</summary>
            <value>The owner window of the operation. This window will receive error messages.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperations.QueuedOperations">
            <summary>Gets the number of queued operations.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.Copy(System.String,System.String,System.String,Vanara.Windows.Shell.ShellFileOperations.OperationFlags)">
            <summary>Copies a single item to a specified destination using the Shell to provide progress and error dialogs.</summary>
            <param name="source">A string that specifies the source item's full file path.</param>
            <param name="dest">A string that specifies the full path of the destination folder to contain the copy of the item.</param>
            <param name="newName">
            An optional new name for the item after it has been copied. This can be <see langword="null"/>. If <see langword="null"/>, the
            name of the destination item is the same as the source.
            </param>
            <param name="options">Options that control file operations.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.Copy(Vanara.Windows.Shell.ShellItem,Vanara.Windows.Shell.ShellFolder,System.String,Vanara.Windows.Shell.ShellFileOperations.OperationFlags)">
            <summary>Copies a single item to a specified destination using the Shell to provide progress and error dialogs.</summary>
            <param name="source">A <see cref="T:Vanara.Windows.Shell.ShellItem"/> that specifies the source item.</param>
            <param name="dest">A <see cref="T:Vanara.Windows.Shell.ShellFolder"/> that specifies the destination folder to contain the copy of the item.</param>
            <param name="newName">
            An optional new name for the item after it has been copied. This can be <see langword="null"/>. If <see langword="null"/>, the
            name of the destination item is the same as the source.
            </param>
            <param name="options">Options that control file operations.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.Copy(System.Collections.Generic.IEnumerable{Vanara.Windows.Shell.ShellItem},Vanara.Windows.Shell.ShellFolder,Vanara.Windows.Shell.ShellFileOperations.OperationFlags)">
            <summary>Copies a set of items to a specified destination using the Shell to provide progress and error dialogs.</summary>
            <param name="sourceItems">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Vanara.Windows.Shell.ShellItem"/> instances that represent the group of items to be copied.
            </param>
            <param name="dest">A <see cref="T:Vanara.Windows.Shell.ShellFolder"/> that specifies the destination folder to contain the copy of the items.</param>
            <param name="options">Options that control file operations.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.Delete(System.String,Vanara.Windows.Shell.ShellFileOperations.OperationFlags)">
            <summary>Deletes a single item using the Shell to provide progress and error dialogs.</summary>
            <param name="source">A string that specifies the full path of the item to be deleted.</param>
            <param name="options">Options that control file operations.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.Delete(Vanara.Windows.Shell.ShellItem,Vanara.Windows.Shell.ShellFileOperations.OperationFlags)">
            <summary>Deletes a single item using the Shell to provide progress and error dialogs.</summary>
            <param name="source">A <see cref="T:Vanara.Windows.Shell.ShellItem"/> that specifies the item to be deleted.</param>
            <param name="options">Options that control file operations.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.Delete(System.Collections.Generic.IEnumerable{Vanara.Windows.Shell.ShellItem},Vanara.Windows.Shell.ShellFileOperations.OperationFlags)">
            <summary>Deletes a set of items using the Shell to provide progress and error dialogs.</summary>
            <param name="sourceItems">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Vanara.Windows.Shell.ShellItem"/> instances which represents the group of items to be deleted.
            </param>
            <param name="options">Options that control file operations.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.Move(System.String,System.String,System.String,Vanara.Windows.Shell.ShellFileOperations.OperationFlags)">
            <summary>Moves a single item to a specified destination using the Shell to provide progress and error dialogs.</summary>
            <param name="source">A string that specifies the source item's full file path.</param>
            <param name="dest">A string that specifies the full path of the destination folder to contain the copy of the item.</param>
            <param name="newName">
            An optional new name for the item in its new location. This can be <see langword="null"/>. If <see langword="null"/>, the name
            of the destination item is the same as the source.
            </param>
            <param name="options">Options that control file operations.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.Move(Vanara.Windows.Shell.ShellItem,Vanara.Windows.Shell.ShellFolder,System.String,Vanara.Windows.Shell.ShellFileOperations.OperationFlags)">
            <summary>Moves a single item to a specified destination using the Shell to provide progress and error dialogs.</summary>
            <param name="source">A <see cref="T:Vanara.Windows.Shell.ShellItem"/> that specifies the source item.</param>
            <param name="dest">A <see cref="T:Vanara.Windows.Shell.ShellFolder"/> that specifies the destination folder to contain the moved item.</param>
            <param name="newName">
            An optional new name for the item in its new location. This can be <see langword="null"/>. If <see langword="null"/>, the name
            of the destination item is the same as the source.
            </param>
            <param name="options">Options that control file operations.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.Move(System.Collections.Generic.IEnumerable{Vanara.Windows.Shell.ShellItem},Vanara.Windows.Shell.ShellFolder,Vanara.Windows.Shell.ShellFileOperations.OperationFlags)">
            <summary>Moves a set of items to a specified destination using the Shell to provide progress and error dialogs.</summary>
            <param name="sourceItems">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Vanara.Windows.Shell.ShellItem"/> instances which represents the group of items to be moved.
            </param>
            <param name="dest">A <see cref="T:Vanara.Windows.Shell.ShellFolder"/> that specifies the destination folder to contain the moved items.</param>
            <param name="options">Options that control file operations.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.NewItem(Vanara.Windows.Shell.ShellFolder,System.String,System.IO.FileAttributes,System.String,Vanara.Windows.Shell.ShellFileOperations.OperationFlags)">
            <summary>Creates a new item in a specified location using the Shell to provide progress and error dialogs.</summary>
            <param name="dest">A <see cref="T:Vanara.Windows.Shell.ShellItem"/> that specifies the destination folder that will contain the new item.</param>
            <param name="name">The file name of the new item, for instance Newfile.txt.</param>
            <param name="attr">A value that specifies the file system attributes for the file or folder.</param>
            <param name="template">
            The name of the template file (for example Excel9.xls) that the new item is based on, stored in one of the following locations:
            <list type="bullet">
            <item>
            <description>CSIDL_COMMON_TEMPLATES. The default path for this folder is %ALLUSERSPROFILE%\Templates.</description>
            </item>
            <item>
            <description>CSIDL_TEMPLATES. The default path for this folder is %USERPROFILE%\Templates.</description>
            </item>
            <item>
            <description>%SystemRoot%\shellnew</description>
            </item>
            </list>
            <para>
            This is a string used to specify an existing file of the same type as the new file, containing the minimal content that an
            application wants to include in any new file.
            </para>
            <para>This parameter is normally <see langword="null"/> to specify a new, blank file.</para>
            </param>
            <param name="options">Options that control file operations.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.Rename(Vanara.Windows.Shell.ShellItem,System.String,Vanara.Windows.Shell.ShellFileOperations.OperationFlags)">
            <summary>Renames a single item to a new display name using the Shell to provide progress and error dialogs.</summary>
            <param name="source">A <see cref="T:Vanara.Windows.Shell.ShellItem"/> that specifies the source item.</param>
            <param name="newName">The new display name of the item.</param>
            <param name="options">Options that control file operations.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.Rename(System.Collections.Generic.IEnumerable{Vanara.Windows.Shell.ShellItem},System.String,Vanara.Windows.Shell.ShellFileOperations.OperationFlags)">
            <summary>
            Renames a set of items that are to be given a new display name using the Shell to provide progress and error dialogs. All items
            are given the same name.
            </summary>
            <param name="sourceItems">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Vanara.Windows.Shell.ShellItem"/> instances which represents the group of items to be renamed.
            </param>
            <param name="newName">The new display name of the items.</param>
            <param name="options">Options that control file operations.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.PerformOperations">
            <summary>Executes all selected operations.</summary>
            <remarks>
            This method is called last to execute those actions that have been specified earlier by calling their individual methods. For
            instance, <see cref="M:Vanara.Windows.Shell.ShellFileOperations.QueueRenameOperation(Vanara.Windows.Shell.ShellItem,System.String)"/> does not rename the item, it simply sets the parameters. The
            actual renaming is done when you call PerformOperations.
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.QueueApplyPropertiesOperation(Vanara.Windows.Shell.ShellItem,Vanara.Windows.Shell.ShellItemPropertyUpdates)">
            <summary>Declares a set of properties and values to be set on an item.</summary>
            <param name="item">The item to receive the new property values.</param>
            <param name="props">
            An <see cref="T:Vanara.Windows.Shell.ShellItemPropertyUpdates"/>, which contains a dictionary of objects that specify the properties to be set and
            their new values.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.QueueApplyPropertiesOperation(System.Collections.Generic.IEnumerable{Vanara.Windows.Shell.ShellItem},Vanara.Windows.Shell.ShellItemPropertyUpdates)">
            <summary>Declares a set of properties and values to be set on a set of items.</summary>
            <param name="items">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Vanara.Windows.Shell.ShellItem"/> instances that represent the group of items to which to apply the properties.
            </param>
            <param name="props">
            An <see cref="T:Vanara.Windows.Shell.ShellItemPropertyUpdates"/>, which contains a dictionary of objects that specify the properties to be set and
            their new values.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.QueueCopyOperation(Vanara.Windows.Shell.ShellItem,Vanara.Windows.Shell.ShellFolder,System.String)">
            <summary>Declares a single item that is to be copied to a specified destination.</summary>
            <param name="source">A <see cref="T:Vanara.Windows.Shell.ShellItem"/> that specifies the source item.</param>
            <param name="dest">A <see cref="T:Vanara.Windows.Shell.ShellFolder"/> that specifies the destination folder to contain the copy of the item.</param>
            <param name="newName">
            An optional new name for the item after it has been copied. This can be <see langword="null"/>. If <see langword="null"/>, the
            name of the destination item is the same as the source.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.QueueCopyOperation(System.Collections.Generic.IEnumerable{Vanara.Windows.Shell.ShellItem},Vanara.Windows.Shell.ShellFolder)">
            <summary>Declares a set of items that are to be copied to a specified destination.</summary>
            <param name="sourceItems">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Vanara.Windows.Shell.ShellItem"/> instances that represent the group of items to be copied.
            </param>
            <param name="dest">A <see cref="T:Vanara.Windows.Shell.ShellFolder"/> that specifies the destination folder to contain the copy of the items.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.QueueDeleteOperation(Vanara.Windows.Shell.ShellItem)">
            <summary>Declares a single item that is to be deleted.</summary>
            <param name="item">&gt;A <see cref="T:Vanara.Windows.Shell.ShellItem"/> that specifies the item to be deleted.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.QueueDeleteOperation(System.Collections.Generic.IEnumerable{Vanara.Windows.Shell.ShellItem})">
            <summary>Declares a set of items that are to be deleted.</summary>
            <param name="items">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Vanara.Windows.Shell.ShellItem"/> instances which represents the group of items to be deleted.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.QueueMoveOperation(Vanara.Windows.Shell.ShellItem,Vanara.Windows.Shell.ShellFolder,System.String)">
            <summary>Declares a single item that is to be moved to a specified destination.</summary>
            <param name="source">A <see cref="T:Vanara.Windows.Shell.ShellItem"/> that specifies the source item.</param>
            <param name="dest">A <see cref="T:Vanara.Windows.Shell.ShellFolder"/> that specifies the destination folder to contain the moved item.</param>
            <param name="newName">
            An optional new name for the item in its new location. This can be <see langword="null"/>. If <see langword="null"/>, the name
            of the destination item is the same as the source.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.QueueMoveOperation(System.Collections.Generic.IEnumerable{Vanara.Windows.Shell.ShellItem},Vanara.Windows.Shell.ShellFolder)">
            <summary>Declares a set of items that are to be moved to a specified destination.</summary>
            <param name="sourceItems">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Vanara.Windows.Shell.ShellItem"/> instances which represents the group of items to be moved.
            </param>
            <param name="dest">A <see cref="T:Vanara.Windows.Shell.ShellFolder"/> that specifies the destination folder to contain the moved items.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.QueueNewItemOperation(Vanara.Windows.Shell.ShellFolder,System.String,System.IO.FileAttributes,System.String)">
            <summary>Declares a new item that is to be created in a specified location.</summary>
            <param name="dest">A <see cref="T:Vanara.Windows.Shell.ShellItem"/> that specifies the destination folder that will contain the new item.</param>
            <param name="name">The file name of the new item, for instance Newfile.txt.</param>
            <param name="attr">A value that specifies the file system attributes for the file or folder.</param>
            <param name="template">
            The name of the template file (for example Excel9.xls) that the new item is based on, stored in one of the following locations:
            <list type="bullet">
            <item>
            <description>CSIDL_COMMON_TEMPLATES. The default path for this folder is %ALLUSERSPROFILE%\Templates.</description>
            </item>
            <item>
            <description>CSIDL_TEMPLATES. The default path for this folder is %USERPROFILE%\Templates.</description>
            </item>
            <item>
            <description>%SystemRoot%\shellnew</description>
            </item>
            </list>
            <para>
            This is a string used to specify an existing file of the same type as the new file, containing the minimal content that an
            application wants to include in any new file.
            </para>
            <para>This parameter is normally <see langword="null"/> to specify a new, blank file.</para>
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.QueueRenameOperation(Vanara.Windows.Shell.ShellItem,System.String)">
            <summary>Declares a single item that is to be given a new display name.</summary>
            <param name="source">A <see cref="T:Vanara.Windows.Shell.ShellItem"/> that specifies the source item.</param>
            <param name="newName">The new display name of the item.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.QueueRenameOperation(System.Collections.Generic.IEnumerable{Vanara.Windows.Shell.ShellItem},System.String)">
            <summary>Declares a set of items that are to be given a new display name. All items are given the same name.</summary>
            <param name="sourceItems">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Vanara.Windows.Shell.ShellItem"/> instances which represents the group of items to be renamed.
            </param>
            <param name="newName">The new display name of the items.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.Dispose(System.Boolean)">
            <summary>Releases unmanaged and - optionally - managed resources.</summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellFileOperations.OperationFlags">
            <summary>Flags that control the file operation.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.MultiDestFiles">
            <summary>
            The pTo member specifies multiple destination files (one for each source file in pFrom) rather than one directory where all
            source files are to be deposited.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.Silent">
            <summary>Do not display a progress dialog box.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.RenameOnCollision">
            <summary>
            Give the item being operated on a new name in a move, copy, or rename operation if an item with the target name already exists.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.NoConfirmation">
            <summary>Respond with Yes to All for any dialog box that is displayed.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.WantMappingHandle">
            <summary>
            If FOF_RENAMEONCOLLISION is specified and any files were renamed, assign a name mapping object that contains their old and
            new names to the hNameMappings member. This object must be freed using SHFreeNameMappings when it is no longer needed.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.AllowUndo">
            <summary>
            Preserve undo information, if possible.
            <para>Prior to Windows Vista, operations could be undone only from the same process that performed the original operation.</para>
            <para>
            In Windows Vista and later systems, the scope of the undo is a user session. Any process running in the user session can
            undo another operation. The undo state is held in the Explorer.exe process, and as long as that process is running, it can
            coordinate the undo functions.
            </para>
            <para>If the source file parameter does not contain fully qualified path and file names, this flag is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.FilesOnly">
            <summary>Perform the operation only on files (not on folders) if a wildcard file name (*.*) is specified.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.SimpleProgress">
            <summary>Display a progress dialog box but do not show individual file names as they are operated on.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.NoConfirmMkDir">
            <summary>Do not confirm the creation of a new folder if the operation requires one to be created.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.NoErrorUI">
            <summary>
            Do not display a message to the user if an error occurs. If this flag is set without FOFX_EARLYFAILURE, any error is treated
            as if the user had chosen Ignore or Continue in a dialog box. It halts the current action, sets a flag to indicate that an
            action was aborted, and proceeds with the rest of the operation.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.NoCopySecurityAttribs">
            <summary>Do not copy the security attributes of the item.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.NoRecursion">
            <summary>Only operate in the local folder. Do not operate recursively into subdirectories.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.NoConnectedElements">
            <summary>Do not move connected items as a group. Only move the specified files.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.WantNukeWarning">
            <summary>
            Send a warning if a file or folder is being destroyed during a delete operation rather than recycled. This flag partially
            overrides FOF_NOCONFIRMATION.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.NoUI">
            <summary>Don't display any UI at all.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.NoSkipJunctions">
            <summary>
            Walk into Shell namespace junctions. By default, junctions are not entered. For more information on junctions, see
            Specifying a Namespace Extension's Location.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.PreferHardLink">
            <summary>If possible, create a hard link rather than a new instance of the file in the destination.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.ShowElevationPrompt">
            <summary>
            If an operation requires elevated rights and the FOF_NOERRORUI flag is set to disable error UI, display a UAC UI prompt nonetheless.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.RecycleOnDelete">
            <summary>
            Introduced in Windows 8. When a file is deleted, send it to the Recycle Bin rather than permanently deleting it.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.EarlyFailure">
            <summary>
            If FOFX_EARLYFAILURE is set together with FOF_NOERRORUI, the entire set of operations is stopped upon encountering any error
            in any operation. This flag is valid only when FOF_NOERRORUI is set.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.PreserveFileExtensions">
            <summary>
            Rename collisions in such a way as to preserve file name extensions. This flag is valid only when FOF_RENAMEONCOLLISION is
            also set.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.KeepNewerFile">
            <summary>
            Keep the newer file or folder, based on the Date Modified property, if a collision occurs. This is done automatically with
            no prompt UI presented to the user.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.NoCopyHooks">
            <summary>Do not use copy hooks.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.NoMinimizeBox">
            <summary>Do not allow the progress dialog to be minimized.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.MoveACLsAcrossVolumes">
            <summary>
            Copy the security attributes of the source item to the destination item when performing a cross-volume move operation.
            Without this flag, the destination item receives the security attributes of its new folder.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.DontDisplaySourcePath">
            <summary>Do not display the path of the source item in the progress dialog.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.DontDisplayDestPath">
            <summary>Do not display the path of the destination item in the progress dialog.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.RequireElevation">
            <summary>
            Introduced in Windows Vista SP1. The user expects a requirement for rights elevation, so do not display a dialog box asking
            for a confirmation of the elevation.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.AddUndoRecord">
            <summary>
            Introduced in Windows 8. The file operation was user-invoked and should be placed on the undo stack. This flag is preferred
            to FOF_ALLOWUNDO.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.CopyAsDownload">
            <summary>Introduced in Windows 7. Display a Downloading instead of Copying message in the progress dialog.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.OperationFlags.DontDisplayLocations">
            <summary>Introduced in Windows 7. Do not display the location line in the progress dialog.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellFileOperations.TransferFlags">
            <summary>Used by methods of the ITransferSource and ITransferDestination interfaces to control their file operations.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.TransferFlags.Normal">
            <summary>Fail if the destination already exists, unless TSF_OVERWRITE_EXIST is specified. This is a default behavior.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.TransferFlags.FailExist">
            <summary>Fail if the destination already exists, unless TSF_OVERWRITE_EXIST is specified. This is a default behavior</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.TransferFlags.RenameExist">
            <summary>Rename with auto-name generation if the destination already exists.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.TransferFlags.OverwriteExist">
            <summary>Overwrite or merge with the destination.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.TransferFlags.AllowDecryption">
            <summary>Allow creation of a decrypted destination.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.TransferFlags.NoSecurity">
            <summary>No discretionary access control list (DACL), system access control list (SACL), or owner.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.TransferFlags.CopyCreationTime">
            <summary>
            Copy the creation time as part of the copy. This can be useful for a move operation that is being used as a copy and delete
            operation (TSF_MOVE_AS_COPY_DELETE).
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.TransferFlags.CopyWriteTime">
            <summary>Copy the last write time as part of the copy.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.TransferFlags.UseFullAccess">
            <summary>Assign write, read, and delete permissions as share mode.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.TransferFlags.DeleteRecycleIfPossible">
            <summary>Recycle on file delete, if possible.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.TransferFlags.CopyHardLink">
            <summary>Hard link to the desired source (not required). This avoids a normal copy operation.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.TransferFlags.CopyLocalizedName">
            <summary>Copy the localized name.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.TransferFlags.MoveAsCopyDelete">
            <summary>Move as a copy and delete operation.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellFileOperations.TransferFlags.SuspendShellEvents">
            <summary>Suspend Shell events.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellFileOperations.ShellFileNewOpEventArgs">
            <summary>Arguments supplied to the <see cref="E:Vanara.Windows.Shell.ShellFileOperations.PostNewItem"/> event.</summary>
            <seealso cref="T:Vanara.Windows.Shell.ShellFileOperations.ShellFileOpEventArgs"/>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperations.ShellFileNewOpEventArgs.TemplateName">
            <summary>Gets the name of the template.</summary>
            <value>The name of the template.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperations.ShellFileNewOpEventArgs.FileAttributes">
            <summary>Gets the file attributes.</summary>
            <value>The file attributes.</value>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellFileOperations.ShellFileOpEventArgs">
            <summary>
            Arguments supplied to events from <see cref="T:Vanara.Windows.Shell.ShellFileOperations"/>. Depending on the event, some properties may not be set.
            </summary>
            <seealso cref="T:System.EventArgs"/>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperations.ShellFileOpEventArgs.DestFolder">
            <summary>Gets the destination folder.</summary>
            <value>The destination folder.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperations.ShellFileOpEventArgs.DestItem">
            <summary>Gets the destination item.</summary>
            <value>The destination item.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperations.ShellFileOpEventArgs.Flags">
            <summary>Gets the tranfer flag values.</summary>
            <value>The flags.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperations.ShellFileOpEventArgs.Name">
            <summary>Gets the name of the item.</summary>
            <value>The item name.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperations.ShellFileOpEventArgs.Result">
            <summary>Gets the result of the operation.</summary>
            <value>The result.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFileOperations.ShellFileOpEventArgs.SourceItem">
            <summary>Gets the source item.</summary>
            <value>The source item.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFileOperations.ShellFileOpEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellItemPropertyUpdates">
            <summary>
            A dictionary of properties that can be used to set or update property values on Shell items via the <see
            cref="M:Vanara.Windows.Shell.ShellFileOperations.QueueApplyPropertiesOperation(Vanara.Windows.Shell.ShellItem,Vanara.Windows.Shell.ShellItemPropertyUpdates)"/> method. This class wraps the <see
            cref="P:Vanara.Windows.Shell.ShellItemPropertyUpdates.IPropertyChangeArray"/> COM interface.
            </summary>
            <seealso cref="T:System.Collections.Generic.IDictionary`2"/>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemPropertyUpdates.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItemPropertyUpdates"/> class.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemPropertyUpdates.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemPropertyUpdates.IPropertyChangeArray">
            <summary>Gets the COM interface for <see cref="P:Vanara.Windows.Shell.ShellItemPropertyUpdates.IPropertyChangeArray"/>.</summary>
            <value>The <see cref="P:Vanara.Windows.Shell.ShellItemPropertyUpdates.IPropertyChangeArray"/> value.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemPropertyUpdates.Keys">
            <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemPropertyUpdates.Values">
            <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemPropertyUpdates.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{Vanara#PInvoke#Ole32#PROPERTYKEY,System#Object}}#IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemPropertyUpdates.Item(Vanara.PInvoke.Ole32.PROPERTYKEY)">
            <summary>Gets or sets the <see cref="T:System.Object"/> with the specified key.</summary>
            <value>The <see cref="T:System.Object"/>.</value>
            <param name="key">The key.</param>
            <returns>The object associated with <paramref name="key"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">key</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemPropertyUpdates.Add(Vanara.PInvoke.Ole32.PROPERTYKEY,System.Object)">
            <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemPropertyUpdates.Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemPropertyUpdates.ContainsKey(Vanara.PInvoke.Ole32.PROPERTYKEY)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.</summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemPropertyUpdates.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemPropertyUpdates.Remove(Vanara.PInvoke.Ole32.PROPERTYKEY)">
            <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false. This method also returns false if <paramref name="key"/> was not
            found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemPropertyUpdates.TryGetValue(Vanara.PInvoke.Ole32.PROPERTYKEY,System.Object@)">
            <summary>Gets the value associated with the specified key.</summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the
            type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.
            </param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellImageSize">
            <summary>Used to determine the size of the icon returned by <c>ShellImageList.GetSystemIcon</c>.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellImageSize.Large">
            <summary>
            The image size is normally 32x32 pixels. However, if the Use large icons option is selected from the Effects section of the
            Appearance tab in Display Properties, the image is 48x48 pixels.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellImageSize.Small">
            <summary>The image is the Shell standard small icon size of 16x16, but the size can be customized by the user.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellImageSize.ExtraLarge">
            <summary>
            The image is the Shell standard extra-large icon size. This is typically 48x48, but the size can be customized by the user.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellImageSize.SystemSmall">
            <summary>
            These images are the size specified by GetSystemMetrics called with SM_CXSMICON and GetSystemMetrics called with SM_CYSMICON.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellImageSize.Jumbo">
            <summary>Windows Vista and later. The image is normally 256x256 pixels.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellImageList">
            <summary>Represents the System Image List holding images for all shell icons.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellImageList.GetFileIcon(System.String,Vanara.Windows.Shell.ShellIconType)">
            <summary>Gets the Shell icon for the given file name or extension.</summary>
            <param name="fileNameOrExtension">The file name or extension .</param>
            <param name="iconType">
            Flags to specify the type of the icon to retrieve. This uses the <see cref="M:Vanara.PInvoke.Shell32.SHGetFileInfo(System.String,System.IO.FileAttributes,Vanara.PInvoke.Shell32.SHFILEINFO@,System.Int32,Vanara.PInvoke.Shell32.SHGFI)"/> method and can only retrieve small or large icons.
            </param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance if found; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellImageList.GetSystemIcon(System.String,Vanara.Windows.Shell.ShellImageSize)">
            <summary>Gets the system icon for the given file name or extension.</summary>
            <param name="fileNameOrExtension">The file name or extension.</param>
            <param name="iconSize">Size of the icon.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance if found; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellImageList.GetSystemIcon(System.Int32,Vanara.Windows.Shell.ShellImageSize)">
            <summary>Gets the system icon for and index and size.</summary>
            <param name="index">The index of the system icon to retrieve.</param>
            <param name="iconSize">Size of the icon.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance if found; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellImageList.GetSystemIconHandle(System.Int32,Vanara.Windows.Shell.ShellImageSize)">
            <summary>Gets the system icon for and index and size.</summary>
            <param name="index">The index of the system icon to retrieve.</param>
            <param name="iconSize">Size of the icon.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance if found; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellImageList.PixelsToSHIL(System.Int32)">
            <summary>Given a pixel size, return the ShellImageSize value with the closest size.</summary>
            <param name="pixels">Size, in pixels, of the image list size to search for.</param>
            <returns>An image list size.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellImageList.SHILtoPixels(Vanara.Windows.Shell.ShellImageSize)">
            <summary>Given an image list size, return the related size, in pixels, of that size defined on the system.</summary>
            <param name="imageListSize">Size of the image list.</param>
            <returns>Pixel size of corresponding system value.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.ChangeFilters">
            <summary>Changes that might occur to a shell item or folder.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.ItemRenamed">
            <summary>
            The name of a nonfolder item has changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the previous
            PIDL or name of the item. dwItem2 contains the new PIDL or name of the item.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.ItemCreated">
            <summary>
            A nonfolder item has been created. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the item that was
            created. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.ItemDeleted">
            <summary>
            A nonfolder item has been deleted. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the item that was
            deleted. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.FolderCreated">
            <summary>
            A folder has been created. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that was created.
            dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.FolderDeleted">
            <summary>
            A folder has been removed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that was removed.
            dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.MediaInserted">
            <summary>
            Storage media has been inserted into a drive. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root
            of the drive that contains the new media. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.MediaRemoved">
            <summary>
            Storage media has been removed from a drive. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of
            the drive from which the media was removed. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.DriveRemoved">
            <summary>
            A drive has been removed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive that was
            removed. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.DriveAdded">
            <summary>
            A drive has been added. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive that was
            added. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.FolderShared">
            <summary>
            A folder on the local computer is being shared via the network. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1
            contains the folder that is being shared. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.FolderUnshared">
            <summary>
            A folder on the local computer is no longer being shared via the network. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags.
            dwItem1 contains the folder that is no longer being shared. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.Attributes">
            <summary>
            The attributes of an item or folder have changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the
            item or folder that has changed. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.FolderUpdated">
            <summary>
            The contents of an existing folder have changed, but the folder still exists and has not been renamed. SHCNF_IDLIST or SHCNF_PATH
            must be specified in uFlags. dwItem1 contains the folder that has changed. dwItem2 is not used and should be NULL. If a folder
            has been created, deleted, or renamed, use SHCNE_MKDIR, SHCNE_RMDIR, or SHCNE_RENAMEFOLDER, respectively.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.ItemUpdated">
            <summary>
            An existing item (a folder or a nonfolder) has changed, but the item still exists and has not been renamed. SHCNF_IDLIST or
            SHCNF_PATH must be specified in uFlags. dwItem1 contains the item that has changed. dwItem2 is not used and should be NULL. If a
            nonfolder item has been created, deleted, or renamed, use SHCNE_CREATE, SHCNE_DELETE, or SHCNE_RENAMEITEM, respectively, instead.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.ServerDisconnected">
            <summary>
            The computer has disconnected from a server. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the server
            from which the computer was disconnected. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.SystemImageUpdated">
            <summary>
            An image in the system image list has changed. SHCNF_DWORD must be specified in uFlags. dwItem2 contains the index in the system
            image list that has changed. dwItem1 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.DriveAddedInteractive">
            <summary>
            A drive has been added. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive that was
            added. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.FolderRenamed">
            <summary>
            The name of a folder has changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the previous PIDL or
            name of the folder. dwItem2 contains the new PIDL or name of the folder.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.DriveFreeSpaceChanged">
            <summary>
            The amount of free space on a drive has changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the
            root of the drive on which the free space changed. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.FileAssociationChanged">
            <summary>
            A file type association has changed. SHCNF_IDLIST must be specified in the uFlags parameter. dwItem1 and dwItem2 are not used and
            must be NULL. This event should also be sent for registered protocols.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.AllDiskEvents">
            <summary>All disk related events.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.AllGlobalEvents">
            <summary>All global events.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.ExtendedEvent">
            <summary>System event.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ChangeFilters.AllEvents">
            <summary>All events.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellItemChangeWatcher">
            <summary>Listens to the shell item change notifications and raises events when a folder, or item in a folder, changes.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemChangeWatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItemChangeWatcher"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemChangeWatcher.#ctor(Vanara.Windows.Shell.ShellItem,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItemChangeWatcher"/> class, given the shell item.</summary>
            <param name="shItem">The shell item.</param>
            <param name="inclChildren">if set to <c>true</c> include children.</param>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellItemChangeWatcher.Changed">
            <summary>Occurs when a shell folder or item is changed.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemChangeWatcher.EnableRaisingEvents">
            <summary>Gets or sets a value indicating whether the component is enabled.</summary>
            <value><see langword="true"/> if the component is enabled; otherwise, <see langword="false"/>. The default is <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemChangeWatcher.IncludeChildren">
            <summary>Gets or sets a value indicating whether the children of the specified shell item should be monitored.</summary>
            <value><see langword="true"/> if you want to monitor children; otherwise, <see langword="false"/>. The default is <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemChangeWatcher.Item">
            <summary>Gets or sets the shell item to watch.</summary>
            <value>The shell item to monitor. The default is <see langword="null"/>.</value>
            <exception cref="T:System.ArgumentNullException">Item</exception>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemChangeWatcher.NotifyFilter">
            <summary>Gets or sets the type of changes to watch for.</summary>
            <value>One of the <see cref="T:Vanara.Windows.Shell.ChangeFilters"/> values. The default is <see cref="F:Vanara.Windows.Shell.ChangeFilters.AllEvents"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemChangeWatcher.Path">
            <summary>Gets or sets the path of the shell item to watch.</summary>
            <value>The path of the shell item to monitor. The default is <see langword="null"/>.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemChangeWatcher.BeginInit">
            <summary>
            Begins the initialization of a <see cref="T:Vanara.Windows.Shell.ShellItemChangeWatcher"/> used on a form or used by another component. The
            initialization occurs at run time.
            </summary>
            <remarks>
            The Visual Studio design environment uses this method to start the initialization of a component used on a form or used by
            another component. The <see cref="M:Vanara.Windows.Shell.ShellItemChangeWatcher.EndInit"/> method ends the initialization. Using the <see cref="M:Vanara.Windows.Shell.ShellItemChangeWatcher.BeginInit"/> and
            <see cref="M:Vanara.Windows.Shell.ShellItemChangeWatcher.EndInit"/> methods prevents the control from being used before it is fully initialized.
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemChangeWatcher.EndInit">
            <summary>
            Ends the initialization of a <see cref="T:Vanara.Windows.Shell.ShellItemChangeWatcher"/> used on a form or used by another component. The initialization
            occurs at run time.
            </summary>
            <remarks>
            The Visual Studio design environment uses this method to start the initialization of a component used on a form or used by
            another component. The <see cref="M:Vanara.Windows.Shell.ShellItemChangeWatcher.EndInit"/> method ends the initialization. Using the <see cref="M:Vanara.Windows.Shell.ShellItemChangeWatcher.BeginInit"/> and
            <see cref="M:Vanara.Windows.Shell.ShellItemChangeWatcher.EndInit"/> methods prevents the control from being used before it is fully initialized.
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemChangeWatcher.Dispose(System.Boolean)">
            <summary>Releases unmanaged and - optionally - managed resources.</summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemChangeWatcher.OnChanged(Vanara.Windows.Shell.ShellItemChangeWatcher.ShellItemChangeEventArgs)">
            <summary>Raises the <see cref="E:Vanara.Windows.Shell.ShellItemChangeWatcher.Changed"/> event.</summary>
            <param name="e">The <see cref="T:Vanara.Windows.Shell.ShellItemChangeWatcher.ShellItemChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellItemChangeWatcher.ShellItemChangeEventArgs">
            <summary>Provides data for <see cref="T:Vanara.Windows.Shell.ShellItemChangeWatcher"/> events.</summary>
            <seealso cref="T:System.EventArgs"/>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemChangeWatcher.ShellItemChangeEventArgs.ChangedItems">
            <summary>Gets the items affected by the change.</summary>
            <value>The changed items.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemChangeWatcher.ShellItemChangeEventArgs.ChangeType">
            <summary>Gets the type of change event that occurred.</summary>
            <value>One of the <see cref="T:Vanara.Windows.Shell.ChangeFilters"/> values that represents the kind of change detected for the shell item.</value>
        </member>
        <member name="T:Vanara.Windows.Shell.ComObjWrapper`2">
            <summary></summary>
            <seealso cref="T:System.IComparable`1"/>
            <seealso cref="T:System.IDisposable"/>
            <seealso cref="T:System.IEquatable`1"/>
            <seealso cref="T:System.IEquatable`1"/>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
        </member>
        <member name="F:Vanara.Windows.Shell.ComObjWrapper`2.iObj">
            <summary>The internal reference to the COM object.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObjWrapper`2.#ctor(`1)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ComObjWrapper`2"/> class.</summary>
            <param name="baseInterface">The base interface.</param>
        </member>
        <member name="E:Vanara.Windows.Shell.ComObjWrapper`2.PropertyChanged">
            <summary>Occurs when a property value changes.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ComObjWrapper`2.ComInterface">
            <summary>Gets the COM interface supporting this type.</summary>
            <value>The COM interface.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObjWrapper`2.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObjWrapper`2.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObjWrapper`2.Equals(`1)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObjWrapper`2.Equals(`0)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObjWrapper`2.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ComObjWrapper`2.OnPropertyChanged(System.String)">
            <summary>Called when a property's value has changed.</summary>
            <param name="propName">Name of the property.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellBrowser">
            <summary>A basic implementation of IShellBrowser, IOleCommandTarget and ICommDlgBrowser.</summary>
            <remarks>
              <para>This implementation used a <see cref="T:Vanara.Windows.Shell.ShellView" /> to implement:</para>
              <list type="bullet">
                <item>BrowseObject</item>
                <item>GetWindow</item>
                <item>OnDefaultCommand</item>
                <item>OnStateChange</item>
              </list>
            </remarks>
            <seealso cref="T:Vanara.PInvoke.Shell32.IShellBrowser" />
            <seealso cref="T:Vanara.PInvoke.Ole32.IOleCommandTarget" />
            <seealso cref="T:Vanara.PInvoke.Shell32.IServiceProvider" />
            <seealso cref="T:Vanara.PInvoke.Shell32.ICommDlgBrowser" />
        </member>
        <member name="F:Vanara.Windows.Shell.ShellBrowser.shellView">
            <summary>The <see cref="T:Vanara.Windows.Shell.ShellView"/> instance from initialization.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.#ctor(Vanara.Windows.Shell.ShellView)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellBrowser"/> class with a <see cref="T:Vanara.Windows.Shell.ShellView"/> instance.</summary>
            <param name="view">The <see cref="T:Vanara.Windows.Shell.ShellView"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">view</exception>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellBrowser.ProgressBar">
            <summary>Gets or sets the progress bar associated with the view.</summary>
            <value>The progress bar.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellBrowser.TreeView">
            <summary>Gets or sets the TreeView associated with the view.</summary>
            <value>The TreeView.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.BrowseObject(System.IntPtr,Vanara.PInvoke.Shell32.SBSP)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.ContextSensitiveHelp(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.EnableModelessSB(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.Exec(Vanara.InteropServices.GuidPtr,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.GetControlWindow(Vanara.PInvoke.Shell32.FCW,Vanara.PInvoke.HWND@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.GetViewStateStream(Vanara.PInvoke.STGM,System.Runtime.InteropServices.ComTypes.IStream@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.GetWindow(Vanara.PInvoke.HWND@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.IncludeObject(Vanara.PInvoke.Shell32.IShellView,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.InsertMenusSB(Vanara.PInvoke.HMENU,Vanara.PInvoke.Ole32.OLEMENUGROUPWIDTHS@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.OnDefaultCommand(Vanara.PInvoke.Shell32.IShellView)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.OnStateChange(Vanara.PInvoke.Shell32.IShellView,Vanara.PInvoke.Shell32.CDBOSC)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.OnViewWindowActive(Vanara.PInvoke.Shell32.IShellView)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.QueryActiveShellView(Vanara.PInvoke.Shell32.IShellView@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.QueryStatus(Vanara.InteropServices.GuidPtr,System.UInt32,Vanara.PInvoke.Ole32.OLECMD[],System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.RemoveMenusSB(Vanara.PInvoke.HMENU)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.SendControlMsg(Vanara.PInvoke.Shell32.FCW,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.SetMenuSB(Vanara.PInvoke.HMENU,System.IntPtr,Vanara.PInvoke.HWND)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.SetStatusTextSB(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.SetToolbarItems(Vanara.PInvoke.ComCtl32.TBBUTTON[],System.UInt32,Vanara.PInvoke.Shell32.FCT)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellBrowser.TranslateAcceleratorSB(Vanara.PInvoke.MSG@,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellContextMenu">
             <summary>Provides support for displaying the context menu of a shell item.</summary>
             <remarks>
             <para>Use this class to display a context menu for a shell item, either as a popup menu, or as a main menu.</para>
             <para>
             To display a popup menu, simply call <see cref="M:Vanara.Windows.Shell.ShellContextMenu.ShowContextMenu(System.Drawing.Point,Vanara.PInvoke.Shell32.CMF)"/> with the parent control and the position at which the menu should
             be shown.
             </para>
             <para>
             To display a shell context menu in a Form's main menu, call the <c>Populate</c> or <see cref="M:Vanara.Windows.Shell.ShellContextMenu.GetItems(Vanara.PInvoke.Shell32.CMF)"/> methods to populate the
             menu. In addition, you must intercept a number of special messages that will be sent to the menu's parent form. To do this, you
             must override <see cref="M:System.Windows.Forms.Form.WndProc(System.Windows.Forms.Message@)"/> like so:
             </para>
             <code>
            protected override void WndProc(ref Message m) {
            if ((m_ContextMenu == null) || (!m_ContextMenu.HandleMenuMessage(ref m))) {
            base.WndProc(ref m);
            }
            }
             </code>
             <para>Where m_ContextMenu is the <see cref="T:Vanara.Windows.Shell.ShellContextMenu"/> being shown.</para>
             Standard menu commands can also be invoked from this class, for example <see cref="M:Vanara.Windows.Shell.ShellContextMenu.InvokeDelete"/> and <see cref="M:Vanara.Windows.Shell.ShellContextMenu.InvokeRename"/>.
             </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.#ctor(Vanara.Windows.Shell.ShellItem[])">
            <summary>Initialises a new instance of the <see cref="T:Vanara.Windows.Shell.ShellContextMenu"/> class.</summary>
            <param name="items">The items to which the context menu should refer.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.Finalize">
            <summary>Finalizes an instance of the <see cref="T:Vanara.Windows.Shell.ShellContextMenu"/> class.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellContextMenu.ComInterface">
            <summary>Gets the underlying COM <see cref="T:Vanara.PInvoke.Shell32.IContextMenu"/> interface.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.GetHelpTextForCommand(System.Int32)">
            <summary>Gets the help text for a specified command.</summary>
            <param name="command">The menu command identifier offset.</param>
            <returns>The help text value if available; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.GetVerbIconLocationForCommand(System.Int32)">
            <summary>Gets the icon location for a specified command.</summary>
            <param name="command">The menu command identifier offset.</param>
            <returns>The icon location if available; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.GetVerbForCommand(System.Int32)">
            <summary>Gets the verb for a specified command.</summary>
            <param name="command">The menu command identifier offset.</param>
            <returns>The verb if available; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.GetItems(Vanara.PInvoke.Shell32.CMF)">
            <summary>Gets the information of all the menu items supported by the underlying interface.</summary>
            <value>The menu item information.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.HandleMenuMessage(System.Windows.Forms.Message@)">
             <summary>Handles context menu messages when the <see cref="T:Vanara.Windows.Shell.ShellContextMenu"/> is displayed on a Form's main menu bar.</summary>
             <remarks>
             <para>
             To display a shell context menu in a Form's main menu, call the <c>Populate(Menu, CMF)</c> method to populate the menu with the
             shell item's menu items. In addition, you must intercept a number of special messages that will be sent to the menu's parent
             form. To do this, you must override <see cref="M:System.Windows.Forms.Form.WndProc(System.Windows.Forms.Message@)"/> like so:
             </para>
             <code>
            protected override void WndProc(ref Message m) {
            if ((m_ContextMenu == null) || (!m_ContextMenu.HandleMenuMessage(ref m))) {
            base.WndProc(ref m);
            }
            }
             </code>
             <para>Where m_ContextMenu is the <see cref="T:Vanara.Windows.Shell.ShellContextMenu"/> being shown.</para>
             </remarks>
             <param name="m">The message to handle.</param>
             <returns>
             <see langword="true"/> if the message was a Shell Context Menu message, <see langword="false"/> if not. If the method returns
             false, then the message should be passed down to the base class's <see cref="M:System.Windows.Forms.Form.WndProc(System.Windows.Forms.Message@)"/> method.
             </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.InvokeCommand(Vanara.PInvoke.ResourceId,Vanara.PInvoke.ShowWindowCommand,Vanara.PInvoke.HWND,System.Nullable{System.Drawing.Point},System.Boolean,System.Boolean,System.Boolean,System.UInt32,System.Boolean,System.Boolean,System.String)">
            <summary>Invokes the command.</summary>
            <param name="verb">
            The address of a null-terminated string that specifies the language-independent name of the command to carry out. This member is
            typically a string when a command is being activated by an application. The system provides predefined constant values for the
            following command strings.
            <para>
            If a canonical verb exists and a menu handler does not implement the canonical verb, it must return a failure code to enable the
            next handler to be able to handle this verb.Failing to do this will break functionality in the system including ShellExecute.
            </para>
            <para>
            Alternatively, rather than a pointer, this parameter can be MAKEINTRESOURCE(offset) where offset is the menu-identifier offset
            of the command to carry out. Implementations can use the IS_INTRESOURCE macro to detect that this alternative is being employed.
            The Shell uses this alternative when the user chooses a menu command.
            </para>
            </param>
            <param name="show">A set of values to pass to the ShowWindow function if the command displays a window or starts an application.</param>
            <param name="parent">
            A handle to the window that is the owner of the shortcut menu. An extension can also use this handle as the owner of any message
            boxes or dialog boxes it displays. Callers must specify a legitimate HWND that can be used as the owner window for any UI that
            may be displayed. Failing to specify an HWND when calling from a UI thread (one with windows already created) will result in
            reentrancy and possible bugs in the implementation of this call.
            </param>
            <param name="location">If supplied, the point where the command is invoked.</param>
            <param name="allowAsync">
            The implementation can spin off a new thread or process to handle the call and does not need to block on completion of the
            function being invoked. For example, if the verb is "delete" the call may return before all of the items have been deleted.
            Since this is advisory, calling applications that specify this flag cannot guarantee that this request will be honored if they
            are not familiar with the implementation of the verb that they are invoking.
            </param>
            <param name="shiftDown">
            If <see langword="true"/>, the SHIFT key is pressed. Use this instead of polling the current state of the keyboard that may have
            changed since the verb was invoked.
            </param>
            <param name="ctrlDown">
            If <see langword="true"/>, the CTRL key is pressed. Use this instead of polling the current state of the keyboard that may have
            changed since the verb was invoked..
            </param>
            <param name="hotkey">An optional keyboard shortcut to assign to any application activated by the command.</param>
            <param name="logUsage">
            If <see langword="true"/>, indicates that the method might want to keep track of the item being invoked for features like the
            "Recent documents" menu.
            </param>
            <param name="noZoneChecks">
            Do not perform a zone check. This flag allows ShellExecuteEx to bypass zone checking put into place by IAttachmentExecute.
            </param>
            <param name="parameters">Optional parameters.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.InvokeCopy">
            <summary>Invokes the Copy command on the shell item(s).</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.InvokeCut">
            <summary>Invokes the Copy command on the shell item(s).</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.InvokeDelete">
            <summary>Invokes the Delete command on the shell item(s).</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.InvokePaste">
            <summary>Invokes the Paste command on the shell item(s).</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.InvokeRename">
            <summary>Invokes the Rename command on the shell item.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.InvokeVerb(System.String,Vanara.PInvoke.ShowWindowCommand,Vanara.PInvoke.HWND)">
            <summary>Invokes the specified verb on the shell item(s).</summary>
            <param name="verb">The verb to invoke.</param>
            <param name="show">Flags that specify how to display any opened window.</param>
            <param name="parent">
            A handle to the window that is the owner of the shortcut menu. An extension can also use this handle as the owner of any message
            boxes or dialog boxes it displays. Callers must specify a legitimate HWND that can be used as the owner window for any UI that
            may be displayed. Failing to specify an HWND when calling from a UI thread (one with windows already created) will result in
            reentrancy and possible bugs in the implementation of this call.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.ShowContextMenu(System.Drawing.Point,Vanara.PInvoke.Shell32.CMF)">
            <summary>Shows a context menu for a shell item.</summary>
            <param name="pos">The position on the screen that the menu should be displayed at.</param>
            <param name="menuOptions">The options that determine which items are requested from <see cref="T:Vanara.PInvoke.Shell32.IContextMenu"/>.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.Dispose(System.Boolean)">
            <summary>Releases unmanaged and - optionally - managed resources.</summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellContextMenu.MenuItemInfo">
            <summary>Provides information about a single menu entry discovered in a native menu.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellContextMenu.MenuItemInfo.BitmapHandle">
            <summary>
            <para>A handle to the bitmap to be displayed, or it can be one of the values in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>HBMMENU_CALLBACK ((HBITMAP) -1)</term>
            <term>
            A bitmap that is drawn by the window that owns the menu. The application must process the WM_MEASUREITEM and WM_DRAWITEM messages.
            </term>
            </item>
            <item>
            <term>HBMMENU_MBAR_CLOSE ((HBITMAP) 5)</term>
            <term>Close button for the menu bar.</term>
            </item>
            <item>
            <term>HBMMENU_MBAR_CLOSE_D ((HBITMAP) 6)</term>
            <term>Disabled close button for the menu bar.</term>
            </item>
            <item>
            <term>HBMMENU_MBAR_MINIMIZE ((HBITMAP) 3)</term>
            <term>Minimize button for the menu bar.</term>
            </item>
            <item>
            <term>HBMMENU_MBAR_MINIMIZE_D ((HBITMAP) 7)</term>
            <term>Disabled minimize button for the menu bar.</term>
            </item>
            <item>
            <term>HBMMENU_MBAR_RESTORE ((HBITMAP) 2)</term>
            <term>Restore button for the menu bar.</term>
            </item>
            <item>
            <term>HBMMENU_POPUP_CLOSE ((HBITMAP) 8)</term>
            <term>Close button for the submenu.</term>
            </item>
            <item>
            <term>HBMMENU_POPUP_MAXIMIZE ((HBITMAP) 10)</term>
            <term>Maximize button for the submenu.</term>
            </item>
            <item>
            <term>HBMMENU_POPUP_MINIMIZE ((HBITMAP) 11)</term>
            <term>Minimize button for the submenu.</term>
            </item>
            <item>
            <term>HBMMENU_POPUP_RESTORE ((HBITMAP) 9)</term>
            <term>Restore button for the submenu.</term>
            </item>
            <item>
            <term>HBMMENU_SYSTEM ((HBITMAP) 1)</term>
            <term>Windows icon or the icon of the window specified in dwItemData.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellContextMenu.MenuItemInfo.HelpText">
            <summary>Gets the help text (tool tip) associated with the menu.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellContextMenu.MenuItemInfo.Id">
            <summary>An application-defined value that identifies the menu item.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellContextMenu.MenuItemInfo.State">
            <summary>The menu item state. This member can be one or more of the <see cref="T:Vanara.PInvoke.User32.MenuItemState"/> values.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellContextMenu.MenuItemInfo.SubMenus">
            <summary>
            The submenu items associated with the menu item. If the menu item is not an item that opens a drop-down menu or submenu,
            this member has no values.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellContextMenu.MenuItemInfo.Text">
            <summary>The contents of the menu item. The meaning of this member depends on the value of <see cref="P:Vanara.Windows.Shell.ShellContextMenu.MenuItemInfo.Type"/>.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellContextMenu.MenuItemInfo.Type">
            <summary>
            <para>The menu item type. This member can be one or more of the <see cref="T:Vanara.PInvoke.User32.MenuItemType"/> values.</para>
            <para>The <c>MFT_BITMAP</c>, <c>MFT_SEPARATOR</c>, and <c>MFT_STRING</c> values cannot be combined with one another.</para>
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellContextMenu.MenuItemInfo.Verb">
            <summary>Gets the verb associated with the menu.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellContextMenu.MenuItemInfo.VerbIconLocation">
            <summary>Gets the icon location associated with the menu's image.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellContextMenu.MenuItemInfo.GetMenuItems(Vanara.PInvoke.HMENU)">
            <summary>Recursively gets the information for all menu item entries supplied by the provided native menu.</summary>
            <param name="hMenu">The handle to the created native menu.</param>
            <returns>An array of <see cref="T:Vanara.Windows.Shell.ShellContextMenu.MenuItemInfo"/> instances with information about the entries in <paramref name="hMenu"/>.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.FolderItemFilter">
            <summary>A filter for the types of children to enumerate.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.FolderItemFilter.Folders">
            <summary>Include items that are folders in the enumeration.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.FolderItemFilter.NonFolders">
            <summary>Include items that are not folders in the enumeration.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.FolderItemFilter.IncludeHidden">
            <summary>Include hidden items in the enumeration. This does not include hidden system items. (To include hidden system items, use IncludeSuperHidden.)</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.FolderItemFilter.Printers">
            <summary>The calling application is looking for printer objects.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.FolderItemFilter.Shareable">
            <summary>The calling application is looking for resources that can be shared.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.FolderItemFilter.Storage">
            <summary>Include items with accessible storage and their ancestors, including hidden items.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.FolderItemFilter.FastItems">
            <summary>Windows Vista and later. The calling application is looking for resources that can be enumerated quickly.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.FolderItemFilter.FlatList">
            <summary>Windows Vista and later. Enumerate items as a simple list even if the folder itself is not structured in that way.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.FolderItemFilter.IncludeSuperHidden">
            <summary>
            Windows 7 and later. Include hidden system items in the enumeration. This value does not include hidden non-system items. (To include hidden
            non-system items, use IncludeHidden.)
            </summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellFolder">
            <summary>A folder or container of <see cref="T:Vanara.Windows.Shell.ShellItem" /> instances.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFolder.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItem"/> class.</summary>
            <param name="path">The file system path of the item.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFolder.#ctor(Vanara.PInvoke.Shell32.KNOWNFOLDERID)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItem"/> class.</summary>
            <param name="knownFolder">A known folder value.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFolder.#ctor(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItem"/> class.</summary>
            <param name="idList">The ID list.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFolder.#ctor(Vanara.Windows.Shell.ShellItem)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellFolder"/> class.</summary>
            <param name="shellItem">A ShellItem instance whose IsFolder property is <c>true</c>.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFolder.#ctor(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellFolder"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFolder.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellFolder"/> class.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFolder.Desktop">
            <summary>Gets a reference to the primary Desktop.</summary>
            <value>The desktop instance.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFolder.Item(System.String)">
            <summary>Gets the <see cref="T:Vanara.Windows.Shell.ShellItem"/> with the specified child name.</summary>
            <value>The <see cref="T:Vanara.Windows.Shell.ShellItem"/> instance matching <paramref name="childName"/>.</value>
            <param name="childName">Name of the child item.</param>
            <returns>The <see cref="T:Vanara.Windows.Shell.ShellItem"/> instance matching <paramref name="childName"/>, if it exists.</returns>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFolder.Item(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Gets a child <see cref="T:Vanara.Windows.Shell.ShellItem"/> reference from a parent and child PIDL.</summary>
            <param name="relativePidl">A valid relative PIDL.</param>
            <returns>A child <see cref="T:Vanara.Windows.Shell.ShellItem"/> reference.</returns>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellFolder.IShellFolder">
            <summary>Gets the underlying <see cref="P:Vanara.Windows.Shell.ShellFolder.IShellFolder"/> instance.</summary>
            <value>The underlying <see cref="P:Vanara.Windows.Shell.ShellFolder.IShellFolder"/> instance.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFolder.BindToObject``1(Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx)">
            <summary>
            Retrieves a handler, typically the Shell folder object that implements IShellFolder for a particular item. Optional parameters
            that control the construction of the handler are passed in the bind context.
            </summary>
            <typeparam name="T">Type of the interface to get, usually IShellFolder or IStream.</typeparam>
            <param name="relativePidl">
            A relative PIDL that identifies the subfolder. This value can refer to an item at any level below the parent folder in the
            namespace hierarchy.
            </param>
            <param name="bindCtx">
            A pointer to an IBindCtx interface on a bind context object that can be used to pass parameters to the construction of the
            handler. If this parameter is not used, set it to <see langword="null"/>. Because support for this parameter is optional for
            folder object implementations, some folders may not support the use of bind contexts.
            <para>
            Information that can be provided in the bind context includes a BIND_OPTS structure that includes a grfMode member that
            indicates the access mode when binding to a stream handler. Other parameters can be set and discovered using
            IBindCtx::RegisterObjectParam and IBindCtx::GetObjectParam.
            </para>
            </param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFolder.BindToStorage``1(Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx)">
            <summary>Requests a pointer to an object's storage interface.</summary>
            <typeparam name="T">Type of the interface to get, usuall IStream, IStorage, or IPropertySetStorage.</typeparam>
            <param name="relativePidl">The PIDL that identifies the subfolder relative to its parent folder.</param>
            <param name="bindCtx">
            The optional address of an IBindCtx interface on a bind context object to be used during this operation. If this parameter is
            not used, set it to <see langword="null"/>. Because support for pbc is optional for folder object implementations, some folders
            may not support the use of bind contexts.
            </param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFolder.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFolder.EnumerateChildren(Vanara.Windows.Shell.FolderItemFilter,System.Windows.Forms.IWin32Window)">
            <summary>
            Enumerates all children of this item. If this item is not a folder/container, this method will return an empty enumeration.
            </summary>
            <param name="filter">A filter for the types of children to enumerate.</param>
            <param name="parentWindow">The parent window.</param>
            <returns>An enumerated list of children matching the filter.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFolder.GetChildrenUIObjects``1(System.Windows.Forms.IWin32Window,Vanara.Windows.Shell.ShellItem[])">
            <summary>Gets an object that can be used to carry out actions on the specified file objects or folders.</summary>
            <typeparam name="TInterface">The interface to retrieve, typically IShellView.</typeparam>
            <param name="parentWindow">The owner window that the client should specify if it displays a dialog box or message box..</param>
            <param name="children">The file objects or subfolders relative to the parent folder for which to get the interface.</param>
            <returns>The interface pointer requested.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFolder.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFolder.GetViewObject``1(System.Windows.Forms.IWin32Window)">
            <summary>Requests an object that can be used to obtain information from or interact with a folder object.</summary>
            <typeparam name="TInterface">The interface to retrieve, typically IShellView.</typeparam>
            <param name="parentWindow">The owner window.</param>
            <returns>The interface pointer requested.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFolder.IsChild(Vanara.Windows.Shell.ShellItem)">
            <summary>Determines if the supplied <see cref="T:Vanara.Windows.Shell.ShellItem"/> is an immediate descendant of this folder.</summary>
            <param name="item">The child item to test.</param>
            <returns><c>true</c> if <paramref name="item"/> is an immediate descendant of this folder.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFolder.RenameChild(Vanara.PInvoke.Shell32.PIDL,System.String,Vanara.Windows.Shell.ShellItemDisplayString,System.Windows.Forms.IWin32Window)">
            <summary>Renames a child of this folder.</summary>
            <param name="relativeChildPidl">The relative child IDL.</param>
            <param name="newName">The new name.</param>
            <param name="displayType">The display type.</param>
            <param name="parentWindow">The parent window to use if any messages need to be shown the user.</param>
            <returns>A reference to the newly named item.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellFolder.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellItemAttribute">
            <summary>Attributes that can be retrieved on an item (file or folder) or set of items using <see cref="P:Vanara.Windows.Shell.ShellItem.Attributes"/>.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.CanCopy">
            <summary>The specified items can be copied.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.CanMove">
            <summary>The specified items can be moved.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.CanLink">
            <summary>
            Shortcuts can be created for the specified items. If a namespace extension returns this attribute, a Create Shortcut entry with a
            default handler is added to the shortcut menu that is displayed during drag-and-drop operations. The extension can also implement
            its own handler for the link verb in place of the default. If the extension does so, it is responsible for creating the shortcut.
            A Create Shortcut item is also added to the Windows Explorer File menu and to normal shortcut menus. If the item is selected,
            your application's IContextMenu::InvokeCommand method is invoked with the lpVerb member of the CMINVOKECOMMANDINFO structure set
            to link. Your application is responsible for creating the link.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.Storage">
            <summary>
            The specified items can be bound to an IStorage object throughIShellFolder::BindToObject. For more information about namespace
            manipulation capabilities, see IStorage.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.CanRename">
            <summary>
            The specified items can be renamed. Note that this value is essentially a suggestion; not all namespace clients allow items to be
            renamed. However, those that do must have this attribute set.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.CanDelete">
            <summary>The specified items can be deleted.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.HasPropSheet">
            <summary>The specified items have property sheets.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.DropTarget">
            <summary>The specified items are drop targets.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.CapabilityMask">
            <summary>
            This flag is a mask for the capability attributes: CANCOPY, CANMOVE, CANLINK, CANRENAME, CANDELETE, HASPROPSHEET, and DROPTARGET.
            Callers normally do not use this value.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.System">
            <summary>Windows 7 and later. The specified items are system items.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.Encrypted">
            <summary>The specified items are encrypted and might require special presentation.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.IsSlow">
            <summary>
            Accessing the item (through IStream or other storage interfaces) is expected to be a slow operation. Applications should avoid
            accessing items flagged with ISSLOW. Note: Opening a stream for an item is generally a slow operation at all times. ISSLOW
            indicates that it is expected to be especially slow, for example in the case of slow network connections or offline
            (FILE_ATTRIBUTE_OFFLINE) files. However, querying ISSLOW is itself a slow operation. Applications should query ISSLOW only on a
            background thread. An alternate method, such as retrieving the PKEY_FileAttributes property and testing for
            FILE_ATTRIBUTE_OFFLINE, could be used in place of a method call that involves ISSLOW.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.Ghosted">
            <summary>The specified items are shown as dimmed and unavailable to the user.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.Link">
            <summary>The specified items are shortcuts.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.Share">
            <summary>The specified objects are shared.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.ReadOnly">
            <summary>
            The specified items are read-only. In the case of folders, this means that new items cannot be created in those folders. This
            should not be confused with the behavior specified by the FILE_ATTRIBUTE_READONLY flag retrieved by IColumnProvider::GetItemData
            in a SHCOLUMNDATAstructure. FILE_ATTRIBUTE_READONLY has no meaning for Win32 file system folders.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.Hidden">
            <summary>
            The item is hidden and should not be displayed unless the Show hidden files and folders option is enabled in Folder Settings.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.DisplayAttrMask">
            <summary>Do not use.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.NonEnumerated">
            <summary>
            The items are non-enumerated items and should be hidden. They are not returned through an enumerator such as that created by
            the IShellFolder::EnumObjects method.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.NewContent">
            <summary>The items contain new content, as defined by the particular application.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.CanMoniker">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.HasStorage">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.Stream">
            <summary>
            Indicates that the item has a stream associated with it. That stream can be accessed through a call to IShellFolder::BindToObject
            orIShellItem::BindToHandler with IID_IStream in the riid parameter.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.StorageAncestor">
            <summary>Children of this item are accessible through IStream or IStorage. Those children are flagged with STORAGE or STREAM.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.Validate">
            <summary>
            When specified as input, VALIDATE instructs the folder to validate that the items contained in a folder or Shell item array
            exist. If one or more of those items do not exist, IShellFolder::GetAttributesOf and IShellItemArray::GetAttributes return a
            failure code. This flag is never returned as an [out] value. When used with the file system folder, VALIDATE instructs the folder
            to discard cached properties retrieved by clients of IShellFolder2::GetDetailsEx that might have accumulated for the specified items.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.Removable">
            <summary>The specified items are on removable media or are themselves removable devices.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.Compressed">
            <summary>The specified items are compressed.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.Browsable">
            <summary>The specified items can be hosted inside a web browser or Windows Explorer frame.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.FileSysAncestor">
            <summary>
            The specified folders are either file system folders or contain at least one descendant (child, grandchild, or later) that is a
            file system (FILESYSTEM) folder.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.Folder">
            <summary>
            The specified items are folders. Some items can be flagged with both STREAM and FOLDER, such as a compressed file with a .zip
            file name extension. Some applications might include this flag when testing for items that are both files and containers.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.FileSystem">
            <summary>
            The specified folders or files are part of the file system (that is, they are files, directories, or root directories). The
            parsed names of the items can be assumed to be valid Win32 file system paths. These paths can be either UNC or drive-letter based.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.StorageCapMask">
            <summary>
            This flag is a mask for the storage capability attributes: STORAGE, LINK, READONLY, STREAM, STORAGEANCESTOR, FILESYSANCESTOR,
            FOLDER, and FILESYSTEM. Callers normally do not use this value.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.HasSubfolder">
            <summary>
            The specified folders have subfolders. The HASSUBFOLDER attribute is only advisory and might be returned by Shell folder
            implementations even if they do not contain subfolders. Note, however, that the converse—failing to return
            HASSUBFOLDER—definitively states that the folder objects do not have subfolders. Returning HASSUBFOLDER is recommended whenever a
            significant amount of time is required to determine whether any subfolders exist. For example, the Shell always returns
            HASSUBFOLDER when a folder is located on a network drive.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.ContentsMask">
            <summary>This flag is a mask for content attributes, at present only HASSUBFOLDER. Callers normally do not use this value.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemAttribute.PKEYMask">
            <summary>
            Mask used by the PKEY_SFGAOFlags property to determine attributes that are considered to cause slow calculations or lack context:
            ISSLOW, READONLY, HASSUBFOLDER, and VALIDATE. Callers normally do not use this value.
            </summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellItemComparison">
            <summary>Used to determine how to compare two Shell items. ShellItem.Compare uses this enumerated type.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemComparison.AllFields">
            <summary>Exact comparison of two instances of a Shell item.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemComparison.Canonical">
            <summary>Indicates that the comparison is based on a canonical name.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemComparison.Display">
            <summary>Indicates that the comparison is based on the display in a folder view.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemComparison.SecondaryFileSystemPath">
            <summary>Windows 7 and later. If the Shell items are not the same, test the file system paths.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellItemDisplayString">
            <summary>Requests the form of an item's display name to retrieve through <see cref="M:Vanara.Windows.Shell.ShellItem.GetDisplayName(Vanara.Windows.Shell.ShellItemDisplayString)"/>.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemDisplayString.NormalDisplay">
            <summary>Returns the display name relative to the parent folder. In UI this name is generally ideal for display to the user.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemDisplayString.ParentRelativeParsing">
            <summary>Returns the parsing name relative to the parent folder. This name is not suitable for use in UI.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemDisplayString.DesktopAbsoluteParsing">
            <summary>Returns the parsing name relative to the desktop. This name is not suitable for use in UI.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemDisplayString.ParentRelativeEditing">
            <summary>Returns the editing name relative to the parent folder. In UI this name is suitable for display to the user.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemDisplayString.DesktopAbsoluteEditing">
            <summary>Returns the editing name relative to the desktop. In UI this name is suitable for display to the user.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemDisplayString.FileSysPath">
            <summary>
            Returns the item's file system path, if it has one. Only items that report SFGAO_FILESYSTEM have a file system path. When an item
            does not have a file system path, a call to IShellItem::GetDisplayName on that item will fail. In UI this name is suitable for
            display to the user in some cases, but note that it might not be specified for all items.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemDisplayString.Url">
            <summary>
            Returns the item's URL, if it has one. Some items do not have a URL, and in those cases a call to IShellItem::GetDisplayName will
            fail. This name is suitable for display to the user in some cases, but note that it might not be specified for all items.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemDisplayString.ParentRelativeForAddressBar">
            <summary>
            Returns the path relative to the parent folder in a friendly format as displayed in an address bar. This name is suitable for
            display to the user.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemDisplayString.ParentRelative">
            <summary>Returns the path relative to the parent folder.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemDisplayString.ParentRelativeForUI">
            <summary>Introduced in Windows 8.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellItemGetImageOptions">
            <summary>Options for retrieving images from a <see cref="T:Vanara.Windows.Shell.ShellItem"/>.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemGetImageOptions.ResizeToFit">
            <summary>Shrink the bitmap as necessary to fit, preserving its aspect ratio.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemGetImageOptions.BiggerSizeOk">
            <summary>
            Passed by callers if they want to stretch the returned image themselves. For example, if the caller passes an icon size of 80x80,
            a 96x96 thumbnail could be returned. This action can be used as a performance optimization if the caller expects that they will
            need to stretch the image.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemGetImageOptions.MemoryOnly">
            <summary>
            Return the item only if it is already in memory. Do not access the disk even if the item is cached. Note that this only returns
            an already-cached icon and can fall back to a per-class icon if an item has a per-instance icon that has not been cached.
            Retrieving a thumbnail, even if it is cached, always requires the disk to be accessed, so GetImage should not be called from the
            UI thread without passing MemoryOnly.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemGetImageOptions.IconOnly">
            <summary>Return only the icon, never the thumbnail.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemGetImageOptions.ThumbnailOnly">
            <summary>
            Return only the thumbnail, never the icon. Note that not all items have thumbnails, so ThumbnailOnly will cause the method to
            fail in these cases.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemGetImageOptions.InCacheOnly">
            <summary>
            Allows access to the disk, but only to retrieve a cached item. This returns a cached thumbnail if it is available. If no cached
            thumbnail is available, it returns a cached per-instance icon but does not extract a thumbnail or icon.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemGetImageOptions.CropToSquare">
            <summary>Introduced in Windows 8. If necessary, crop the bitmap to a square.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemGetImageOptions.WideThumbnails">
            <summary>Introduced in Windows 8. Stretch and crop the bitmap to a 0.7 aspect ratio.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemGetImageOptions.IconBackground">
            <summary>
            Introduced in Windows 8. If returning an icon, paint a background using the associated app's registered background color.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemGetImageOptions.ScaleUp">
            <summary>Introduced in Windows 8. If necessary, stretch the bitmap so that the height and width fit the given size.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellItemToolTipOptions">
            <summary>Flags that direct the handling of the item from which you're retrieving the info tip text.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemToolTipOptions.Default">
            <summary>No special handling.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemToolTipOptions.Name">
            <summary>Provide the name of the item in ppwszTip rather than the info tip text.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemToolTipOptions.LinkNotTarget">
            <summary>If the item is a shortcut, retrieve the info tip text of the shortcut rather than its target.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemToolTipOptions.LinkTarget">
            <summary>If the item is a shortcut, retrieve the info tip text of the shortcut's target.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemToolTipOptions.AllowDelay">
            <summary>Search the entire namespace for the information. This value can result in a delayed response time.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemToolTipOptions.SingleLine">
            <summary><c>Windows Vista and later.</c> Put the info tip on a single line.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellItem">
            <summary>Encapsulates an item in the Windows Shell.</summary>
            <seealso cref="T:System.IComparable`1"/>
            <seealso cref="T:System.IDisposable"/>
            <seealso cref="T:System.IEquatable`1"/>
            <seealso cref="T:System.IEquatable`1"/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItem"/> class.</summary>
            <param name="path">The file system path of the item.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.#ctor(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItem"/> class.</summary>
            <param name="idList">The ID list.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.#ctor(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItem"/> class.</summary>
            <param name="si">An existing IShellItem instance.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.#ctor(Vanara.PInvoke.Shell32.KNOWNFOLDERID)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItem"/> class.</summary>
            <param name="knownFolder">A known folder reference.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItem"/> class.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellItem.PropertyChanged">
            <summary>Occurs when a property value changes.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.Attributes">
            <summary>Gets the attributes for the Shell item.</summary>
            <value>The attributes of the Shell item.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.ContextMenu">
            <summary>Gets the context menu detail for this shell item.</summary>
            <value>The context menu.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.DataObject">
            <summary>Returns a <see cref="T:System.Windows.Forms.DataObject"/> representing the item. This object is used in drag and drop operations.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.FileInfo">
            <summary>Gets the <see cref="T:Vanara.Windows.Shell.ShellFileInfo"/> corresponding to this instance.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.FileSystemPath">
            <summary>Gets the file system path if this item is part of the file system.</summary>
            <value>The file system path.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.Images">
            <summary>Gets an object that provides access to all the images available for this shell item.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.IsFileSystem">
            <summary>Gets a value indicating whether this instance is part of the file system.</summary>
            <value><c>true</c> if this instance is part of the file system; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.IsFolder">
            <summary>Gets a value indicating whether this instance is folder.</summary>
            <value><c>true</c> if this instance is folder; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.IShellItem">
            <summary>Gets the IShellItem instance of the current ShellItem.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.IsLink">
            <summary>Gets a value indicating whether this instance is link.</summary>
            <value><c>true</c> if this instance is link; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.Name">
            <summary>Gets the name relative to the parent for the item.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.Parent">
            <summary>Gets the parent for the current item.</summary>
            <value>The parent item. If this is the desktop, this property will return <c>null</c>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.ParsingName">
            <summary>Gets a string that can be used to parse an absolute value from the Desktop.</summary>
            <value>A parsable name for the item.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.PIDL">
            <summary>Gets the item's ID list.</summary>
            <value>The ID list for the item.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.Properties">
            <summary>
            <para>Gets the property store for the item.</para>
            <note>Initially, this property store is the read-only store (change from R/W in v3.2.9) and should always have properties.
            However, setting any of the properties of this value change the function of all subsequent uses. For example, if you set the
            <see cref="P:Vanara.Windows.Shell.ShellItemPropertyStore.ReadOnly"/> value to <see langword="false"/>, all subsequent calls to <see
            cref="P:Vanara.Windows.Shell.ShellItem.Properties"/> will access the read-write property store. If this <see cref="T:Vanara.Windows.Shell.ShellItem"/> does not support
            properties directly, your use of this property will fail. It is important that you check for exceptions when changing the
            properties of this value to prevent unexpected failures.</note>
            </summary>
            <value>The dictionary of properties.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.PropertyDescriptions">
            <summary>Gets a property description list object containing descriptions of all properties suitable to be shown in the UI.</summary>
            <returns>A complete <see cref="T:Vanara.Windows.Shell.PropertyDescriptionList"/> instance.</returns>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.ToolTipText">
            <summary>Gets the normal tool tip text associated with this item.</summary>
            <value>The tool tip text.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.Verbs">
            <summary>Gets the of verbs defined for this item.</summary>
            <value>The list of verbs.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItem.BindContext">
            <summary>Gets the system bind context.</summary>
            <value>The bind context.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.Open(System.String)">
            <summary>Creates the most specialized derivative of ShellItem from a path.</summary>
            <param name="path">The file system path of the item.</param>
            <returns>A ShellItem derivative for the supplied path.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.Open(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Creates the most specialized derivative of ShellItem from an IShellItem object.</summary>
            <param name="iItem">The IShellItem object.</param>
            <returns>A ShellItem derivative for the supplied IShellItem.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.Open(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL)">
            <summary>Creates the most specialized derivative of ShellItem from a parented PIDL.</summary>
            <param name="iFolder">The IShellFolder for the parent.</param>
            <param name="pidl">The relative ID List for a child item within <paramref name="iFolder"/>.</param>
            <returns>A ShellItem derivative for the supplied parented PIDL.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.Open(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Creates the most specialized derivative of ShellItem from a PIDL.</summary>
            <param name="idList">The ID list.</param>
            <returns>A ShellItem derivative for the supplied PIDL.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.op_Inequality(Vanara.Windows.Shell.ShellItem,Vanara.Windows.Shell.ShellItem)">
            <summary>Implements the operator !=.</summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.op_Equality(Vanara.Windows.Shell.ShellItem,Vanara.Windows.Shell.ShellItem)">
            <summary>Implements the operator ==.</summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.CompareTo(Vanara.Windows.Shell.ShellItem,Vanara.Windows.Shell.ShellItemComparison)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current
            instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <param name="hint">Optional hint value that determines how to perform the comparison. The default compares all fields.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. If the two items are the same this parameter equals
            zero; if they are different the parameter is nonzero.
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.Equals(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.Equals(Vanara.Windows.Shell.ShellItem)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.GetDisplayName(Vanara.Windows.Shell.ShellItemDisplayString)">
            <summary>Gets a formatted display name for this item.</summary>
            <param name="option">The formatting options.</param>
            <returns>A string with the formatted display name if successful; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.GetHandler``1(Vanara.PInvoke.Shell32.BHID)">
            <summary>Gets a handler interface.</summary>
            <typeparam name="TInterface">The interface of the handler to return.</typeparam>
            <param name="handler">The bind handler to retrieve.</param>
            <returns>The requested interface.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.GetHandler``1(System.Runtime.InteropServices.ComTypes.IBindCtx,Vanara.PInvoke.Shell32.BHID)">
            <summary>Gets a handler interface.</summary>
            <typeparam name="TInterface">The interface of the handler to return.</typeparam>
            <param name="bindCtx">The bind context.</param>
            <param name="handler">The bind handler to retrieve.</param>
            <returns>The requested interface.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">handler</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.GetImage(System.Drawing.Size,Vanara.Windows.Shell.ShellItemGetImageOptions)">
            <summary>
            Gets an image that represents this item. The default behavior is to load a thumbnail. If there is no thumbnail for the current
            item, it retrieves the icon of the item. The thumbnail or icon is extracted if it is not currently cached.
            </summary>
            <param name="size">A structure that specifies the size of the image to be received.</param>
            <param name="flags">One or more of the option flags.</param>
            <returns>The resulting image.</returns>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.GetPropertyDescriptionList(Vanara.PInvoke.Ole32.PROPERTYKEY)">
            <summary>Gets a property description list object given a reference to a property key.</summary>
            <param name="keyType">
            A reference to a PROPERTYKEY structure. The values in <see cref="T:Vanara.PInvoke.Ole32.PROPERTYKEY.System.PropList"/> are all valid.
            <see cref="P:Vanara.PInvoke.Ole32.PROPERTYKEY.System.PropList.FullDetails"/> will return all properties. This is the default.
            </param>
            <returns>A <see cref="T:Vanara.Windows.Shell.PropertyDescriptionList"/> instance for the supplied key.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.GetStream(Vanara.PInvoke.STGM)">
            <summary>Gets the stream of the file contents.</summary>
            <param name="mode">Flags that should be used when opening the file.</param>
            <returns>The file stream.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.GetToolTip(Vanara.Windows.Shell.ShellItemToolTipOptions)">
            <summary>Gets the formatted tool tip text associated with this item.</summary>
            <param name="options">The option flags.</param>
            <returns>The tool tip text formatted as per <paramref name="options"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.InvokeVerb(System.String,System.String,System.Boolean)">
            <summary>Invokes the item's command verb.</summary>
            <param name="verb">The language-independent name of the command to carry out.</param>
            <param name="args">The optional parameters.</param>
            <param name="hideUI">
            If <see langword="true"/>, the system is prevented from displaying user interface elements (for example, error messages) while
            carrying out the command.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.ToUri">
            <summary>Returns a URI representation of the <see cref="T:Vanara.Windows.Shell.ShellItem"/>.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.Update">
            <summary>Ensures that all cached information for this item is updated.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.ViewInExplorer">
            <summary>Open a new Windows Explorer window with this item selected if item or this item if folder.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.System#IComparable{Vanara#Windows#Shell#ShellItem}#CompareTo(Vanara.Windows.Shell.ShellItem)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current
            instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. If the two items are the same this parameter equals
            zero; if they are different the parameter is nonzero.
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.GetBHIDForInterface``1">
            <summary>Gets the BHID for the supplied <typeparamref name="TInterface"/>.</summary>
            <typeparam name="TInterface">The type of the interface to lookup.</typeparam>
            <returns>The related BHID if found, 0 if not.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.ThrowIfNoShellItem2">
            <summary>Throws an exception if no IShellItem2 instance can be retrieved.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.EnumerateChildren">
            <summary>Enumerates all the children of the current item. Not valid before Vista.</summary>
            <returns>An enumeration of the child objects.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.GetDisplayName(Vanara.PInvoke.Shell32.SIGDN)">
            <summary>Gets the display name.</summary>
            <param name="dn">The display name option.</param>
            <returns>The display name.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.Init(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Initializes this instance with the specified IShellItem.</summary>
            <param name="si">The IShellItem object.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellItem.ShellItemImpl">
            <summary>Local implementation of IShellItem.</summary>
            <seealso cref="T:System.IDisposable"/>
            <seealso cref="T:Vanara.PInvoke.Shell32.IShellItem"/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.ShellItemImpl.#ctor(Vanara.PInvoke.Shell32.PIDL,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItem.ShellItemImpl"/> class.</summary>
            <param name="pidl">The pidl.</param>
            <param name="owner">if set to <see langword="true"/> [owner].</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.ShellItemImpl.BindToHandler(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Guid@)">
            <summary>Binds to a handler for an item as specified by the handler ID value (BHID).</summary>
            <param name="pbc">
            A pointer to an IBindCtx interface on a bind context object. Used to pass optional parameters to the handler. The contents
            of the bind context are handler-specific. For example, when binding to BHID_Stream, the STGM flags in the bind context
            indicate the mode of access desired (read or read/write).
            </param>
            <param name="bhid">Reference to a GUID that specifies which handler will be created.</param>
            <param name="riid">IID of the object type to retrieve.</param>
            <returns>When this method returns, contains a pointer of type riid that is returned by the handler specified by rbhid.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.ShellItemImpl.Compare(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.SICHINTF)">
            <summary>Compares two IShellItem objects.</summary>
            <param name="psi">A pointer to an IShellItem object to compare with the existing IShellItem object.</param>
            <param name="hint">
            One of the SICHINTF values that determines how to perform the comparison. See SICHINTF for the list of possible values for
            this parameter.
            </param>
            <returns>
            This parameter receives the result of the comparison. If the two items are the same this parameter equals zero; if they are
            different the parameter is nonzero.
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.ShellItemImpl.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.ShellItemImpl.GetAttributes(Vanara.PInvoke.Shell32.SFGAO)">
            <summary>Gets a requested set of attributes of the IShellItem object.</summary>
            <param name="sfgaoMask">
            Specifies the attributes to retrieve. One or more of the SFGAO values. Use a bitwise OR operator to determine the attributes
            to retrieve.
            </param>
            <returns>
            A pointer to a value that, when this method returns successfully, contains the requested attributes. One or more of the
            SFGAO values. Only those attributes specified by sfgaoMask are returned; other attribute values are undefined.
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.ShellItemImpl.GetDisplayName(Vanara.PInvoke.Shell32.SIGDN)">
            <summary>Gets the display name of the IShellItem object.</summary>
            <param name="sigdnName">One of the SIGDN values that indicates how the name should look.</param>
            <returns>
            A value that, when this function returns successfully, receives the address of a pointer to the retrieved display name.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItem.ShellItemImpl.GetParent">
            <summary>Gets the parent of an IShellItem object.</summary>
            <returns>The address of a pointer to the parent of an IShellItem interface.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellItemArray">
            <summary>A folder or container of <see cref="T:Vanara.Windows.Shell.ShellItem"/> instances.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemArray.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellFolder"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemArray.#ctor(Vanara.PInvoke.Shell32.IShellItemArray)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItem" /> class.</summary>
            <param name="shellItems">The shell items.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemArray.#ctor(System.Collections.Generic.IEnumerable{Vanara.Windows.Shell.ShellItem})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItemArray"/> class.</summary>
            <param name="shellItems">The shell items to add to this array.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemArray.#ctor(System.Collections.Generic.IEnumerable{Vanara.PInvoke.Shell32.PIDL})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItemArray"/> class.</summary>
            <param name="pidls">The IDList items to add to this array.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemArray.#ctor(Vanara.PInvoke.Shell32.IShellFolder,System.Collections.Generic.IEnumerable{Vanara.PInvoke.Shell32.PIDL})">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItemArray" /> class.
            </summary>
            <param name="parent">The Shell data source object that is the parent of the child items specified in <paramref name="pidls"/>.</param>
            <param name="pidls">The list of child item IDs for which the array is being created. This value can be <see langword="null"/>.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemArray.#ctor(System.IntPtr[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItemArray"/> class.</summary>
            <param name="pidls">The IDList items to add to this array.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemArray.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemArray.IEnumShellItems">
            <summary>Gets the <see cref="P:Vanara.Windows.Shell.ShellItemArray.IEnumShellItems"/> instance behind this class.</summary>
            <value>The <see cref="P:Vanara.Windows.Shell.ShellItemArray.IEnumShellItems"/> instance.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemArray.IShellItemArray">
            <summary>Gets the <see cref="P:Vanara.Windows.Shell.ShellItemArray.IShellItemArray"/> instance behind this class.</summary>
            <value>The <see cref="P:Vanara.Windows.Shell.ShellItemArray.IShellItemArray"/> instance.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemArray.Item(System.Int32)">
            <summary>Gets the <see cref="T:Vanara.Windows.Shell.ShellItem"/> at the specified index.</summary>
            <value>The <see cref="T:Vanara.Windows.Shell.ShellItem"/>.</value>
            <param name="index">The index.</param>
            <returns>A <see cref="T:Vanara.Windows.Shell.ShellItem"/> instance.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemArray.FromDataObject(System.Runtime.InteropServices.ComTypes.IDataObject)">
            <summary>Creates a shell item array from a data object.</summary>
            <param name="dataObject">The data object.</param>
            <returns>On success, a new <see cref="T:Vanara.Windows.Shell.ShellItemArray"/>; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemArray.Contains(Vanara.Windows.Shell.ShellItem)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemArray.CopyTo(Vanara.Windows.Shell.ShellItem[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The
            <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemArray.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemArray.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemArray.GetItems">
            <summary>Gets the items.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellItemImages">
            <summary>Exposes methods that get images related to shell items.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemImages.#ctor(Vanara.Windows.Shell.ShellItem)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItemImages"/> class.</summary>
            <param name="shellItem">The <see cref="T:Vanara.Windows.Shell.ShellItem"/> instance.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemImages.GetImageAsync(System.Drawing.Size,Vanara.Windows.Shell.ShellItemGetImageOptions,System.Boolean)">
            <summary>
            Gets an image that represents this item. The default behavior is to load a thumbnail. If there is no thumbnail for the current
            item, it retrieves the icon of the item. The thumbnail or icon is extracted if it is not currently cached.
            </summary>
            <param name="size">A structure that specifies the size of the image to be received.</param>
            <param name="flags">One or more of the option flags.</param>
            <param name="forcePreVista">If set to <see langword="true"/>, ignore the use post vista interfaces like <see cref="T:Vanara.PInvoke.Shell32.IShellItemImageFactory"/>.</param>
            <returns>The resulting image.</returns>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="T:Vanara.Windows.Shell.LibraryFolderFilter">
            <summary>Defines options for filtering folder items.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LibraryFolderFilter.FileSystemOnly">
            <summary>Return only file system items.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LibraryFolderFilter.StorageObjects">
            <summary>Return items that can be bound to an IStorage object.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LibraryFolderFilter.AllItems">
            <summary>Return all items.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.LibraryViewTemplate">
            <summary>Defines the type of view assigned to a library folder.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LibraryViewTemplate.General">
            <summary>Introduced in Windows 8.1. The folder does not fall under one of the other categories.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LibraryViewTemplate.Documents">
            <summary>Introduced in Windows 8.1. The folder contains document files. These can be of mixed format—.doc, .txt, and others.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LibraryViewTemplate.Pictures">
            <summary>Introduced in Windows 8.1. The folder contains image files, such as .jpg, .tif, or .png files.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LibraryViewTemplate.Music">
            <summary>Introduced in Windows 8.1. The folder contains audio files, such as .mp3 and .wma files.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LibraryViewTemplate.Videos">
            <summary>Introduced in Windows 8.1. The folder contains video files. These can be of mixed format—.wmv, .mov, and others.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LibraryViewTemplate.Custom">
            <summary>A custom template defined in the registry. Use <see cref="P:Vanara.Windows.Shell.ShellLibrary.ViewTemplateId"/> for the identifier.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellLibrary">
            <summary>Shell library encapsulation.</summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLibrary.#ctor(Vanara.PInvoke.Shell32.KNOWNFOLDERID,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellLibrary"/> class.</summary>
            <param name="knownFolderId">The known folder identifier.</param>
            <param name="readOnly">if set to <c>true</c> [read only].</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLibrary.#ctor(System.String,Vanara.PInvoke.Shell32.KNOWNFOLDERID,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellLibrary"/> class.</summary>
            <param name="libraryName">Name of the library.</param>
            <param name="kf">The known folder identifier.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLibrary.#ctor(System.String,Vanara.Windows.Shell.ShellFolder,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellLibrary"/> class.</summary>
            <param name="libraryName">Name of the library.</param>
            <param name="parent">The parent.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLibrary.#ctor(Vanara.PInvoke.Shell32.IShellItem,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellLibrary"/> class.</summary>
            <param name="iItem">The i item.</param>
            <param name="readOnly">if set to <c>true</c> [read only].</param>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLibrary.DefaultSaveFolder">
            <summary>Gets or sets the default target folder the library uses for save operations.</summary>
            <value>The default save folder.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLibrary.Folders">
            <summary>Gets the set of child folders that are contained in the library.</summary>
            <value>A <see cref="T:Vanara.Windows.Shell.ShellItemArray"/> containing the child folders.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLibrary.IconLocation">
            <summary>
            Gets or sets a string that describes the location of the default icon. The string must be formatted as
            <c>ModuleFileName,ResourceIndex or ModuleFileName,-ResourceID</c>.
            </summary>
            <value>The default icon location.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLibrary.Name">
            <summary>Gets the name relative to the parent for the item.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLibrary.PinnedToNavigationPane">
            <summary>Gets or sets a value indicating whether to pin the library to the navigation pane.</summary>
            <value><c>true</c> if pinned to the navigation pane; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLibrary.ViewTemplate">
            <summary>Gets or sets the library's View Template.</summary>
            <value>The View Template.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLibrary.ViewTemplateId">
            <summary>Gets or sets the library's View Template identifier.</summary>
            <value>The View Template identifier.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLibrary.Commit">
            <summary>Commits library updates.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLibrary.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLibrary.GetFilteredFolders(Vanara.Windows.Shell.LibraryFolderFilter)">
            <summary>Gets the set of child folders that are contained in the library.</summary>
            <param name="filter">A value that determines the folders to get.</param>
            <returns>A <see cref="T:Vanara.Windows.Shell.ShellItemArray"/> containing the child folders.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLibrary.ResolveFolder(Vanara.Windows.Shell.ShellItem,System.TimeSpan)">
            <summary>Resolves the target location of a library folder, even if the folder has been moved or renamed.</summary>
            <param name="item">A ShellItem object that represents the library folder to locate.</param>
            <param name="timeout">
            The maximum time the method will attempt to locate the folder before returning. If the folder could not be located before the
            specified time elapses, an error is returned.
            </param>
            <returns>The resulting target location.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLibrary.ShowLibraryManagementDialog(System.Windows.Forms.IWin32Window,System.String,System.String,System.Boolean)">
            <summary>Shows the library management dialog box, which enables users to manage the library folders and default save location.</summary>
            <param name="parentWindow">
            The handle for the window that owns the library management dialog box. The value of this parameter can be NULL.
            </param>
            <param name="title">
            The title for the library management dialog. To display the generic title string, set the value of this parameter to NULL.
            </param>
            <param name="instruction">
            The help string to display below the title string in the library management dialog box. To display the generic help string, set
            the value of this parameter to NULL.
            </param>
            <param name="allowUnindexableLocations">
            if set to <c>true</c> do not display a warning dialog to the user in collisions that concern network locations that cannot be indexed.
            </param>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellLibrary.ShellLibraryFolders">
            <summary>Folders of a <see cref="T:Vanara.Windows.Shell.ShellLibrary"/>.</summary>
            <seealso cref="T:Vanara.Windows.Shell.ShellItemArray"/>
            <seealso cref="T:System.Collections.Generic.ICollection`1"/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLibrary.ShellLibraryFolders.#ctor(Vanara.PInvoke.Shell32.IShellLibrary,Vanara.PInvoke.Shell32.IShellItemArray)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellLibrary.ShellLibraryFolders"/> class.</summary>
            <param name="lib">The library.</param>
            <param name="shellItemArray">The shell item array.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLibrary.ShellLibraryFolders.System#Collections#Generic#ICollection{Vanara#Windows#Shell#ShellItem}#IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLibrary.ShellLibraryFolders.Add(Vanara.Windows.Shell.ShellItem)">
            <summary>Adds the specified location.</summary>
            <param name="location">The location.</param>
            <exception cref="T:System.ArgumentNullException">location</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLibrary.ShellLibraryFolders.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLibrary.ShellLibraryFolders.Remove(Vanara.Windows.Shell.ShellItem)">
            <summary>Removes the specified location.</summary>
            <param name="location">The location.</param>
            <returns><c>true</c> on success.</returns>
            <exception cref="T:System.ArgumentNullException">location</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLibrary.ShellLibraryFolders.System#Collections#Generic#ICollection{Vanara#Windows#Shell#ShellItem}#Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Vanara.Windows.Shell.LinkResolution">
            <summary>Flags determining how the links with missing targets are resolved.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LinkResolution.None">
            <summary>No flags set.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LinkResolution.NoUI">
            <summary>
            Do not display a dialog box if the link cannot be resolved. When NoUI is set, a time-out value that specifies the maximum amount
            of time to be spent resolving the link can be specified in milliseconds. The function returns if the link cannot be resolved
            within the time-out duration. If the timeout is not set, the time-out duration will be set to the default value of 3,000
            milliseconds (3 seconds).
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LinkResolution.AnyMatch">
            <summary>Allow any match during resolution. Has no effect on ME/2000 or above, use the other flags instead.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LinkResolution.Update">
            <summary>
            If the link object has changed, update its path and list of identifiers. If UPDATE is set, you do not need to call
            IPersistFile::IsDirty to determine whether or not the link object has changed.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LinkResolution.NoUpdate">
            <summary>Do not update the link information.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LinkResolution.NoSearch">
            <summary>Do not execute the search heuristics.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LinkResolution.NoTrack">
            <summary>Do not use distributed link tracking.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LinkResolution.NoLinkInfo">
            <summary>
            Disable distributed link tracking. By default, distributed link tracking tracks removable media across multiple devices based on
            the volume name. It also uses the UNC path to track remote file systems whose drive letter has changed. Setting NoLinkInfo
            disables both types of tracking.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LinkResolution.InvokeMSI">
            <summary>Call the Microsoft Windows Installer.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LinkResolution.NoUIWithMsgPump">
            <summary>Windows XP and later. Assume same as NoUI but intended for applications without a hWnd.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LinkResolution.OfferDeleteWithoutFile">
            <summary>
            Windows 7 and later. Offer the option to delete the shortcut when this method is unable to resolve it, even if the shortcut is
            not a shortcut to a file.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LinkResolution.KnownFolder">
            <summary>
            Windows 7 and later. Report as dirty if the target is a known folder and the known folder was redirected. This only works if the
            original target path was a file system path or ID list and not an aliased known folder ID list.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LinkResolution.MachineInLocalTarget">
            <summary>
            Windows 7 and later. Resolve the computer name in UNC targets that point to a local computer. This value is used with SLDFKEEPLOCALIDLISTFORUNCTARGET.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LinkResolution.UpdateMachineAndSid">
            <summary>Windows 7 and later. Update the computer GUID and user SID if necessary.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.LinkResolution.NoObjectID">
            <summary>?? Assuming this does not update the Object ID</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellLink">
            <summary>Represents a Shell Shortcut (.lnk) file.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.#ctor(System.String,Vanara.Windows.Shell.LinkResolution,System.Windows.Forms.IWin32Window,System.TimeSpan)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellLink"/> class, which acts as a wrapper for a .lnk file.</summary>
            <param name="linkFile">The shortcut file (.lnk) to load.</param>
            <param name="window">
            The window that the Shell will use as the parent for a dialog box. The Shell displays the dialog box if it needs to prompt the
            user for more information while resolving a Shell link.
            </param>
            <param name="resolveFlags">The resolve flags.</param>
            <param name="timeOut">The time out.</param>
            <exception cref="T:System.ArgumentNullException">linkFile</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellLink"/> class and sets many properties. This link is not saved as a file.
            </summary>
            <param name="targetFilename">The full path to the target file.</param>
            <param name="arguments">The arguments for the target's execution.</param>
            <param name="workingDirectory">The working directory for the execution of the target.</param>
            <param name="description">The description of the link.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLink.Arguments">
            <summary>Gets/sets any command line arguments associated with the link</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLink.DataFlags">
            <summary>Gets the current option settings.</summary>
            <value>One or more of the SHELL_LINK_DATA_FLAGS that indicate the current option settings.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLink.Description">
            <summary>Gets/sets the description of the link</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLink.HotKey">
            <summary>Gets/sets the HotKey to start the shortcut (if any).</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLink.IconLocation">
            <summary>Gets the index of this icon within the icon path's resources.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLink.IDList">
            <summary>Get or sets the list of item identifiers for a Shell link.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLink.IsLink">
            <summary>Gets a value indicating whether this instance is link.</summary>
            <value><c>true</c> if this instance is link; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLink.RelativeTargetPath">
            <summary>Gets/sets the relative path to the link's target</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLink.RunAsAdministrator">
            <summary>Gets or sets a value indicating whether the target is run with Administrator rights.</summary>
            <value><c>true</c> if run as Administrator; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLink.ShortTargetPath">
            <summary>Gets/sets the short (8.3 format) path to the link's target</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLink.ShowState">
            <summary>Gets or sets the show command for a Shell link object.</summary>
            <value>The show command for a Shell link object.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLink.Target">
            <summary>Gets or sets the target with a <see cref="T:Vanara.Windows.Shell.ShellItem"/> instance.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLink.TargetPath">
            <summary>Gets/sets the fully qualified path to the link's target</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLink.Title">
            <summary>Gets/sets the display name of the link through the PKEY_Title property.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellLink.WorkingDirectory">
            <summary>Gets/sets the Working Directory for the Link</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.Create(System.String,System.String,System.String,System.String,System.String)">
            <summary>Creates or overwrites a new link file.</summary>
            <param name="linkFilename">The link filename.</param>
            <param name="targetFilename">The full path to the target file.</param>
            <param name="description">The description of the link.</param>
            <param name="workingDirectory">The working directory for the execution of the target.</param>
            <param name="arguments">The arguments for the target's execution.</param>
            <returns>An instance of a <see cref="T:Vanara.Windows.Shell.ShellLink"/> representing the values supplied.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.Create(System.String,Vanara.Windows.Shell.ShellItem,System.String,System.String,System.String)">
            <summary>Creates or overwrites a new link file.</summary>
            <param name="linkFilename">The link filename.</param>
            <param name="target">The ShellItem for the target.</param>
            <param name="description">The description of the link.</param>
            <param name="workingDirectory">The working directory for the execution of the target.</param>
            <param name="arguments">The arguments for the target's execution.</param>
            <returns>An instance of a <see cref="T:Vanara.Windows.Shell.ShellLink"/> representing the values supplied.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.CopyTo(System.String,System.Boolean)">
            <summary>Copies an existing file to a new file, allowing the overwriting of an existing file.</summary>
            <param name="destShellLink">The name of the new file to copy to.</param>
            <param name="overwrite"><c>true</c> to allow an existing file to be overwritten; otherwise <c>false</c>.</param>
            <returns>
            A new file, or an overwrite of an existing file if overwrite is true. If the file exists and overwrite is false, an IOException
            is thrown.
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.Dispose">
            <summary>Dispose the object, releasing the COM ShellLink object</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a FileSecurity object that encapsulates the specified type of access control list (ACL) entries for the file described by
            the current FileInfo object.
            </summary>
            <param name="includeSections">
            One of the AccessControlSections values that specifies which group of access control entries to retrieve.
            </param>
            <returns>A FileSecurity object that encapsulates the access control rules for the current file.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.GetIcon(System.Boolean)">
            <summary>Gets the icon for this link file.</summary>
            <param name="large">if set to <c>true</c> retrieve the large icon; other retrieve the small icon.</param>
            <returns>The icon.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.SetAccessControl(System.Security.AccessControl.FileSecurity)">
            <summary>
            Applies access control list (ACL) entries described by a FileSecurity object to the file described by the current FileInfo object.
            </summary>
            <param name="fileSecurity">
            A FileSecurity object that describes an access control list (ACL) entry to apply to the current file.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.Save">
            <summary>Saves the shortcut to ShortCutFile.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.SaveAs(System.String)">
            <summary>Saves the shortcut to the specified file.</summary>
            <param name="linkFile">The shortcut file (.lnk).</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.Equals(Vanara.PInvoke.Shell32.IShellLinkW,Vanara.PInvoke.Shell32.IShellLinkW)">
            <summary>Determines if two shell links are equal by looking at the title, path and arguments.</summary>
            <param name="left">The left shell link to evaluate.</param>
            <param name="right">The right shell link to evaluate.</param>
            <returns><see langword="true"/> if the two links are equal; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.GetCompareString(Vanara.PInvoke.Shell32.IShellLinkW)">
            <summary>Gets a string representation of an <see cref="T:Vanara.PInvoke.Shell32.IShellLinkW"/> instance that includes the title, path and arguments for comparison.</summary>
            <param name="l">The <see cref="T:Vanara.PInvoke.Shell32.IShellLinkW"/> instance.</param>
            <returns>The string representation for comparison.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.Equals(Vanara.PInvoke.Shell32.IShellLinkW)">
            <summary>Determines whether the specified <see cref="T:Vanara.PInvoke.Shell32.IShellLinkW"/>, is equal to this instance.</summary>
            <param name="other">The <see cref="T:Vanara.PInvoke.Shell32.IShellLinkW"/> to compare with this instance.</param>
            <returns><see langword="true"/> if the specified <see cref="T:Vanara.PInvoke.Shell32.IShellLinkW"/> is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellLink.Equals(Vanara.Windows.Shell.ShellLink)">
            <summary>Determines whether the specified <see cref="T:Vanara.Windows.Shell.ShellLink"/>, is equal to this instance.</summary>
            <param name="other">The <see cref="T:Vanara.Windows.Shell.ShellLink"/> to compare with this instance.</param>
            <returns><see langword="true"/> if the specified <see cref="T:Vanara.Windows.Shell.ShellLink"/> is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellNavigationHistory">
            <summary>The navigation log is a history of the locations visited by a shell view object.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellNavigationHistory.CollectionChanged">
            <summary>Occurs when an item is added, removed, changed, moved, or the entire list is refreshed.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellNavigationHistory.PropertyChanged">
            <summary>Occurs when a property value changes.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellNavigationHistory.CanSeekBackward">
            <summary>Indicates the presence of items in the history that can be reached by calling <see cref="M:Vanara.Collections.IHistory`1.SeekBackward"/>.</summary>
            <value><see langword="true"/> if this instance can seek backward; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellNavigationHistory.CanSeekForward">
            <summary>Indicates the presence of items in the history that can be reached by calling <see cref="M:Vanara.Collections.IHistory`1.SeekForward"/>.</summary>
            <value><see langword="true"/> if this instance can seek forward; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellNavigationHistory.Count">
            <summary>Gets the items in the history.</summary>
            <value>The number of items.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellNavigationHistory.Current">
            <summary>Gets the shell object in the Locations collection pointed to by CurrentLocationIndex.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellNavigationHistory.Add(Vanara.Windows.Shell.ShellItem)">
            <summary>
            Adds the specified item as the last history entry and sets the <see cref="P:Vanara.Collections.IHistory`1.Current"/> property to
            it's value.
            </summary>
            <param name="item">The item to add to the history.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellNavigationHistory.Clear">
            <summary>Clears the history of all items.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellNavigationHistory.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellNavigationHistory.GetItems(System.Int32,System.IO.SeekOrigin)">
            <summary>Gets a specified number of items starting at a location within the history.</summary>
            <param name="count">The maximum number of items to retrieve. The actual number of items returned may be less if not avaialable.</param>
            <param name="origin">The reference point within the history at which to start fetching items.</param>
            <returns>A read-only list of items.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellNavigationHistory.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            Seeks through the history a given number of items starting at a known location within the history. This updates the <see
            cref="P:Vanara.Collections.IHistory`1.Current"/> property.
            </summary>
            <param name="count">The number of items to move. This value can be negative to search backwards or positive to search forwards.</param>
            <param name="origin">The reference point within the history at which to start seeking.</param>
            <returns>The value at the new current pointer position.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellNavigationHistory.SeekBackward">
            <summary>Seeks one position backwards.</summary>
            <returns>The value at the new current pointer position.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellNavigationHistory.SeekForward">
            <summary>Seeks one position forwards.</summary>
            <returns>The value at the new current pointer position.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellNavigationHistory.Vanara#Collections#IHistory{Vanara#Windows#Shell#ShellItem}#Add(Vanara.Windows.Shell.ShellItem,System.Boolean)">
            <summary>
            Adds the specified item as the last history entry and sets the <see cref="P:Vanara.Collections.IHistory`1.Current"/> property to
            it's value.
            </summary>
            <param name="item">The item to add to the history.</param>
            <param name="removeForwardItems">
            <see langword="true"/> indicates to remove all items forward of the current pointer; <see langword="false"/> leaves the history intact.
            </param>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellSearch">
            <summary>Represents functionality of the Windows Search Service.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellSearch.GetSearchResults(Vanara.Windows.Shell.SearchCondition,System.String,System.Collections.Generic.IEnumerable{Vanara.Windows.Shell.ShellFolder},Vanara.Windows.Shell.ShellSearchViewSettings)">
            <summary>Gets search results for a supplied condition against a list of folders.</summary>
            <param name="condition">The search condition.</param>
            <param name="displayName">The display name for the search folder.</param>
            <param name="searchFolders">The folders in which to perform the search.</param>
            <param name="settings">Optional settings for the output view.</param>
            <returns>A <see cref="T:Vanara.Windows.Shell.ShellItem"/> which contains the search results.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellSearch.GetSearchResults(Vanara.Windows.Shell.SearchCondition,System.String,System.Collections.Generic.IEnumerable{System.String},Vanara.Windows.Shell.ShellSearchViewSettings)">
            <summary>Gets search results for a supplied condition against a list of folders.</summary>
            <param name="condition">The search condition.</param>
            <param name="displayName">The display name for the search folder.</param>
            <param name="searchFolders">The folder paths in which to perform the search.</param>
            <param name="settings">Optional settings for the output view.</param>
            <returns>A <see cref="T:Vanara.Windows.Shell.ShellItem"/> which contains the search results.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellSearchViewSettings">
            <summary>Settings that change the folder view of a search.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellSearchViewSettings.FolderLogicalViewMode">
            <summary>The folder logical view mode. The default settings are based on the which is set by the FolderTypeID property.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellSearchViewSettings.FolderTypeID">
            <summary>The search folder type ID.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellSearchViewSettings.GroupColumn">
            <summary>The group column. If no group column is specified, no grouping occurs.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellSearchViewSettings.IconSize">
            <summary>The search folder icon size. The default settings are based on the which is set by the FolderTypeID property.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellSearchViewSettings.SortColumns">
            <summary>A list of sort column directions.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellSearchViewSettings.StackKeys">
            <summary>A list of stack keys, as specified. If <see langword="null"/>, the folder will not be stacked.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellSearchViewSettings.VisibleColumns">
            <summary>A list of which columns are all visible. The default is based on <c>FolderTypeID</c>.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.SearchCondition">
            <summary>Provides properties and methods for retrieving information about a search condition.</summary>
            <seealso cref="T:System.ICloneable"/>
        </member>
        <member name="P:Vanara.Windows.Shell.SearchCondition.CLSID">
            <summary>Gets the CLSID for the search condition.</summary>
            <value>The CLSID.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.SearchCondition.ComparisonInfo">
            <summary>Retrieves the property name, operation, and value from a leaf search condition node.</summary>
            <value>The comparison information.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.SearchCondition.ConditionType">
            <summary>
            Retrieves the condition type for this search condition node, identifying it as a logical AND, OR, or NOT, or as a leaf node.
            </summary>
        </member>
        <member name="P:Vanara.Windows.Shell.SearchCondition.LeafConditionInfo">
            <summary>Retrieves the property name, operation, and value from a leaf search condition node.</summary>
            <value>The leaf condition information.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.SearchCondition.MaxSize">
            <summary>Retrieves the size of the stream needed to save the object.</summary>
            <value>The size in bytes of the stream needed to save this object, in bytes.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.SearchCondition.SubConditions">
            <summary>
            Retrieves a collection of the subconditions of the search condition node and the IID of the interface for enumerating the collection.
            </summary>
            <value>
            A collection of zero or more SearchCondition objects. Each object is a subcondition of this condition node. If this is a negation
            condition, this parameter receives the single subcondition.
            </value>
        </member>
        <member name="P:Vanara.Windows.Shell.SearchCondition.ValueNormalization">
            <summary>Retrieves the character-normalized value of the search condition node.</summary>
            <value>The normalized value of the condition.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.SearchCondition.ValueType">
            <summary>Retrieves the semantic type of the value of the search condition node.</summary>
            <value>The semantic type of the value.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.SearchCondition.CreateAndOrCondition(Vanara.PInvoke.SearchApi.CONDITION_TYPE,System.Boolean,Vanara.Windows.Shell.SearchCondition[])">
            <summary>Creates a condition node that is a logical conjunction (AND) or disjunction (OR) of a collection of subconditions.</summary>
            <param name="conditionType">
            The CONDITION_TYPE of the condition node. The CONDITION_TYPE must be either CT_AND_CONDITION or CT_OR_CONDITION.
            </param>
            <param name="simplify">
            <see langword="true"/> to logically simplify the result, if possible; then the result will not necessarily to be of the specified
            kind. <see langword="false"/> if the result should have exactly the prescribed structure.
            <para>
            An application that plans to execute a query based on the condition tree would typically benefit from setting this parameter to <see langword="true"/>.
            </para>
            </param>
            <param name="subconditions">The SearchCondition sub-objects. This list can be left empty.</param>
            <returns>The new <see cref="T:Vanara.Windows.Shell.SearchCondition"/> node.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.SearchCondition.CreateFromStructuredQuery(System.String,System.Globalization.CultureInfo)">
            <summary>Creates a condition node from a structured query.</summary>
            <param name="query">An input string to be parsed.</param>
            <param name="cultureInfo">Used to select the localized language for keywords. By default, the current UI culture is used.</param>
            <returns>The new <see cref="T:Vanara.Windows.Shell.SearchCondition"/> node.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.SearchCondition.CreateLeafCondition``1(System.String,``0,Vanara.PInvoke.SearchApi.CONDITION_OPERATION)">
            <summary>Creates a leaf condition node that represents a comparison of property value and constant value.</summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="propertyName">
            The name of a property to be compared, or <see langword="null"/> for an unspecified property. The locale name of the leaf node is LOCALE_NAME_USER_DEFAULT.
            </param>
            <param name="value">The constant value against which the property value should be compared.</param>
            <param name="operation">A CONDITION_OPERATION enumeration.</param>
            <returns>The new <see cref="T:Vanara.Windows.Shell.SearchCondition"/> node.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.SearchCondition.CreateNotCondition(Vanara.Windows.Shell.SearchCondition,System.Boolean)">
            <summary>Creates a condition node that is a logical negation (NOT) of another condition (a subnode of this node).</summary>
            <param name="conditionToNegate">The condition to negate.</param>
            <param name="simplify">
            <see langword="true"/> to logically simplify the result if possible; <see langword="false"/> otherwise. In a query builder
            scenario, <paramref name="simplify"/> should typically be set to <see langword="false"/>.
            </param>
            <returns>The new <see cref="T:Vanara.Windows.Shell.SearchCondition"/> node.</returns>
            <exception cref="T:System.ArgumentNullException">conditionToNegate</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.SearchCondition.Clone">
            <summary>Creates a deep copy of this instance.</summary>
            <returns>A copy of this search condition.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.SearchCondition.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Vanara.Windows.Shell.SearchCondition.GetLeveledResults">
            <summary>Gets the results of the condition by level.</summary>
            <returns>An enumeration of the leaf nodes with their level and data.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.FilterShellItemEventArgs">
            <summary>Event argument for FilterItem event</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.FilterShellItemEventArgs.#ctor(Vanara.Windows.Shell.ShellItem)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.NavigatedEventArgs"/> class.</summary>
            <param name="item">The shell item.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.FilterShellItemEventArgs.Include">
            <summary>Gets or sets a value indicating whether a <see cref="T:Vanara.Windows.Shell.ShellItem"/> is included by the filter.</summary>
            <value><see langword="true"/> if included; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.FilterShellItemEventArgs.Item">
            <summary>The new location of the explorer browser</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.NavigatedEventArgs">
            <summary>Event argument for The Navigated event</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.NavigatedEventArgs.#ctor(Vanara.Windows.Shell.ShellFolder)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.NavigatedEventArgs"/> class.</summary>
            <param name="folder">The folder.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.NavigatedEventArgs.NewLocation">
            <summary>The new location of the explorer browser</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.NavigatingEventArgs">
            <summary>Event argument for The Navigating event</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.NavigatingEventArgs.#ctor(Vanara.Windows.Shell.ShellItem)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.NavigatingEventArgs"/> class.</summary>
            <param name="pendingLocation">The pending location.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.NavigatingEventArgs.PendingLocation">
            <summary>The location being navigated to.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.NavigationFailedEventArgs">
            <summary>Event argument for the NavigatinoFailed event</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.NavigationFailedEventArgs.FailedLocation">
            <summary>The location the browser would have navigated to.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellView">
            <summary>Encapsulates IShellView for display as a control.</summary>
            <seealso cref="T:System.IComparable`1"/>
            <seealso cref="T:System.IDisposable"/>
            <seealso cref="T:System.IEquatable`1"/>
            <seealso cref="T:System.IEquatable`1"/>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.#ctor(Vanara.Windows.Shell.ShellFolder)">
            <summary>Creates a new <see cref="T:Vanara.Windows.Shell.ShellView"/> from a shell folder and assigns it to a window.</summary>
            <param name="folder">The shell folder.</param>
            <returns>A new <see cref="T:Vanara.Windows.Shell.ShellView"/> instance for the supplied shell folder.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellView"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.#ctor(Vanara.PInvoke.Shell32.IShellView)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellView"/> class.</summary>
            <param name="baseInterface">The base interface.</param>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellView.FilterItem">
            <summary>Fires when determining if an item should be shown in the view.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellView.ItemsChanged">
            <summary>Fires when the Items collection changes.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellView.ItemsEnumerated">
            <summary>Fires when the ExplorerBorwser view has finished enumerating files.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellView.Navigated">
            <summary>
            Fires when a navigation has been 'completed': no Navigating listener has canceled, and the ExplorerBorwser has created a new
            view. The view will be populated with new items asynchronously, and ItemsChanged will be fired to reflect this some time later.
            </summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellView.Navigating">
            <summary>Fires when a navigation has been initiated, but is not yet complete.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellView.NavigationFailed">
            <summary>
            Fires when either a Navigating listener cancels the navigation, or if the operating system determines that navigation is not possible.
            </summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellView.PropertyChanged">
            <summary>Occurs when a property value changes.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellView.SelectedItemModified">
            <summary>Fires when the item selected in the view has changed (i.e., a rename ). This is not the same as SelectionChanged.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ShellView.SelectionChanged">
            <summary>Fires when the SelectedItems collection changes.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellView.CurrentFolder">
            <summary>Gets or sets the <see cref="T:Vanara.Windows.Shell.ShellFolder"/> currently being browsed by the <see cref="T:Vanara.Windows.Shell.ShellView"/>.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellView.Flags">
            <summary>A set of flags that indicate the options for the folder.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellView.History">
            <summary>Contains the navigation history of the ExplorerBrowser</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellView.IShellView">
            <summary>Gets the underlying <see cref="P:Vanara.Windows.Shell.ShellView.IShellView"/> instance.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellView.SelectedItems">
            <summary>Gets or sets the currently selected items in the view.</summary>
            <value>An array with the selected items.</value>
            <exception cref="T:System.ArgumentException">All items must belong to the folder hosted by this view. - SelectedItems</exception>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellView.ViewMode">
            <summary>Folder view mode.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellView.WindowHandle">
            <summary>
            Retrieves a handle to one of the windows participating in in-place activation (frame, document, parent, or in-place object window).
            </summary>
            <returns>The window handle.</returns>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellView.DefaultSize">
            <summary>Gets the default size of the control.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.op_Inequality(Vanara.Windows.Shell.ShellView,Vanara.Windows.Shell.ShellView)">
            <summary>Implements the operator !=.</summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.op_Equality(Vanara.Windows.Shell.ShellView,Vanara.Windows.Shell.ShellView)">
            <summary>Implements the operator ==.</summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.Equals(Vanara.PInvoke.Shell32.IShellView)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.Navigate(Vanara.Windows.Shell.ShellFolder)">
            <summary>
            Clears the view of existing content, fills it with content from the specified container, and adds a new item to the history.
            </summary>
            <param name="folder">The shell folder to navigate to.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.NavigateBack">
            <summary>
            Navigates to the last item in the navigation history list. This does not change the set of locations in the navigation log.
            </summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.NavigateForward">
            <summary>
            Navigates to the next item in the navigation history list. This does not change the set of locations in the navigation log.
            </summary>
            <returns>True if the navigation succeeded, false if it failed for any reason.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.NavigateParent">
            <summary>Navigates to the parent of the currently displayed folder.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.Refresh">
            <summary>Refreshes the view's contents in response to user input.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.SaveState">
            <summary>Saves the Shell's view settings so the current state can be restored during a subsequent browsing session.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.IncludeItem(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Called to determine if an item should be shown in the view. Calls the <see cref="E:Vanara.Windows.Shell.ShellView.FilterItem"/> event if defined.</summary>
            <param name="pidl">The PIDL of the child item.</param>
            <returns><see langword="true"/> if the item should be included (this is the default); otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.OnDoubleClick(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.DoubleClick"/> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.OnItemsChanged">
            <summary>Raises the <see cref="E:Vanara.Windows.Shell.ShellView.ItemsChanged"/> event.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.OnItemsEnumerated">
            <summary>Raises the <see cref="E:Vanara.Windows.Shell.ShellView.ItemsEnumerated"/> event.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.OnNavigated">
            <summary>Raises the <see cref="E:Vanara.Windows.Shell.ShellView.Navigated"/> event.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.OnNavigating(Vanara.Windows.Shell.ShellFolder)">
            <summary>Raises the <see cref="E:Vanara.Windows.Shell.ShellView.Navigating"/> event.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.OnNavigationFailed(Vanara.Windows.Shell.NavigationFailedEventArgs)">
            <summary>Raises the <see cref="E:Vanara.Windows.Shell.ShellView.NavigationFailed"/> event.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.OnSelectedItemModified">
            <summary>Raises the <see cref="E:Vanara.Windows.Shell.ShellView.SelectedItemModified"/> event.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.OnSelectionChanged">
            <summary>Raises the <see cref="E:Vanara.Windows.Shell.ShellView.SelectionChanged"/> event.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control"/> and its child controls and optionally
            releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.OnCreateControl">
            <summary>Raises the <see cref="M:System.Windows.Forms.Control.CreateControl"/> method.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.OnResize(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.Resize"/> event.</summary>
            <param name="eventargs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellView.WndProc(System.Windows.Forms.Message@)">
            <summary>Processes Windows messages.</summary>
            <param name="m">The Windows <see cref="T:System.Windows.Forms.Message"/> to process.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.MemoryPropertyStore">
            <summary>An in-memory property store.</summary>
            <seealso cref="T:Vanara.Windows.Shell.PropertyStore"/>
        </member>
        <member name="M:Vanara.Windows.Shell.MemoryPropertyStore.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.MemoryPropertyStore"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.MemoryPropertyStore.#ctor(System.Runtime.InteropServices.ComTypes.IStream)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.MemoryPropertyStore"/> class from a stream.</summary>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.MemoryPropertyStore.ClonePropertyStoreToMemory(Vanara.PInvoke.PropSys.IPropertyStore)">
            <summary>Clones a property store to a memory property store.</summary>
            <param name="ps">The property store to clone.</param>
            <returns>The cloned memory property store.</returns>
            <exception cref="T:System.ArgumentNullException">ps</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.MemoryPropertyStore.SaveToStream(System.Runtime.InteropServices.ComTypes.IStream)">
            <summary>Saves the contents of this property store to a stream.</summary>
            <param name="stream">The stream that recieves the contents of this property store.</param>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="T:Vanara.Windows.Shell.PropertyBag">
            <summary>Encapsulates an <see cref="T:Vanara.PInvoke.OleAut32.IPropertyBag"/> instance.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.PropertyBag.ibag">
            <summary>The IPropertyBag instance.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyBag.#ctor(Vanara.PInvoke.OleAut32.IPropertyBag)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.PropertyBag"/> class.</summary>
            <param name="ppb">The property bag.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyBag.Item(System.String)">
            <summary>Gets or sets the <see cref="T:System.Object"/> with the specified property name.</summary>
            <value>The <see cref="T:System.Object"/>.</value>
            <param name="propertyName">Name of the property.</param>
            <returns>The property value.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.PropertyDescription">
            <summary>Enumerate and retrieve individual property description details. Wraps the <see cref="T:Vanara.PInvoke.PropSys.IPropertyDescription"/> shell interface</summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:Vanara.Windows.Shell.PropertyDescription.iDesc">
            <summary>The IPropertyDescription object.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.PropertyDescription.iDesc2">
            <summary>The IPropertyDescription2 object.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.PropertyDescription.key">
            <summary>The property key for this property.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.PropertyDescription.typeList">
            <summary>Gets the type list.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescription.#ctor(Vanara.PInvoke.PropSys.IPropertyDescription,System.Nullable{Vanara.PInvoke.Ole32.PROPERTYKEY})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.PropertyDescription"/> class.</summary>
            <param name="propertyDescription">The property description.</param>
            <param name="pkey">The associated property key.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescription.Create(Vanara.PInvoke.Ole32.PROPERTYKEY)">
            <summary>Creates a <see cref="T:Vanara.Windows.Shell.PropertyDescription"/> instance from a specified property key.</summary>
            <param name="propkey">The property key.</param>
            <returns>An associated instance of <see cref="T:Vanara.Windows.Shell.PropertyDescription"/> or <see langword="null"/> if the PROPERTYKEY does not exist in the schema subsystem cache.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescription.TryCreate(Vanara.PInvoke.Ole32.PROPERTYKEY,Vanara.Windows.Shell.PropertyDescription@)">
            <summary>Tries to create a <see cref="T:Vanara.Windows.Shell.PropertyDescription"/> instance from a specified property key.</summary>
            <param name="propkey">The property key.</param>
            <param name="desc">
            An associated instance of <see cref="T:Vanara.Windows.Shell.PropertyDescription"/> or <see langword="null"/> if the PROPERTYKEY does not exist in the
            schema subsystem cache.
            </param>
            <returns><see langword="true"/> if the supplied property key exists; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.AggregationType">
            <summary>Gets a value that describes how the property values are displayed when multiple items are selected in the UI.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.CanGroupBy">
            <summary>Gets a value indicating whether the user can group by this property.</summary>
            <value><see langword="true"/> if the user can group by this property; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.CanonicalName">
            <summary>Gets the case-sensitive name by which a property is known to the system, regardless of its localized name.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.ColumnState">
            <summary>Gets the column state flag, which describes how the property should be treated by interfaces or APIs that use this flag.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.ConditionType">
            <summary>Gets the condition type and default condition operation to use when displaying the property in the query builder UI. This influences the list of predicate conditions (for example, equals, less than, and contains) that are shown for this property.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.DefaultColumnWidth">
            <summary>Gets the default column width of the property in a list view.</summary>
            <returns>A pointer to the column width value, in characters.</returns>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.DisplayName">
            <summary>Gets the display name of the property as it is shown in any UI.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.DisplayType">
            <summary>Gets the current data type used to display the property.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.EditInvitation">
            <summary>Gets the text used in edit controls hosted in various dialog boxes.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.GroupingRange">
            <summary>Gets the grouping method to be used when a view is grouped by a property, and retrieves the grouping type.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.IsViewable">
            <summary>
            Gets a value indicating whether this property is meant to be viewed by the user. This influences whether the property shows up
            in the "Choose Columns" dialog box, for example.
            </summary>
            <value><see langword="true"/> if the user can view this property; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.PropertyKey">
            <summary>Gets a structure that acts as a property's unique identifier.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.PropertyType">
            <summary>Gets the variant type of the property. If the type cannot be determined, this property returns <c>null</c>.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.RelativeDescriptionType">
            <summary>Gets the relative description type for a property description.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.SortDescription">
            <summary>Gets the current sort description flags for the property, which indicate the particular wordings of sort offerings.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.TypeFlags">
            <summary>Gets a set of flags that describe the uses and capabilities of the property.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.TypeList">
            <summary>Gets an instance of an PropertyTypeList, which can be used to enumerate the possible values for a property.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.ViewFlags">
            <summary>Gets the current set of flags governing the property's view.</summary>
            <returns>When this method returns, contains a pointer to a value that includes one or more of the following flags. See PROPDESC_VIEW_FLAGS for valid values.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescription.CoerceToCanonicalValue(Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>Coerces the value to the canonical value, according to the property description.</summary>
            <param name="propvar">On entry, contains a PROPVARIANT that contains the original value. When this method returns, contains the canonical value.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescription.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescription.FormatForDisplay(System.Object,Vanara.PInvoke.PropSys.PROPDESC_FORMAT_FLAGS)">
            <summary>Gets a formatted string representation of a property value.</summary>
            <param name="obj">A object that contains the type and value of the property.</param>
            <param name="pdfFlags">One or more of the PROPDESC_FORMAT_FLAGS flags, which are either bitwise or multiple values, that indicate the property string format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescription.FormatForDisplay(Vanara.PInvoke.Ole32.PROPVARIANT,Vanara.PInvoke.PropSys.PROPDESC_FORMAT_FLAGS)">
            <summary>Gets a formatted string representation of a property value.</summary>
            <param name="pv">A object that contains the type and value of the property.</param>
            <param name="pdfFlags">One or more of the PROPDESC_FORMAT_FLAGS flags, which are either bitwise or multiple values, that indicate the property string format.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescription.GetImageLocationForValue(System.Object)">
            <summary>Gets the image location for a value.</summary>
            <param name="obj">The value.</param>
            <returns>An IconLocation for the image associated with the property value.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescription.GetRelativeDescription(System.Object,System.Object)">
            <summary>Compares two property values in the manner specified by the property description. Returns two display strings that describe how the two properties compare.</summary>
            <param name="obj1">An object for the first property.</param>
            <param name="obj2">An object for the second property.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescription.GetSortDescriptionLabel(System.Boolean)">
            <summary>Gets the localized display string that describes the current sort order.</summary>
            <param name="descending">TRUE if ppszDescription should reference the string "Z on top"; FALSE to reference the string "A on top".</param>
            <returns>When this method returns, contains the address of a pointer to the sort description as a null-terminated Unicode string.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescription.IsValueCanonical(Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>Gets a value that indicates whether a property is canonical according to the definition of the property description.</summary>
            <param name="propvar">A PROPVARIANT that contains the type and value of the property.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescription.ToString">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescription.Raw">
            <summary>Gets the raw interface object wrapped by this object.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.PropertyDescriptionList">
            <summary>Exposes methods that extract information from a collection of property descriptions presented as a list.</summary>
            <seealso cref="T:System.Collections.Generic.IReadOnlyList`1"/>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:Vanara.Windows.Shell.PropertyDescriptionList.iList">
            <summary>The IPropertyDescriptionList instance.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescriptionList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.PropertyDescriptionList"/> class from a string.
            </summary>
            <param name="propList">The property list. See <see cref="M:Vanara.PInvoke.PropSys.IPropertySystem.GetPropertyDescriptionListFromString(System.String,System.Guid@)"/> for the required format.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescriptionList.#ctor(Vanara.PInvoke.PropSys.IPropertyDescriptionList)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.PropertyDescriptionList"/> class.</summary>
            <param name="list">The COM interface pointer.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescriptionList.Count">
            <inheritdoc />
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescriptionList.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyDescriptionList.Item(Vanara.PInvoke.Ole32.PROPERTYKEY)">
            <summary>Gets the <see cref="T:Vanara.Windows.Shell.PropertyDescription" /> for the specified key.</summary>
            <value>The <see cref="T:Vanara.Windows.Shell.PropertyDescription" />.</value>
            <param name="propkey">The PROPERTYKEY.</param>
            <returns>The <see cref="T:Vanara.Windows.Shell.PropertyDescription" /> for the specified key.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescriptionList.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescriptionList.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescriptionList.GetValuesForShellItem(Vanara.Windows.Shell.ShellItem)">
            <summary>Gets the values for each property defined by this list for a specified shell item.</summary>
            <param name="shellItem">The shell item used to retrieve property values.</param>
            <returns>A list of property values.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescriptionList.ToString">
            <inheritdoc />
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescriptionList.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyDescriptionList.Enum">
            <summary>Enumerates through the items in this instance.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> for this list.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.PropertyType">
            <summary>Exposes methods that extract data from enumeration information.</summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:Vanara.Windows.Shell.PropertyType.iType">
            <summary>The IPropertyEnumType instance.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.PropertyType.iType2">
            <summary>The IPropertyEnumType2 instance.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyType.#ctor(Vanara.PInvoke.PropSys.IPropertyEnumType)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.PropertyType"/> class.</summary>
            <param name="type">The IPropertyEnumType object.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyType.DisplayText">
            <summary>Gets the display text.</summary>
            <value>The display text.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyType.EnumType">
            <summary>Gets an enumeration type.</summary>
            <value>The enumeration type.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyType.ImageReference">
            <summary>Gets the image reference.</summary>
            <value>The image reference.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyType.RangeMinValue">
            <summary>Gets a minimum value.</summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyType.RangeSetValue">
            <summary>Gets a set value.</summary>
            <value>The set value.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyType.Value">
            <summary>Gets a value.</summary>
            <value>The value.</value>EnumType != PROPENUMTYPE.PET_DEFAULTVALUE ? 
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyType.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyType.ToString">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.PropertyTypeList">
            <summary>Exposes methods that enumerate the possible values for a property.</summary>
            <seealso cref="T:System.Collections.Generic.IReadOnlyList`1"/>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:Vanara.Windows.Shell.PropertyTypeList.iList">
            <summary>The IPropertyEnumTypeList object.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyTypeList.#ctor(Vanara.PInvoke.PropSys.IPropertyEnumTypeList)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.PropertyTypeList"/> class.</summary>
            <param name="list">The IPropertyEnumTypeList object.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyTypeList.Count">
            <summary>Gets the number of elements in the collection.</summary>
            <value>The number of elements in the collection.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyTypeList.Item(System.Int32)">
            <summary>Gets the <see cref="T:Vanara.Windows.Shell.PropertyType"/> at the specified index.</summary>
            <value>The <see cref="T:Vanara.Windows.Shell.PropertyType"/>.</value>
            <param name="index">The index.</param>
            <returns>The <see cref="T:Vanara.Windows.Shell.PropertyType"/> at the specified index.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyTypeList.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyTypeList.IndexOf(System.Object)">
            <summary>Determines the index of a specific item in the list.</summary>
            <param name="obj">The object to locate in the list.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyTypeList.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyTypeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyTypeList.Enum">
            <summary>Enumerates through the items in this instance.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> for this list.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.PropertyStore">
            <summary>Encapsulates the IPropertyStore object.</summary>
            <seealso cref="T:System.Collections.Generic.IDictionary`2"/>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyStore.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.PropertyStore"/> class.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.PropertyStore.PropertyChanged">
            <summary>Occurs when a property value changes.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyStore.IsDirty">
            <summary>Gets or sets a value indicating whether this property store has uncommitted changes.</summary>
            <value><c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyStore.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyStore.Keys">
            <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyStore.Values">
            <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyStore.Item(System.String)">
            <summary>Gets or sets the value of the property with the specified known key.</summary>
            <value>The value.</value>
            <param name="knownKey">The known key of the property (e.g. "System.Title"}.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="P:Vanara.Windows.Shell.PropertyStore.Item(Vanara.PInvoke.Ole32.PROPERTYKEY)">
            <summary>Gets or sets the value of the property with the specified PROPERTYKEY.</summary>
            <value>The value.</value>
            <param name="key">The PROPERTYKEY of the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyStore.Add(Vanara.PInvoke.Ole32.PROPERTYKEY,System.Object)">
            <summary>Adds a property with the provided key and value to the property store.</summary>
            <param name="key">The PROPERTYKEY for the new property.</param>
            <param name="value">The value of the new property.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyStore.Commit">
            <summary>Commits all changes to the property store.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyStore.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyStore.IsPropertyWritable(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
            <summary>Queries whether the property handler allows a specific property to be edited in the UI by the user.</summary>
            <param name="key">
            <para>A PROPERTYKEY structure that represents the property being queried.</para>
            </param>
            <returns><see langword="true"/> if the property can be edited and stored by the handler; otherwise <see langword="false"/>.</returns>
            <remarks>
            The Shell disables the editing of controls by the user as appropriate through this method. A handler that does not support
            IPropertyStoreCapabilities is assumed to support writing of any property.
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{Vanara#PInvoke#Ole32#PROPERTYKEY,System#Object}}#Add(System.Collections.Generic.KeyValuePair{Vanara.PInvoke.Ole32.PROPERTYKEY,System.Object})">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{Vanara#PInvoke#Ole32#PROPERTYKEY,System#Object}}#Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{Vanara#PInvoke#Ole32#PROPERTYKEY,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{Vanara.PInvoke.Ole32.PROPERTYKEY,System.Object})">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyStore.System#Collections#Generic#IDictionary{Vanara#PInvoke#Ole32#PROPERTYKEY,System#Object}#Remove(Vanara.PInvoke.Ole32.PROPERTYKEY)">
            <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            <see langword="true"/> if the element is successfully removed; otherwise, <see langword="false"/>. This method also returns <see
            langword="false"/> if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{Vanara#PInvoke#Ole32#PROPERTYKEY,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{Vanara.PInvoke.Ole32.PROPERTYKEY,System.Object})">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise,
            <see langword="false"/>. This method also returns <see langword="false"/> if <paramref name="item"/> is not found in the
            original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Vanara.Windows.Shell.PropertyStore.OnPropertyChanged(System.String)">
            <summary>Called when a property has changed.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ReadOnlyPropertyStore">
            <summary>Encapsulates the IPropertyStore object.</summary>
            <seealso cref="T:System.Collections.Generic.IDictionary`2"/>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:Vanara.Windows.Shell.ReadOnlyPropertyStore.iPropertyStore">
            <summary>The IPropertyStore instance.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.PropertyStore"/> class.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ReadOnlyPropertyStore.Count">
            <summary>Gets the number of properties in the current property store.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ReadOnlyPropertyStore.Descriptions">
            <summary>Value that allows matching this property store's keys to their property descriptions.</summary>
            <value>The property descriptions.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ReadOnlyPropertyStore.IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ReadOnlyPropertyStore.Keys">
            <summary>Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ReadOnlyPropertyStore.Values">
            <summary>Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the values in the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ReadOnlyPropertyStore.Item(System.String)">
            <summary>Gets or sets the value of the property with the specified known key.</summary>
            <value>The value.</value>
            <param name="knownKey">The known key of the property (e.g. "System.Title"}.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="P:Vanara.Windows.Shell.ReadOnlyPropertyStore.Item(Vanara.PInvoke.Ole32.PROPERTYKEY)">
            <summary>Gets or sets the value of the property with the specified PROPERTYKEY.</summary>
            <value>The value.</value>
            <param name="key">The PROPERTYKEY of the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.GetPropertyKeyFromName(System.String)">
            <summary>Gets the property key for a canonical property name.</summary>
            <param name="name">A property name.</param>
            <returns>The requested property key.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.ContainsKey(Vanara.PInvoke.Ole32.PROPERTYKEY)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.</summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.CopyTo(System.Collections.Generic.KeyValuePair{Vanara.PInvoke.Ole32.PROPERTYKEY,System.Object}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see
            cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see
            cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex - The number of items exceeds the length of the supplied array.</exception>
            <exception cref="T:System.ArgumentNullException">array</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.GetProperty``1(Vanara.PInvoke.Ole32.PROPERTYKEY)">
            <summary>Gets the property.</summary>
            <typeparam name="TVal">The type of the value.</typeparam>
            <param name="key">The key.</param>
            <returns>The cast value of the property.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">key</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.GetPropertyDescription(Vanara.PInvoke.Ole32.PROPERTYKEY)">
            <summary>Gets the property description related to a property key.</summary>
            <param name="key">The key.</param>
            <returns>The related property description, if one exists; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.GetPropertyString(Vanara.PInvoke.Ole32.PROPERTYKEY,Vanara.PInvoke.PropSys.PROPDESC_FORMAT_FLAGS)">
            <summary>Gets the string value of the property.</summary>
            <param name="key">The key.</param>
            <param name="flags">The formatting flags.</param>
            <returns>The string value of the property.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">key</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.GetPropVariant(Vanara.PInvoke.Ole32.PROPERTYKEY)">
            <summary>Gets the PROPVARIANT value for a key.</summary>
            <param name="key">The key.</param>
            <returns>The PROPVARIANT value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">key</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.TryGetValue(Vanara.PInvoke.Ole32.PROPERTYKEY,System.Object@)">
            <summary>Gets the value associated with the specified key.</summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the
            type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the
            specified key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.TryGetValue``1(Vanara.PInvoke.Ole32.PROPERTYKEY,``0@)">
            <summary>Gets the value associated with the specified key.</summary>
            <typeparam name="TVal">The type of the returned value.</typeparam>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the
            type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the
            specified key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Vanara#PInvoke#Ole32#PROPERTYKEY,System#Object}}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.TryGetValue``1(Vanara.PInvoke.PropSys.IPropertyStore,Vanara.PInvoke.Ole32.PROPERTYKEY,``0@)">
            <summary>Gets the value associated with the specified key.</summary>
            <param name="ps">The IPropertyStore instance.</param>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; otherwise, <c>default(T)</c>.
            </param>
            <returns><see langword="true"/> if the property store contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.GetIPropertyStore">
            <summary>The IPropertyStore instance. This can be null.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.GetKeyEnum(Vanara.PInvoke.PropSys.IPropertyStore)">
            <summary>Gets an enumeration of the keys in the property store.</summary>
            <returns>Keys in the property store.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.Run(System.Action{Vanara.PInvoke.PropSys.IPropertyStore})">
            <summary>Runs the specified action with a retrived IPropertyStore instance.</summary>
            <param name="action">The action to run.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ReadOnlyPropertyStore.Run``1(System.Func{Vanara.PInvoke.PropSys.IPropertyStore,``0})">
            <summary>Runs the specified action with a retrived IPropertyStore instance.</summary>
            <typeparam name="T">The return type of the action and method.</typeparam>
            <param name="action">The action to run.</param>
            <returns>The return value from <paramref name="action"/>.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.ShellItemPropertyStore">
            <summary>A property store for a <see cref="T:Vanara.Windows.Shell.ShellItem"/>.</summary>
            <seealso cref="T:Vanara.Windows.Shell.PropertyStore"/>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemPropertyStore.shellItem">
            <summary>The shell item</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.ShellItemPropertyStore.flags">
            <summary>The flags.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemPropertyStore.#ctor(Vanara.Windows.Shell.ShellItem,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ShellItemPropertyStore"/> class.</summary>
            <param name="item">The ShellItem instance.</param>
            <param name="propChangedHandler">The optional property changed handler.</param>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemPropertyStore.Creator">
            <summary>
            Gets or sets the ICreateObject used instead of CoCreateInstance to create an instance of the property handler associated with
            the Shell item on which this method is called. If this value is set, <see cref="P:Vanara.Windows.Shell.ShellItemPropertyStore.PropertyFilter"/> will be ignored.
            </summary>
            <value>The creator object.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemPropertyStore.IncludeSlow">
            <summary>Gets or sets a value indicating whether to include slow properties.</summary>
            <value><c>true</c> if including slow properties; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemPropertyStore.IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemPropertyStore.NoInheritedProperties">
            <summary>Gets or sets a value indicating whether to include only properties directly from the property handler.</summary>
            <value><c>true</c> if no inherited properties; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemPropertyStore.PropertyFilter">
            <summary>
            Gets or sets a set of properties used to filter the property store. This value can be <see langword="null"/>. This value will be
            ignored if <see cref="P:Vanara.Windows.Shell.ShellItemPropertyStore.Creator"/> is also set.
            </summary>
            <value>The list of properties used to filter.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemPropertyStore.ReadOnly">
            <summary>Gets or sets a value indicating whether properties can be read and written.</summary>
            <value><c>true</c> if properties are read/write; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ShellItemPropertyStore.Temporary">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Vanara.Windows.Shell.ShellItemPropertyStore"/> provides a writable store, with no initial
            properties, that exists for the lifetime of the Shell item instance; basically, a property bag attached to the item instance..
            </summary>
            <value><c>true</c> if temporary; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemPropertyStore.GetCLSID(Vanara.PInvoke.Ole32.PROPERTYKEY)">
            <summary>Gets the CLSID of a supplied property key.</summary>
            <param name="propertyKey">The property key.</param>
            <returns>The CLSID related to the property key.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.ShellItemPropertyStore.GetIPropertyStore">
            <summary>The IPropertyStore instance. This can be null.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.StockIcon">
            <summary>Represents a standard system icon.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.StockIcon.#ctor(Vanara.PInvoke.Shell32.SHSTOCKICONID,Vanara.Windows.Shell.ShellIconType,System.Boolean,System.Boolean)">
            <summary>Creates a new StockIcon instance with the specified identifer and options.</summary>
            <param name="id">A value that identifies the icon represented by this instance.</param>
            <param name="size">A value that indicates the size of the stock icon.</param>
            <param name="isLinkOverlay">A bool value that indicates whether the icon has a link overlay.</param>
            <param name="isSelected">A bool value that indicates whether the icon is in a selected state.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.StockIcon.Finalize">
            <summary>Finalizes an instance of the <see cref="T:Vanara.Windows.Shell.StockIcon"/> class.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.StockIcon.Bitmap">
            <summary>Gets the icon image in <see cref="T:System.Drawing.Bitmap"/> format.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.StockIcon.Icon">
            <summary>Gets the icon image in <see cref="T:System.Drawing.Icon"/> format.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.StockIcon.IconHandle">
            <summary>Gets the icon handle.</summary>
            <value>The icon handle.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.StockIcon.Identifier">
            <summary>Gets or sets the Stock Icon identifier associated with this icon.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.StockIcon.LinkOverlay">
            <summary>Gets or sets a value that cotrols whether to put a link overlay on the icon.</summary>
            <value>A <see cref="T:System.Boolean"/> value.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.StockIcon.Location">
            <summary>Gets the icon location, composed of a resource path and the icon's index.</summary>
            <value>The icon location.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.StockIcon.Selected">
            <summary>Gets or sets a value indicating whether the icon appears selected.</summary>
            <value>A <see cref="T:System.Boolean"/> value.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.StockIcon.Size">
            <summary>Gets or sets a value that controls the size of the Stock Icon.</summary>
            <value>A <see cref="T:Vanara.Windows.Shell.ShellIconType"/> value.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.StockIcon.SystemImageIndex">
            <summary>Gets the index of the image in the system icon cache.</summary>
            <value>The index of the system image.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.StockIcon.Dispose">
            <summary>Release the native objects</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.StockIcon.Dispose(System.Boolean)">
            <summary>Release the native and managed objects</summary>
            <param name="disposing">Indicates that this is being called from Dispose(), rather than the finalizer.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.ThumbnailToolbarButton">
            <summary>A button in the toolbar associated with thumbnails displayed on a taskbar button.</summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
        </member>
        <member name="M:Vanara.Windows.Shell.ThumbnailToolbarButton.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ThumbnailToolbarButton"/> class.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ThumbnailToolbarButton.Click">
            <summary>Occurs when the button is clicked.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ThumbnailToolbarButton.PropertyChanged">
            <summary>Occurs when a property has changed.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ThumbnailToolbarButton.Description">
            <summary>Gets or sets the description displayed as a tooltip for the button.</summary>
            <value>The description text.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ThumbnailToolbarButton.DismissWhenClicked">
            <summary>Gets or sets a value indicating whether to dismiss the thumbnail when this button is clicked.</summary>
            <value><see langword="true"/> to dismiss when clicked; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ThumbnailToolbarButton.DrawButtonBorder">
            <summary>Gets or sets a value indicating whether to draw the button's border.</summary>
            <value><see langword="true"/> if button border is drawn; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ThumbnailToolbarButton.Icon">
            <summary>Gets or sets the icon shown on the toolbar button.</summary>
            <value>The button icon.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ThumbnailToolbarButton.ImageIndex">
            <summary>Gets or sets the index of the image from <see cref="P:Vanara.Windows.Shell.ThumbnailToolbar.ImageList"/>.</summary>
            <value>The index of the image.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">ImageIndex</exception>
        </member>
        <member name="P:Vanara.Windows.Shell.ThumbnailToolbarButton.ImageKey">
            <summary>Gets or sets the image key of the image from <see cref="P:Vanara.Windows.Shell.ThumbnailToolbar.ImageList"/>.</summary>
            <value>The image key value.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ThumbnailToolbarButton.IsEnabled">
            <summary>Gets or sets a value indicating whether this button is enabled.</summary>
            <value><see langword="true"/> if this button is enabled; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ThumbnailToolbarButton.IsInteractive">
            <summary>
            Gets or sets a value indicating whether this button is interactive. If <see langword="false"/>, no pressed button state is
            drawn. This is intended for instances where the button is used in a notification.
            </summary>
            <value><see langword="true"/> if this button is interactive; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ThumbnailToolbarButton.Visibility">
            <summary>Gets or sets the visibility of the button.</summary>
            <value>The button visibility.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.ThumbnailToolbarButton.OnPropertyChanged(System.String)">
            <summary>Called when a property has changed.</summary>
            <param name="propName">Name of the property.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.IJumpListItem">
            <summary>Represents a Jump List item.</summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
        </member>
        <member name="P:Vanara.Windows.Shell.IJumpListItem.Category">
            <summary>Gets the category to which the item belongs.</summary>
            <value>The category name.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.IJumpListItem.GetShellObject">
            <summary>Creates a shell object based on this item.</summary>
            <returns>An instance of either <see cref="T:Vanara.PInvoke.Shell32.IShellItem"/> or <see cref="T:Vanara.PInvoke.Shell32.IShellLinkW"/>.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.JumpList">
            <summary>Provides access to the jump list on the application's task bar icon.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpList.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.JumpList"/> class.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.JumpList.Count">
            <summary>Gets the number of items in the collection.</summary>
            <value>The count.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.JumpList.ShowFrequentCategory">
            <summary>Whether to show the special "Frequent" category.</summary>
            <remarks>
            This category is managed by the Shell and keeps track of items that are frequently accessed by this program. Applications can
            request that specific items are included here by calling JumpList.AddToRecentCategory. Because of duplication, applications
            generally should not have both ShowRecentCategory and ShowFrequentCategory set at the same time.
            </remarks>
        </member>
        <member name="P:Vanara.Windows.Shell.JumpList.ShowRecentCategory">
            <summary>Whether to show the special "Recent" category.</summary>
            <remarks>
            This category is managed by the Shell and keeps track of items that have been recently accessed by this program. Applications
            can request that specific items are included here by calling JumpList.AddToRecentCategory Because of duplication, applications
            generally should not have both ShowRecentCategory and ShowFrequentCategory set at the same time.
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpList.AddToRecentDocs(System.String)">
            <summary>
            Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most frequently.
            </summary>
            <param name="docPath">The document path to add.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpList.AddToRecentDocs(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>
            Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most frequently.
            </summary>
            <param name="iShellItem">The <see cref="T:Vanara.PInvoke.Shell32.IShellItem"/> to add.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpList.AddToRecentDocs(Vanara.PInvoke.Shell32.IShellLinkW)">
            <summary>
            Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most frequently.
            </summary>
            <param name="iShellLink">The <see cref="T:Vanara.PInvoke.Shell32.IShellLinkW"/> to add.</param>
            <exception cref="T:System.ArgumentNullException">iShellLink</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpList.AddToRecentDocs(Vanara.Windows.Shell.ShellItem)">
            <summary>
            Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most frequently.
            </summary>
            <param name="shellItem">The <see cref="T:Vanara.Windows.Shell.ShellItem"/> to add.</param>
            <exception cref="T:System.ArgumentNullException">shellItem</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpList.ClearRecentDocs">
            <summary>Clears the system usage data for recent documents.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpList.DeleteList(System.String)">
            <summary>Deletes a custom Jump List for a specified application.</summary>
            <param name="appId">The AppUserModelID of the process whose taskbar button representation displays the custom Jump List.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpList.ApplySettings(System.String)">
            <summary>Applies the the current settings for the jumplist to the taskbar button.</summary>
            <param name="appId">The application identifier.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.JumpListDestination">
            <summary>A file-based destination for a jumplist with an associated category.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpListDestination.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.JumpListDestination"/> class.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.JumpListDestination.Path">
            <summary>The shell item to reference or execute.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpListDestination.ToString">
            <summary>Converts to string.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpListDestination.Vanara#Windows#Shell#IJumpListItem#GetShellObject">
            <summary>Creates a shell object based on this item.</summary>
            <returns>An interface.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.JumpListItem">
            <summary>An item in a Jump List.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.JumpListItem.PropertyChanged">
            <summary>Occurs when a property value changes.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.JumpListItem.Category">
            <summary>Gets or sets the category to which the item belongs.</summary>
            <value>The category name.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpListItem.OnPropertyChanged(System.String)">
            <summary>Called when a property has changed.</summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.JumpListSeparator">
            <summary>A separator which can be inserted into a custom list or task list.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpListSeparator.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.JumpListSeparator"/> class and optionally assigns it to a category.</summary>
            <param name="category">The category name. If this value is <see langword="null"/>, this separator will be inserted into the task list.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpListSeparator.Vanara#Windows#Shell#IJumpListItem#GetShellObject">
            <summary>Creates a shell object based on this item.</summary>
            <returns>An instance of either <see cref="T:Vanara.PInvoke.Shell32.IShellItem"/> or <see cref="T:Vanara.PInvoke.Shell32.IShellLinkW"/>.</returns>
        </member>
        <member name="T:Vanara.Windows.Shell.JumpListTask">
            <summary>A task for a jumplist.</summary>
            <seealso cref="T:Vanara.Windows.Shell.JumpListItem"/>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpListTask.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.JumpListTask"/> class.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.JumpListTask.ApplicationPath">
            <summary>Gets or sets the application path.</summary>
            <value>The application path.</value>
            <exception cref="T:System.ArgumentNullException">ApplicationPath</exception>
        </member>
        <member name="P:Vanara.Windows.Shell.JumpListTask.AppUserModelID">
            <summary>
            Gets or sets an explicit Application User Model ID used to associate processes, files, and windows with a particular application.
            </summary>
            <value>The application path.</value>
            <remarks>
            An application must provide its AppUserModelID in the following form. It can have no more than 128 characters and cannot contain
            spaces. Each section should be camel-cased.
            <para><c>CompanyName.ProductName.SubProduct.VersionInformation</c></para>
            <para>
            CompanyName and ProductName should always be used, while the SubProduct and VersionInformation portions are optional and depend
            on the application's requirements. SubProduct allows a main application that consists of several subapplications to provide a
            separate taskbar button for each subapplication and its associated windows. VersionInformation allows two versions of an
            application to coexist while being seen as discrete entities. If an application is not intended to be used in that way, the
            VersionInformation should be omitted so that an upgraded version can use the same AppUserModelID as the version that it replaced.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.Windows.Shell.JumpListTask.Arguments">
            <summary>Gets or sets the arguments.</summary>
            <value>The arguments.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.JumpListTask.Description">
            <summary>Gets or sets the description.</summary>
            <value>The description.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.JumpListTask.IconResourceIndex">
            <summary>Gets or sets the index of the icon resource.</summary>
            <value>The index of the icon resource.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.JumpListTask.IconResourcePath">
            <summary>Gets or sets the icon resource path.</summary>
            <value>The icon resource path.</value>
            <exception cref="T:System.ArgumentException">Length of path may not exceed 260 characters. - IconResourcePath</exception>
        </member>
        <member name="P:Vanara.Windows.Shell.JumpListTask.Title">
            <summary>Gets or sets the title.</summary>
            <value>The title.</value>
            <exception cref="T:System.ArgumentNullException">Title</exception>
        </member>
        <member name="P:Vanara.Windows.Shell.JumpListTask.WorkingDirectory">
            <summary>Gets or sets the working directory.</summary>
            <value>The working directory.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpListTask.ToString">
            <summary>Converts to string.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpListTask.Vanara#Windows#Shell#IJumpListItem#GetShellObject">
            <summary>Creates a shell object based on this item.</summary>
            <returns>An interface.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpListItemCollectionEditor.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.JumpListItemCollectionEditor"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpListItemCollectionEditor.CreateCollectionForm">
            <summary>Creates the collection form.</summary>
            <returns></returns>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpListItemCollectionEditor.CreateNewItemTypes">
            <summary>Creates the new item types.</summary>
            <returns></returns>
        </member>
        <member name="M:Vanara.Windows.Shell.JumpListItemCollectionEditor.SetItems(System.Object,System.Object[])">
            <summary>Sets the items.</summary>
            <param name="editValue">The edit value.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Vanara.Windows.Shell.TaskbarButton">
            <summary>Provides access to the functionality of the taskbar button.</summary>
            <seealso cref="T:System.ComponentModel.Component"/>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.TaskbarButton"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.#ctor(System.ComponentModel.IContainer)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.TaskbarButton"/> class.</summary>
            <param name="container">The container of this component.</param>
            <exception cref="T:System.ArgumentNullException">container</exception>
        </member>
        <member name="E:Vanara.Windows.Shell.TaskbarButton.TaskbarButtonCreated">
            <summary>
            Occurs when the system reports a taskbar button has been created. The first parameter will contain the HWND of the window for
            which the button was created.
            </summary>
        </member>
        <member name="E:Vanara.Windows.Shell.TaskbarButton.ThumbnailButtonClick">
            <summary>
            Occurs when the system reports a thumbnail button has been clicked. The first parameter contains the HWND of the window shown by
            the thumbnail and the second contains the Command ID of the button that was clicked.
            </summary>
        </member>
        <member name="E:Vanara.Windows.Shell.TaskbarButton.PropertyChanged">
            <summary>Occurs when a property has changed.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.TaskbarButton.IsTaskbarButtonCreated">
            <summary>Gets a value indicating whether the taskbar button has been created.</summary>
            <value><see langword="true"/> if the taskbar button was created; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.BeginInit">
            <summary>Signals the object that initialization is starting.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.GetAppID(System.Windows.Forms.Form)">
            <summary>Gets the application identifier.</summary>
            <param name="form">The form.</param>
            <returns>The application identifier.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.GetJumpList(System.Windows.Forms.Form)">
            <summary>Gets the jumplist to display on this taskbar button.</summary>
            <param name="form">The form.</param>
            <returns>The jumplist.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.GetTaskbarButtonOverlay(System.Windows.Forms.Form)">
            <summary>Gets the overlay icon to dispaly on a taskbar button to indicate application status or a notification to the user.</summary>
            <param name="form">The form.</param>
            <returns>The overlay icon.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.GetTaskbarButtonOverlayTooltip(System.Windows.Forms.Form)">
            <summary>
            Gets the overlay tooltip to dispaly on a taskbar button to indicate application status or a notification to the user.
            </summary>
            <param name="form">The form.</param>
            <returns>The overlay tooltip.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.GetTaskbarButtonProgressState(System.Windows.Forms.Form)">
            <summary>Gets the state of the progress indicator displayed on a taskbar button.</summary>
            <param name="form">
            The window in which the progress of an operation is being shown. This window's associated taskbar button will display the
            progress bar.
            </param>
            <returns>The current state of the progress button.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.GetTaskbarButtonProgressValue(System.Windows.Forms.Form)">
            <summary>
            Displays or updates a progress bar hosted in a taskbar button to show the specific percentage completed of the full operation.
            </summary>
            <param name="form">The window whose associated taskbar button is being used as a progress indicator.</param>
            <returns>The proportion of the operation that has been completed at the time the method is called.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.GetTaskbarButtonThumbnails(System.Windows.Forms.Form)">
            <summary>Gets the taskbar button thumbnails.</summary>
            <param name="form">The window owning the taskbar button thumbnails.</param>
            <returns>A collection of thumbnails.</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.GetTaskbarButtonTooltip(System.Windows.Forms.Form)">
            <summary>Gets the description displayed on the tooltip of the taskbar button.</summary>
            <param name="form">The form.</param>
            <returns>The description</returns>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.SetAppID(System.Windows.Forms.Form,System.String)">
            <summary>Sets the application identifier.</summary>
            <param name="form">The form.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.SetTaskbarButtonOverlay(System.Windows.Forms.Form,System.Drawing.Icon)">
            <summary>Sets the overlay icon to dispaly on a taskbar button to indicate application status or a notification to the user.</summary>
            <param name="form">The form.</param>
            <param name="value">The overlay icon to apply.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.SetTaskbarButtonOverlayTooltip(System.Windows.Forms.Form,System.String)">
            <summary>
            Gets the overlay tooltip to dispaly on a taskbar button to indicate application status or a notification to the user.
            </summary>
            <param name="form">The form.</param>
            <param name="value">The overlay tooltip.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.SetTaskbarButtonProgressState(System.Windows.Forms.Form,Vanara.Windows.Shell.TaskbarButtonProgressState)">
            <summary>Sets the type and state of the progress indicator displayed on a taskbar button.</summary>
            <param name="form">
            The window in which the progress of an operation is being shown. This window's associated taskbar button will display the
            progress bar.
            </param>
            <param name="value">The current state of the progress button. Specify only one of the enum values.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.SetTaskbarButtonProgressValue(System.Windows.Forms.Form,System.Single)">
            <summary>
            Displays or updates a progress bar hosted in a taskbar button to show the specific percentage completed of the full operation.
            </summary>
            <param name="form">The window whose associated taskbar button is being used as a progress indicator.</param>
            <param name="value">
            The proportion of the operation that has been completed at the time the method is called. This value must be between 0.0f and
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.SetTaskbarButtonTooltip(System.Windows.Forms.Form,System.String)">
            <summary>Sets the description displayed on the tooltip of the taskbar button.</summary>
            <param name="form">The form.</param>
            <param name="value">The description.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButton.OnProperyChanged(System.Windows.Forms.Form,System.String)">
            <summary>Calls the <see cref="E:Vanara.Windows.Shell.TaskbarButton.PropertyChanged"/> event.</summary>
            <param name="form">The form.</param>
            <param name="propName">Name of the changed property.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.TaskbarItemTabThumbnailOption">
            <summary>Specifies taskbar button thumbnail tab properties.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.TaskbarItemTabThumbnailOption.TabWindow">
            <summary>The tab window provides a thumbnail and peek image, either live or static as appropriate.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.TaskbarItemTabThumbnailOption.MainWindow">
            <summary>
            Always use the thumbnail or peek image provided by the main application frame window rather than a thumbnail or peek image
            provided by the individual tab window.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.TaskbarItemTabThumbnailOption.MainWindowWhenActive">
            <summary>
            When the application tab is active and a live representation of its window is available, use the main application's frame window
            as the thumbnail or peek feature. At other times, use the tab window thumbnail or peek feature.
            </summary>
        </member>
        <member name="T:Vanara.Windows.Shell.TaskbarButtonThumbnail">
            <summary></summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButtonThumbnail.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.TaskbarButtonThumbnail"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButtonThumbnail.#ctor(System.Windows.Forms.Control)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.TaskbarButtonThumbnail"/> class.</summary>
            <param name="tabWindow">The tab window.</param>
        </member>
        <member name="E:Vanara.Windows.Shell.TaskbarButtonThumbnail.PropertyChanged">
            <summary>Occurs when a property has changed.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.TaskbarButtonThumbnail.ChildWindow">
            <summary>Gets or sets the child window whose image will be displayed in this thumbnail.</summary>
            <value>The child window.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.TaskbarButtonThumbnail.PeekImageProvider">
            <summary>Gets or sets the peek image provider.</summary>
            <value>The peek image provider.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.TaskbarButtonThumbnail.ThumbnailProvider">
            <summary>Gets or sets the thumbnail provider.</summary>
            <value>The thumbnail provider.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarButtonThumbnail.OnPropertyChanged(System.String)">
            <summary>Called when [property changed].</summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.TaskbarButtonThumbnails">
            <summary>The list of thumbnails to be displayed on the taskbar button.</summary>
            <seealso cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>
        </member>
        <member name="P:Vanara.Windows.Shell.TaskbarButtonThumbnails.Toolbar">
            <summary>Gets or sets the toolbar associated with the taskbar button.</summary>
            <value>The toolbar.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.TaskbarButtonThumbnails.Count">
            <summary>Gets the count.</summary>
            <value>The count.</value>
        </member>
        <member name="T:Vanara.Windows.Shell.TaskbarButtonProgressState">
            <summary>State of the progress shown on a taskbar button.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.TaskbarButtonProgressState.None">
            <summary>No progress is displayed.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.TaskbarButtonProgressState.Indeterminate">
            <summary>The progress is indeterminate (marquee).</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.TaskbarButtonProgressState.Normal">
            <summary>Normal progress is displayed.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.TaskbarButtonProgressState.Error">
            <summary>An error occurred (red).</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.TaskbarButtonProgressState.Paused">
            <summary>The operation is paused (yellow).</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.TaskbarList">
            <summary>
            Methods that control the Windows taskbar. It allows you to dynamically add, remove, and activate items on the taskbar. This wraps
            all of the ITaskbarListX interfaces.
            </summary>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.ActivateTaskbarItem(System.Windows.Forms.IWin32Window)">
            <summary>
            Activates an item on the taskbar. The window is not actually activated; the window's item on the taskbar is merely displayed as active.
            </summary>
            <param name="parent">The window on the taskbar to be displayed as active.</param>
            <exception cref="T:System.ArgumentNullException">parent</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.ActivateTaskbarItem(Vanara.PInvoke.HWND)">
            <summary>
            Activates an item on the taskbar. The window is not actually activated; the window's item on the taskbar is merely displayed as active.
            </summary>
            <param name="hwnd">The window on the taskbar to be displayed as active.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.MarkFullscreenWindow(System.Windows.Forms.IWin32Window,System.Boolean)">
            <summary>Marks a window as full-screen.</summary>
            <param name="parent">The window to be marked.</param>
            <param name="fullscreen">A Boolean value marking the desired full-screen status of the window.</param>
            <exception cref="T:System.ArgumentNullException">parent</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.MarkFullscreenWindow(Vanara.PInvoke.HWND,System.Boolean)">
            <summary>Marks a window as full-screen.</summary>
            <param name="hwnd">The window to be marked.</param>
            <param name="fullscreen">A Boolean value marking the desired full-screen status of the window.</param>
            <exception cref="T:System.ArgumentNullException">parent</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.RegisterTab(System.Windows.Forms.IWin32Window,System.Windows.Forms.IWin32Window)">
            <summary>
            Informs the taskbar that a new tab or document thumbnail has been provided for display in an application's taskbar group flyout.
            </summary>
            <param name="parent">The tab or document window. This value is required and cannot be NULL.</param>
            <param name="childWindow">
            The application's main window. This value tells the taskbar which application's preview group to attach the new thumbnail to.
            This value is required and cannot be NULL.
            </param>
            <remarks>
            By itself, registering a tab thumbnail alone will not result in its being displayed. You must also call SetTabOrder to instruct
            the group where to display it.
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.RegisterTab(Vanara.PInvoke.HWND,Vanara.PInvoke.HWND)">
            <summary>
            Informs the taskbar that a new tab or document thumbnail has been provided for display in an application's taskbar group flyout.
            </summary>
            <param name="hwndTab">The tab or document window. This value is required and cannot be NULL.</param>
            <param name="hwndMDI">
            The application's main window. This value tells the taskbar which application's preview group to attach the new thumbnail to.
            This value is required and cannot be NULL.
            </param>
            <remarks>
            By itself, registering a tab thumbnail alone will not result in its being displayed. You must also call SetTabOrder to instruct
            the group where to display it.
            </remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetActiveAlt(System.Windows.Forms.IWin32Window)">
            <summary>Marks a taskbar button as active but does not visually activate it.</summary>
            <param name="parent">The window to be marked as active.</param>
            <exception cref="T:System.ArgumentNullException">parent</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetActiveAlt(Vanara.PInvoke.HWND)">
            <summary>Marks a taskbar button as active but does not visually activate it.</summary>
            <param name="hwnd">The window to be marked as active.</param>
            <exception cref="T:System.ArgumentNullException">parent</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetOverlayIcon(System.Windows.Forms.IWin32Window,System.Drawing.Icon,System.String)">
            <summary>Applies an overlay to a taskbar button to indicate application status or a notification to the user.</summary>
            <param name="parent">
            The window whose associated taskbar button receives the overlay. This window must belong to a calling process associated with
            the button's application.
            </param>
            <param name="icon">
            The icon to use as the overlay. This should be a small icon, measuring 16x16 pixels at 96 dpi. If an overlay icon is already
            applied to the taskbar button, that existing overlay is replaced.
            <para>
            This value can be <see langword="null"/>. How a <see langword="null"/> value is handled depends on whether the taskbar button
            represents a single window or a group of windows.
            </para>
            <list type="bullet">
            <item>
            <term>If the taskbar button represents a single window, the overlay icon is removed from the display.</term>
            </item>
            <item>
            <term>
            If the taskbar button represents a group of windows and a previous overlay is still available (received earlier than the current
            overlay, but not yet freed by a NULL value), then that previous overlay is displayed in place of the current overlay.
            </term>
            </item>
            </list>
            </param>
            <param name="description">
            A string that provides an alt text version of the information conveyed by the overlay, for accessibility purposes.
            </param>
            <exception cref="T:System.ArgumentNullException">parent</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetOverlayIcon(Vanara.PInvoke.HWND,System.Drawing.Icon,System.String)">
            <summary>Applies an overlay to a taskbar button to indicate application status or a notification to the user.</summary>
            <param name="hwnd">
            The window whose associated taskbar button receives the overlay. This window must belong to a calling process associated with
            the button's application.
            </param>
            <param name="icon">
            The icon to use as the overlay. This should be a small icon, measuring 16x16 pixels at 96 dpi. If an overlay icon is already
            applied to the taskbar button, that existing overlay is replaced.
            <para>
            This value can be <see langword="null"/>. How a <see langword="null"/> value is handled depends on whether the taskbar button
            represents a single window or a group of windows.
            </para>
            <list type="bullet">
            <item>
            <term>If the taskbar button represents a single window, the overlay icon is removed from the display.</term>
            </item>
            <item>
            <term>
            If the taskbar button represents a group of windows and a previous overlay is still available (received earlier than the current
            overlay, but not yet freed by a NULL value), then that previous overlay is displayed in place of the current overlay.
            </term>
            </item>
            </list>
            </param>
            <param name="description">
            A string that provides an alt text version of the information conveyed by the overlay, for accessibility purposes.
            </param>
            <exception cref="T:System.ArgumentNullException">parent</exception>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetProgressState(System.Windows.Forms.IWin32Window,Vanara.Windows.Shell.TaskbarButtonProgressState)">
            <summary>Sets the type and state of the progress indicator displayed on a taskbar button.</summary>
            <param name="parent">
            The window in which the progress of an operation is being shown. This window's associated taskbar button will display the
            progress bar.
            </param>
            <param name="status">The current state of the progress button. Specify only one of the enum values.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetProgressState(Vanara.PInvoke.HWND,Vanara.Windows.Shell.TaskbarButtonProgressState)">
            <summary>Sets the type and state of the progress indicator displayed on a taskbar button.</summary>
            <param name="hwnd">
            The window in which the progress of an operation is being shown. This window's associated taskbar button will display the
            progress bar.
            </param>
            <param name="status">The current state of the progress button. Specify only one of the enum values.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetProgressValue(System.Windows.Forms.IWin32Window,System.UInt64,System.UInt64)">
            <summary>
            Displays or updates a progress bar hosted in a taskbar button to show the specific percentage completed of the full operation.
            </summary>
            <param name="parent">The window whose associated taskbar button is being used as a progress indicator.</param>
            <param name="completed">
            An application-defined value that indicates the proportion of the operation that has been completed at the time the method is called.
            </param>
            <param name="total">An application-defined value that specifies the value ullCompleted will have when the operation is complete.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetProgressValue(Vanara.PInvoke.HWND,System.UInt64,System.UInt64)">
            <summary>
            Displays or updates a progress bar hosted in a taskbar button to show the specific percentage completed of the full operation.
            </summary>
            <param name="hwnd">The window whose associated taskbar button is being used as a progress indicator.</param>
            <param name="completed">
            An application-defined value that indicates the proportion of the operation that has been completed at the time the method is called.
            </param>
            <param name="total">An application-defined value that specifies the value ullCompleted will have when the operation is complete.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetTabActive(System.Windows.Forms.IWin32Window,System.Windows.Forms.IWin32Window)">
            <summary>Informs the taskbar that a tab or document window has been made the active window.</summary>
            <param name="parent">
            The active tab window. This window must already be registered through RegisterTab. This value can be NULL if no tab is active.
            </param>
            <param name="childWindow">
            The application's main window. This value tells the taskbar which group the thumbnail is a member of. This value is required and
            cannot be NULL.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetTabActive(Vanara.PInvoke.HWND,Vanara.PInvoke.HWND)">
            <summary>Informs the taskbar that a tab or document window has been made the active window.</summary>
            <param name="hwndTab">
            The active tab window. This window must already be registered through RegisterTab. This value can be NULL if no tab is active.
            </param>
            <param name="hwndMDI">
            The application's main window. This value tells the taskbar which group the thumbnail is a member of. This value is required and
            cannot be NULL.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetTabOrder(System.Windows.Forms.IWin32Window,System.Windows.Forms.IWin32Window)">
            <summary>
            Inserts a new thumbnail into a tabbed-document interface (TDI) or multiple-document interface (MDI) application's group flyout
            or moves an existing thumbnail to a new position in the application's group.
            </summary>
            <param name="childWindow">
            The tab window whose thumbnail is being placed. This value is required, must already be registered through RegisterTab, and
            cannot be NULL.
            </param>
            <param name="insertBeforeChildWindow">
            The tab window whose thumbnail that hwndTab is inserted to the left of. This window must already be registered through
            RegisterTab. If this value is NULL, the new thumbnail is added to the end of the list.
            </param>
            <remarks>This method must be called for the thumbnail to be shown in the group. Call it after you have called RegisterTab.</remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetTabOrder(Vanara.PInvoke.HWND,Vanara.PInvoke.HWND)">
            <summary>
            Inserts a new thumbnail into a tabbed-document interface (TDI) or multiple-document interface (MDI) application's group flyout
            or moves an existing thumbnail to a new position in the application's group.
            </summary>
            <param name="hwndTab">
            The tab window whose thumbnail is being placed. This value is required, must already be registered through RegisterTab, and
            cannot be NULL.
            </param>
            <param name="hwndInsertBefore">
            The tab window whose thumbnail that hwndTab is inserted to the left of. This window must already be registered through
            RegisterTab. If this value is NULL, the new thumbnail is added to the end of the list.
            </param>
            <remarks>This method must be called for the thumbnail to be shown in the group. Call it after you have called RegisterTab.</remarks>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetTabProperties(System.Windows.Forms.IWin32Window,Vanara.PInvoke.Shell32.STPFLAG)">
            <summary>
            Allows a tab to specify whether the main application frame window or the tab window should be used as a thumbnail or in the peek
            feature under certain circumstances.
            </summary>
            <param name="childWindow">The tab window that is to have properties set. This windows must already be registered through RegisterTab.</param>
            <param name="properties">
            One or more members of the STPFLAG enumeration that specify the displayed thumbnail and peek image source of the tab thumbnail.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetTabProperties(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.STPFLAG)">
            <summary>
            Allows a tab to specify whether the main application frame window or the tab window should be used as a thumbnail or in the peek
            feature under certain circumstances.
            </summary>
            <param name="hwndTab">The tab window that is to have properties set. This windows must already be registered through RegisterTab.</param>
            <param name="properties">
            One or more members of the STPFLAG enumeration that specify the displayed thumbnail and peek image source of the tab thumbnail.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetThumbnailClip(System.Windows.Forms.IWin32Window,System.Nullable{System.Drawing.Rectangle})">
            <summary>Selects a portion of a window's client area to display as that window's thumbnail in the taskbar.</summary>
            <param name="parent">The window represented in the taskbar.</param>
            <param name="windowClipRect">
            A <see cref="T:System.Drawing.Rectangle"/> that specifies a selection within the window's client area, relative to the upper-left corner of that
            client area. To clear a clip that is already in place and return to the default display of the thumbnail, set this parameter to NULL.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetThumbnailClip(Vanara.PInvoke.HWND,System.Nullable{System.Drawing.Rectangle})">
            <summary>Selects a portion of a window's client area to display as that window's thumbnail in the taskbar.</summary>
            <param name="hwnd">The window represented in the taskbar.</param>
            <param name="windowClipRect">
            A <see cref="T:System.Drawing.Rectangle"/> that specifies a selection within the window's client area, relative to the upper-left corner of that
            client area. To clear a clip that is already in place and return to the default display of the thumbnail, set this parameter to NULL.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetThumbnailTooltip(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Specifies or updates the text of the tooltip that is displayed when the mouse pointer rests on an individual preview thumbnail
            in a taskbar button flyout.
            </summary>
            <param name="parent">The window whose thumbnail displays the tooltip. This window must belong to the calling process.</param>
            <param name="tip">
            The text to be displayed in the tooltip. This value can be NULL, in which case the title of the window is used as the tooltip.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.SetThumbnailTooltip(Vanara.PInvoke.HWND,System.String)">
            <summary>
            Specifies or updates the text of the tooltip that is displayed when the mouse pointer rests on an individual preview thumbnail
            in a taskbar button flyout.
            </summary>
            <param name="hwnd">The window whose thumbnail displays the tooltip. This window must belong to the calling process.</param>
            <param name="tip">
            The text to be displayed in the tooltip. This value can be NULL, in which case the title of the window is used as the tooltip.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.ThumbBarAddButtons(System.Windows.Forms.IWin32Window,Vanara.PInvoke.Shell32.THUMBBUTTON[])">
            <summary>
            Adds a thumbnail toolbar with a specified set of buttons to the thumbnail image of a window in a taskbar button flyout.
            </summary>
            <param name="parent">
            The window whose thumbnail representation will receive the toolbar. This window must belong to the calling process.
            </param>
            <param name="buttons">
            An array of THUMBBUTTON structures. Each THUMBBUTTON defines an individual button to be added to the toolbar. Buttons cannot be
            added or deleted later, so this must be the full defined set. Buttons also cannot be reordered, so their order in the array,
            which is the order in which they are displayed left to right, will be their permanent order.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.ThumbBarAddButtons(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.THUMBBUTTON[])">
            <summary>
            Adds a thumbnail toolbar with a specified set of buttons to the thumbnail image of a window in a taskbar button flyout.
            </summary>
            <param name="hwnd">
            The window whose thumbnail representation will receive the toolbar. This window must belong to the calling process.
            </param>
            <param name="buttons">
            An array of THUMBBUTTON structures. Each THUMBBUTTON defines an individual button to be added to the toolbar. Buttons cannot be
            added or deleted later, so this must be the full defined set. Buttons also cannot be reordered, so their order in the array,
            which is the order in which they are displayed left to right, will be their permanent order.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.ThumbBarSetImageList(System.Windows.Forms.IWin32Window,System.Windows.Forms.ImageList)">
            <summary>
            Specifies an image list that contains button images for a toolbar embedded in a thumbnail image of a window in a taskbar button flyout.
            </summary>
            <param name="parent">
            The window whose thumbnail representation contains the toolbar to be updated. This window must belong to the calling process.
            </param>
            <param name="imageList">The image list that contains all button images to be used in the toolbar.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.ThumbBarSetImageList(Vanara.PInvoke.HWND,System.Windows.Forms.ImageList)">
            <summary>
            Specifies an image list that contains button images for a toolbar embedded in a thumbnail image of a window in a taskbar button flyout.
            </summary>
            <param name="hwnd">
            The window whose thumbnail representation contains the toolbar to be updated. This window must belong to the calling process.
            </param>
            <param name="imageList">The image list that contains all button images to be used in the toolbar.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.ThumbBarUpdateButtons(System.Windows.Forms.IWin32Window,Vanara.PInvoke.Shell32.THUMBBUTTON[])">
            <summary>
            Shows, enables, disables, or hides buttons in a thumbnail toolbar as required by the window's current state. A thumbnail toolbar
            is a toolbar embedded in a thumbnail image of a window in a taskbar button flyout.
            </summary>
            <param name="parent">The window whose thumbnail representation contains the toolbar.</param>
            <param name="buttons">
            An array of THUMBBUTTON structures. Each THUMBBUTTON defines an individual button. If the button already exists (the iId value
            is already defined), then that existing button is updated with the information provided in the structure.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.ThumbBarUpdateButtons(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.THUMBBUTTON[])">
            <summary>
            Shows, enables, disables, or hides buttons in a thumbnail toolbar as required by the window's current state. A thumbnail toolbar
            is a toolbar embedded in a thumbnail image of a window in a taskbar button flyout.
            </summary>
            <param name="hwnd">The window whose thumbnail representation contains the toolbar.</param>
            <param name="buttons">
            An array of THUMBBUTTON structures. Each THUMBBUTTON defines an individual button. If the button already exists (the iId value
            is already defined), then that existing button is updated with the information provided in the structure.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.UnregisterTab(System.Windows.Forms.IWin32Window)">
            <summary>Removes a thumbnail from an application's preview group when that tab or document is closed in the application.</summary>
            <param name="childWindow">
            The tab window whose thumbnail is being removed. This is the same value with which the thumbnail was registered as part the
            group through RegisterTab. This value is required and cannot be NULL.
            </param>
        </member>
        <member name="M:Vanara.Windows.Shell.TaskbarList.UnregisterTab(Vanara.PInvoke.HWND)">
            <summary>Removes a thumbnail from an application's preview group when that tab or document is closed in the application.</summary>
            <param name="hwnd">
            The tab window whose thumbnail is being removed. This is the same value with which the thumbnail was registered as part the
            group through RegisterTab. This value is required and cannot be NULL.
            </param>
        </member>
        <member name="T:Vanara.Windows.Shell.ThumbnailToolbar">
            <summary>The toolbar associated with thumbnails shown when hovering over an application's taskbar button.</summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
        </member>
        <member name="M:Vanara.Windows.Shell.ThumbnailToolbar.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Shell.ThumbnailToolbar"/> class.</summary>
        </member>
        <member name="E:Vanara.Windows.Shell.ThumbnailToolbar.PropertyChanged">
            <summary>Occurs when a property has changed.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.ThumbnailToolbar.Buttons">
            <summary>Gets the buttons.</summary>
            <value>The buttons.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.ThumbnailToolbar.ImageList">
            <summary>Gets or sets the image list for use by the toolbar buttons.</summary>
            <value>The image list.</value>
        </member>
        <member name="T:Vanara.Windows.Shell.Visibility">
            <summary></summary>
        </member>
        <member name="F:Vanara.Windows.Shell.Visibility.Collapsed">
            <summary>The collapsed</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.Visibility.Hidden">
            <summary>The hidden</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.Visibility.Visible">
            <summary>The visible</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.ThumbnailToolbarButtonCollection">
            <summary>A collection of thumbnail toolbar buttons.</summary>
        </member>
        <member name="M:Vanara.Windows.Shell.ThumbnailToolbarButtonCollection.AddRange(System.Collections.Generic.IEnumerable{Vanara.Windows.Shell.ThumbnailToolbarButton})">
            <summary>Adds a sequence of <see cref="T:Vanara.Windows.Shell.ThumbnailToolbarButton"/> instances to the collection.</summary>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ThumbnailToolbarButtonCollection.InsertItem(System.Int32,Vanara.Windows.Shell.ThumbnailToolbarButton)">
            <summary>Inserts the item into the collection.</summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Vanara.Windows.Shell.ThumbnailToolbarButtonCollection.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Called when the collection has changed.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Vanara.Windows.Shell.WallpaperFit">
            <summary>Specifies how the desktop wallpaper should be displayed.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.WallpaperFit.Center">
            <summary>Center the image; do not stretch.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.WallpaperFit.Tile">
            <summary>Tile the image across all monitors.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.WallpaperFit.Stretch">
            <summary>Stretch the image to exactly fit on the monitor.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.WallpaperFit.Fit">
            <summary>
            Stretch the image to exactly the height or width of the monitor without changing its aspect ratio or cropping the image. This
            can result in colored letterbox bars on either side or on above and below of the image.
            </summary>
        </member>
        <member name="F:Vanara.Windows.Shell.WallpaperFit.Fill">
            <summary>Stretch the image to fill the screen, cropping the image as necessary to avoid letterbox bars.</summary>
        </member>
        <member name="F:Vanara.Windows.Shell.WallpaperFit.Span">
            <summary>Spans a single image across all monitors attached to the system.</summary>
        </member>
        <member name="T:Vanara.Windows.Shell.WallpaperManager">
            <summary>Provides methods for managing the desktop wallpaper.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.WallpaperManager.BackgroundColor">
            <summary>
            Sets the color that is visible on the desktop when no image is displayed or when the desktop background has been disabled. This
            color is also used as a border when the desktop wallpaper does not fill the entire screen.
            </summary>
            <value>A value that specifies the background RGB color value.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.WallpaperManager.Enabled">
            <summary>Enables or disables the desktop background.</summary>
            <value><see langword="true"/> to enable the desktop background, <see langword="false"/> to disable it.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.WallpaperManager.Monitors">
            <summary>The monitors that are associated with the system.</summary>
            <value>A list of system monitors.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.WallpaperManager.Slideshow">
            <summary>Gets an object that controls the wallpaper slideshow options.</summary>
            <value>The slideshow options object.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.WallpaperManager.WallpaperFit">
            <summary>
            Gets or sets the display option for the desktop wallpaper image, determining whether the image should be centered, tiled, or stretched.
            </summary>
            <value>An enumeration value that specify how the image will be displayed on the system's monitors.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.WallpaperManager.SetPicture(System.String,Vanara.Windows.Shell.WallpaperFit,System.Int32)">
            <summary>Sets the wallpaper to a single picture.</summary>
            <param name="imagePath">The full path to the image file. This file must exist and be a picture format (jpg, gif, etc.).</param>
            <param name="fit">The display option for the desktop wallpaper image.</param>
            <param name="monitorIndex">
            The index of the monitor on which to set the wallpaper. Any value less than 0 will cause the picture to be set for all monitors.
            </param>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:Vanara.Windows.Shell.WallpaperManager.SetSlideshow(System.String,Vanara.Windows.Shell.WallpaperFit,System.Nullable{System.TimeSpan},System.Nullable{System.Boolean})">
            <summary>Sets the wallpaper to display a slideshow of all images within the specified directory.</summary>
            <param name="folderPath">The full path to the folder that contains the images to use in the slideshow.</param>
            <param name="fit">The display option for the displayed image.</param>
            <param name="interval">
            If specified, the amount of time between image transitions. Specifying <see langword="null"/> will ignore setting this value and
            any previous setting will stay in place.
            </param>
            <param name="shuffle">
            If specified, determined if the items in <paramref name="folderPath"/> will be shuffled. Specifying <see langword="null"/> will
            ignore setting this value and any previous setting will stay in place.
            </param>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
        </member>
        <member name="M:Vanara.Windows.Shell.WallpaperManager.SetSolidBackground(System.Nullable{System.Drawing.Color})">
            <summary>Sets the background to a solid color with no displayed image.</summary>
            <param name="color">
            If specified, the color of the background. Specifying <see langword="null"/> will ignore setting this value and any previous
            setting will stay in place.
            </param>
        </member>
        <member name="T:Vanara.Windows.Shell.WallpaperManager.WallpaperMonitor">
            <summary>Represents the wallpaper settings on a single monitor.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.WallpaperManager.WallpaperMonitor.DisplayRectangle">
            <summary>Retrieves the display rectangle of the monitor.</summary>
            <value>The display rectangle.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.WallpaperManager.WallpaperMonitor.Id">
            <summary>Gets the identifier of the monitor.</summary>
            <value>The monitor identifier.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.WallpaperManager.WallpaperMonitor.ImagePath">
            <summary>
            The path to the wallpaper image file. Note that this image could be currently displayed on all of the system's monitors, not
            just this monitor.
            </summary>
            <value>The image path.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.WallpaperManager.WallpaperMonitor.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.Windows.Shell.WallpaperManager.WallpaperSlideshow">
            <summary>Represents the settings for a wallpaper slideshow.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.WallpaperManager.WallpaperSlideshow.Images">
            <summary>Gets or sets the images that are being displayed in the desktop wallpaper slideshow.</summary>
        </member>
        <member name="P:Vanara.Windows.Shell.WallpaperManager.WallpaperSlideshow.Interval">
            <summary>Gets or sets the amount of time between image transitions.</summary>
            <value>The interval between transitions.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.WallpaperManager.WallpaperSlideshow.IsEnabled">
            <summary>Gets a value indicating whether the slideshow is enabled.</summary>
            <value><see langword="true"/> if the slideshow is enabled; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Vanara.Windows.Shell.WallpaperManager.WallpaperSlideshow.Shuffle">
            <summary>Gets or sets a value indicating whether the images in the slideshow are shuffled.</summary>
            <value><see langword="true"/> if images are shuffled; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:Vanara.Windows.Shell.WallpaperManager.WallpaperSlideshow.Advance(System.Boolean,System.Int32)">
            <summary>Switches the wallpaper on a specified monitor to the next image in the slideshow.</summary>
            <param name="forward">
            If set to <see langword="true"/>, advances the slideshow forward. If <see langword="false"/>, advances backwards.
            </param>
            <param name="monitorIndex">
            The index of the monitor on which to set the wallpaper. Any value less than 0 will cause the picture to be set for all monitors.
            </param>
        </member>
        <member name="T:Vanara.Windows.ExtenderProviderBase`1">
            <summary>A generic base to implement <see cref="T:System.ComponentModel.IExtenderProvider"/> for a single extender type.</summary>
            <typeparam name="TExtend">The type of the type that can be extended.</typeparam>
        </member>
        <member name="F:Vanara.Windows.ExtenderProviderBase`1.propHash">
            <summary>A dictionary that holds a property bag for each extended type.</summary>
        </member>
        <member name="M:Vanara.Windows.ExtenderProviderBase`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.ExtenderProviderBase`1"/> class.</summary>
        </member>
        <member name="M:Vanara.Windows.ExtenderProviderBase`1.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.ExtenderProviderBase`1"/> class.</summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Vanara.Windows.ExtenderProviderBase`1.#ctor(System.ComponentModel.IContainer)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.ExtenderProviderBase`1"/> class.</summary>
            <param name="container">The container.</param>
            <exception cref="T:System.ArgumentNullException">container</exception>
        </member>
        <member name="E:Vanara.Windows.ExtenderProviderBase`1.AddingExtender">
            <summary>Occurs when a new extender is being added.</summary>
        </member>
        <member name="P:Vanara.Windows.ExtenderProviderBase`1.Site">
            <summary>Sets the site.</summary>
            <value>The site.</value>
        </member>
        <member name="P:Vanara.Windows.ExtenderProviderBase`1.ExtendedComponents">
            <summary>Gets all extended components that have properties assigned.</summary>
            <value>Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> value.</value>
        </member>
        <member name="P:Vanara.Windows.ExtenderProviderBase`1.KnownProperties">
            <summary>Gets the known properties stored against all components.</summary>
            <value>Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> value.</value>
        </member>
        <member name="M:Vanara.Windows.ExtenderProviderBase`1.BeginInit">
            <summary>Signals the object that initialization is starting.</summary>
        </member>
        <member name="M:Vanara.Windows.ExtenderProviderBase`1.CanExtend(System.Object)">
            <summary>Determines whether this instance can extend the specified extendee.</summary>
            <param name="extendee">The extendee.</param>
            <returns><see langword="true"/> if this instance can extend the specified extendee; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.Windows.ExtenderProviderBase`1.EndInit">
            <summary>Signals the object that initialization is complete.</summary>
        </member>
        <member name="M:Vanara.Windows.ExtenderProviderBase`1.GetPropertyValue``1(`0,``0,System.String)">
            <summary>Gets the property value.</summary>
            <typeparam name="T">The type of the property to get.</typeparam>
            <param name="form">The form.</param>
            <param name="defaultValue">The default value.</param>
            <param name="propName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.Windows.ExtenderProviderBase`1.OnAddingExtender(`0)">
            <summary>Calls the <see cref="E:Vanara.Windows.ExtenderProviderBase`1.AddingExtender"/> event.</summary>
            <param name="extender">The extender being added.</param>
        </member>
        <member name="M:Vanara.Windows.ExtenderProviderBase`1.SetPropertyValue``1(`0,``0,System.String)">
            <summary>Sets the property value.</summary>
            <typeparam name="T">The type of the property to set.</typeparam>
            <param name="form">The form.</param>
            <param name="value">The value.</param>
            <param name="propName">Name of the field.</param>
        </member>
        <member name="T:Vanara.Windows.ExtenderProviderBase`1.AddExtenderEventArgs">
            <summary>Arguments for the <see cref="E:Vanara.Windows.ExtenderProviderBase`1.AddingExtender"/> event.</summary>
        </member>
        <member name="P:Vanara.Windows.ExtenderProviderBase`1.AddExtenderEventArgs.Extender">
            <summary>Gets the extender being added.</summary>
            <value>The extender.</value>
        </member>
        <member name="P:Vanara.Windows.ExtenderProviderBase`1.AddExtenderEventArgs.ExtenderProperties">
            <summary>Gets or sets the property bag to be associated with this extender.</summary>
            <value>The extender property bag.</value>
        </member>
        <member name="T:Vanara.PInvoke.MessageLoop">
            <summary>
            <para>
            This class encapsulates the management of a message loop for an application. It supports queuing a callback to the application via
            the message loop to enable the app to return from a call and continue processing that call later. This behavior is needed when
            implementing a shell verb as verbs must not block the caller.
            </para>
            <note type="note">The ComObject derived class should call QueueNonBlockingCallback in its invoke function, for example
            IExecuteCommand::Execute() or IDropTarget::Drop() passing a method that will complete the initialization work.</note>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.MessageLoop.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.MessageLoop"/> class.</summary>
        </member>
        <member name="E:Vanara.PInvoke.MessageLoop.ProcessMessage">
            <summary>Occurs when a new message is available.</summary>
        </member>
        <member name="P:Vanara.PInvoke.MessageLoop.Running">
            <summary>Gets a value indicating whether this <see cref="T:Vanara.PInvoke.MessageLoop"/> is running.</summary>
            <value><see langword="true"/> if running; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:Vanara.PInvoke.MessageLoop.CancelTimeout">
            <summary>
            Cancel the timeout timer. This should be called when the application knows that it wants to keep running, for example when it
            receives the incoming call to invoke the verb.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.MessageLoop.QueueCallback(System.Action{System.Object},System.Object)">
            <summary>
            Queues a one-time callback function via the message loop. This method is not intended to be used simultaneously by multiple callers.
            </summary>
            <param name="callback">The callback delegate method.</param>
            <param name="tag">An optional argument that will be passed to the callback.</param>
            <exception cref="T:System.InvalidOperationException">Another callback is currently queued.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="callback"/> cannot be <see langword="null"/>.</exception>
        </member>
        <member name="M:Vanara.PInvoke.MessageLoop.Quit(System.Int32)">
            <summary>Quits the running message loop by calling <see cref="M:Vanara.PInvoke.User32.PostQuitMessage(System.Int32)"/>.</summary>
            <param name="exitCode">An optional exit code.</param>
        </member>
        <member name="M:Vanara.PInvoke.MessageLoop.Run(System.TimeSpan)">
            <summary>Runs the message loop.</summary>
            <param name="timeout">
            The time span after which the message loop will be terminated. If this value equals TimeSpan.Zero or is not specified, the
            message loop will run until the <see cref="M:Vanara.PInvoke.MessageLoop.Quit(System.Int32)"/> method is called or the message loop receives a quit message.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.MessageLoop.MessageEventArgs">
            <summary>Holds a copy of the MSG instance retrieved by GetMessage.</summary>
            <seealso cref="T:System.EventArgs"/>
        </member>
        <member name="P:Vanara.PInvoke.MessageLoop.MessageEventArgs.MSG">
            <summary>Gets or sets the MSG.</summary>
            <value>The MSG.</value>
        </member>
    </members>
</doc>
