<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vanara.PInvoke.NTDSApi</name>
    </assembly>
    <members>
        <member name="T:Vanara.PInvoke.NTDSApi">
            <summary>Platform invokable enumerated types, constants and functions from ntdsapi.h</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_MANGLE_FOR">
            <summary>
            <para>
            The <c>DS_MANGLE_FOR</c> enumeration is used to define whether a relative distinguished name is mangled (encoded) and in what
            form the mangling occurs.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_MANGLE_FOR.DS_MANGLE_UNKNOWN">
            <summary>Indicates that the relative distinguished name is not mangled or that the type of mangling is unknown.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_MANGLE_FOR.DS_MANGLE_OBJECT_RDN_FOR_DELETION">
            <summary>Indicates that the relative distinguished name has been mangled for deletion.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_MANGLE_FOR.DS_MANGLE_OBJECT_RDN_FOR_NAME_CONFLICT">
            <summary>Indicates that the relative distinguished name has been mangled due to a naming conflict.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsCrackSpn(System.String,System.UInt32@,System.Text.StringBuilder,System.UInt32@,System.Text.StringBuilder,System.UInt32@,System.Text.StringBuilder,System.UInt16@)">
            <summary>
            <para>The <c>DsCrackSpn</c> function parses a service principal name (SPN) into its component strings.</para>
            </summary>
            <param name="pszSpn">
            <para>
            Pointer to a constant null-terminated string that contains the SPN to parse. The SPN has the following format, in which the
            &lt;service class&gt; and &lt;instance name&gt; components must be present and the &lt;port number&gt; and &lt;service name&gt;
            components are optional. The &lt;port number&gt; component must be a numeric string value.
            </para>
            </param>
            <param name="pcServiceClass">
            <para>
            Pointer to a <c>DWORD</c> value that, on entry, contains the size, in <c>TCHARs</c>, of the ServiceClass buffer, including the
            terminating null character. On exit, this parameter contains the number of <c>TCHARs</c> in the ServiceClass string, including
            the terminating null character.
            </para>
            <para>If this parameter is <c>NULL</c>, contains zero, or ServiceClass is <c>NULL</c>, this parameter and ServiceClass are ignored.</para>
            <para>
            To obtain the number of characters required for the ServiceClass string, including the null terminator, call this function with a
            valid SPN, a non- <c>NULL</c> ServiceClass and this parameter set to 1.
            </para>
            </param>
            <param name="ServiceClass">
            <para>
            Pointer to a <c>TCHAR</c> buffer that receives a null-terminated string containing the &lt;service class&gt; component of the
            SPN. This buffer must be at least *pcServiceClass <c>TCHARs</c> in size. This parameter may be <c>NULL</c> if the service class
            is not required.
            </para>
            </param>
            <param name="pcServiceName">
            <para>
            Pointer to a <c>DWORD</c> value that, on entry, contains the size, in <c>TCHARs</c>, of the ServiceName buffer, including the
            terminating null character. On exit, this parameter contains the number of <c>TCHARs</c> in the ServiceName string, including the
            terminating null character.
            </para>
            <para>If this parameter is <c>NULL</c>, contains zero, or ServiceName is <c>NULL</c>, this parameter and ServiceName are ignored.</para>
            <para>
            To obtain the number of characters required for the ServiceName string, including the null terminator, call this function with a
            valid SPN, a non- <c>NULL</c> ServiceName and this parameter set to 1.
            </para>
            </param>
            <param name="ServiceName">
            <para>
            Pointer to a <c>TCHAR</c> buffer that receives a null-terminated string containing the &lt;service name&gt; component of the SPN.
            This buffer must be at least *pcServiceName <c>TCHARs</c> in size. If the &lt;service name&gt; component is not present in the
            SPN, this buffer receives the &lt;instance name&gt; component. This parameter may be <c>NULL</c> if the service name is not required.
            </para>
            </param>
            <param name="pcInstanceName">
            <para>
            Pointer to a <c>DWORD</c> value that, on entry, contains the size, in <c>TCHARs</c>, of the InstanceName buffer, including the
            terminating null character. On exit, this parameter contains the number of <c>TCHARs</c> in the InstanceName string, including
            the terminating null character.
            </para>
            <para>If this parameter is <c>NULL</c>, contains zero, or InstanceName is <c>NULL</c>, this parameter and InstanceName are ignored.</para>
            <para>
            To obtain the number of characters required for the InstanceName string, including the null terminator, call this function with a
            valid SPN, a non- <c>NULL</c> InstanceName and this parameter set to 1.
            </para>
            </param>
            <param name="InstanceName">
            <para>
            Pointer to a <c>TCHAR</c> buffer that receives a null-terminated string containing the &lt;instance name&gt; component of the
            SPN. This buffer must be at least *pcInstanceName <c>TCHARs</c> in size. This parameter may be <c>NULL</c> if the instance name
            is not required.
            </para>
            </param>
            <param name="pInstancePort">
            <para>
            Pointer to a <c>DWORD</c> value that receives the integer value of the &lt;port number&gt; component of the SPN. If the SPN does
            not contain a &lt;port number&gt; component, this parameter receives zero. This parameter may be <c>NULL</c> if the port number
            is not required.
            </para>
            </param>
            <returns>
            <para>Returns a Win32 error code, including the following.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsCrackUnquotedMangledRdn(System.String,System.UInt32,System.Guid@,Vanara.PInvoke.NTDSApi.DS_MANGLE_FOR@)">
            <summary>
            <para>
            The <c>DsCrackUnquotedMangledRdn</c> function unmangles (unencodes) a given relative distinguished name and returns both the
            decoded GUID and the mangling type used.
            </para>
            </summary>
            <param name="pszRDN">
            <para>
            Pointer to a string that contains the relative distinguished name (RDN) to translate. This string length is specified by the
            cchRDN parameter, so this string is not required to be null-terminated. This string must be in unquoted form. For more
            information about unquoted relative distinguished names, see DsUnquoteRdnValue.
            </para>
            </param>
            <param name="cchRDN">
            <para>Contains the length, in characters, of the pszRDN string.</para>
            </param>
            <param name="pGuid">
            <para>
            Pointer to <c>GUID</c> value that receives the GUID of the unmangled relative distinguished name. This parameter can be <c>NULL</c>.
            </para>
            </param>
            <param name="peDsMangleFor">
            <para>
            Pointer to a DS_MANGLE_FOR value that receives the type of mangling used in the mangled relative distinguished name. This
            parameter can be <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>
            This function returns <c>TRUE</c> if the relative distinguished name is mangled or <c>FALSE</c> otherwise. If this function
            returns <c>FALSE</c>, neither pGuid or peDsMangleFor receive any data.
            </para>
            </returns>
            <remarks>
            <para>
            This function attempts to decode (unmangle) an RDN that has been previously mangled due to a deletion or a naming conflict. If
            the relative distinguished name is mangled, the function returns <c>TRUE</c> and retrieves the GUID and mangle type, if
            requested. If the relative distinguished name is not mangled, the function returns <c>FALSE</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsGetRdnW(System.IntPtr@,System.UInt32@,System.IntPtr@,System.UInt32@,System.IntPtr@,System.UInt32@)">
            <summary>
            <para>
            The <c>DsGetRdnW</c> function retrieves the key and value of the first relative distinguished name and a pointer to the next
            relative distinguished name from a distinguished name string.
            </para>
            </summary>
            <param name="ppDN">
            <para>
            Address of a Unicode string pointer that, on entry, contains the distinguished name string to be parsed. The length of this
            string is specified in the pcDN parameter. If the function succeeds, this parameter is adjusted to point to the remainder of the
            distinguished name exclusive of current relative distinguished name. For example, if this parameter points to the string
            "dc=corp,dc=fabrikam,dc=com", after the function is complete this parameter points to the string ",dc=fabrikam,dc=com".
            </para>
            </param>
            <param name="pcDN">
            <para>
            Pointer to a <c>DWORD</c> value that, on entry, contains the number of characters in the ppDN string. If the function succeeds,
            this parameter receives the number of characters in the remainder of the distinguished name. These values do not include the
            null-terminated character.
            </para>
            </param>
            <param name="ppKey">
            <para>
            Pointer to a <c>LPCWCH</c> value that, if the function succeeds, receives a pointer to the key in the relative distinguished name
            string. This pointer is within the ppDN string and is not null-terminated. The pcKey parameter receives the number of characters
            in the key. This parameter is undefined if pcKey receives zero.
            </para>
            </param>
            <param name="pcKey">
            <para>
            Pointer to a <c>DWORD</c> value that, if the function succeeds, receives the number of characters in the key string represented
            by the ppKey parameter. If this parameter receives zero, ppKey is undefined.
            </para>
            </param>
            <param name="ppVal">
            <para>
            Pointer to a <c>LPCWCH</c> value that, if the function is successful, receives a pointer to the value in the relative
            distinguished name string. This pointer is within the ppDN string and is not null-terminated. The pcVal parameter receives the
            number of characters in the value. This parameter is undefined if pcVal receives zero.
            </para>
            </param>
            <param name="pcVal">
            <para>
            Pointer to a <c>DWORD</c> value that, if the function succeeds, receives the number of characters in the value string represented
            by the ppVal parameter. If this parameter receives zero, ppVal is undefined.
            </para>
            </param>
            <returns>
            <para>
            Returns <c>ERROR_SUCCESS</c> if successful or a Win32 error code otherwise. Possible error codes include the following values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsGetRdnW(System.String,System.String@,System.String@,System.String@)">
            <summary>
            The <c>DsGetRdnW</c> function retrieves the key and value of the first relative distinguished name and a pointer to the next
            relative distinguished name from a distinguished name string.
            </summary>
            <param name="fullDN">Address of a string that contains the distinguished name string to be parsed.</param>
            <param name="dn">A string that recieves the remainder of the distinguished name exclusive of current relative distinguished name.</param>
            <param name="key">A string that, if the function succeeds, receives the key in the relative distinguished name string.</param>
            <param name="val">A string that, if the function is successful, receives the value in the relative distinguished name string.</param>
            <returns>Returns <c>ERROR_SUCCESS</c> if successful or a Win32 error code otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsIsMangledDn(System.String,Vanara.PInvoke.NTDSApi.DS_MANGLE_FOR)">
            <summary>
            <para>
            The <c>DsIsMangledDn</c> function determines if the first relative distinguished name (RDN) in a distinguished name (DN) is a
            mangled name of a given type.
            </para>
            </summary>
            <param name="pszDn">
            <para>
            Pointer to a null-terminated string that contains the distinguished name to retrieve the relative distinguished name from. This
            can also be a quoted distinguished name as returned by other directory service functions.
            </para>
            </param>
            <param name="eDsMangleFor">
            <para>Contains one of the DS_MANGLE_FOR values that specifies the type of name mangling to look for.</para>
            </param>
            <returns>
            <para>
            Returns <c>TRUE</c> if the first relative distinguished name in pszDn is mangled in the manner specified by eDsMangleFor or
            <c>FALSE</c> otherwise.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsIsMangledRdnValue(System.String,System.UInt32,Vanara.PInvoke.NTDSApi.DS_MANGLE_FOR)">
            <summary>
            <para>
            The <c>DsIsMangledRdnValue</c> function determines if a given relative distinguished name value is a mangled name of the given type.
            </para>
            </summary>
            <param name="pszRdn">
            <para>
            Pointer to a null-terminated string that contains the relative distinguished name to determine if it is mangled. The cRdn
            parameter contains the number of characters in this string.
            </para>
            </param>
            <param name="cRdn">
            <para>Contains the number of characters in the pszRdn string.</para>
            </param>
            <param name="eDsMangleForDesired">
            <para>Contains one of the DS_MANGLE_FOR values that specifies the type of name mangling to search for.</para>
            </param>
            <returns>
            <para>
            Returns <c>TRUE</c> if the relative distinguished name is mangled and the mangle type is the same as specified. Returns
            <c>FALSE</c> if the relative distinguished name is not mangled or the mangle type is different than specified.
            </para>
            </returns>
            <remarks>
            <para>
            This function determines if the given relative distinguished name value is mangled and mangled in the given type. The pszRdn
            parameter should only contain the value of the relative distinguished name and not the key. The relative distinguished name value
            may be quoted or unquoted.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsMakeSpn(System.String,System.String,System.String,System.UInt16,System.String,System.UInt32@,System.Text.StringBuilder)">
            <summary>
            <para>The <c>DsMakeSpn</c> function constructs a service principal name (SPN) that identifies a service instance.</para>
            <para>
            A client application uses this function to compose an SPN, which it uses to authenticate the service instance. For example, the
            client can pass an SPN in the pszTargetName parameter of the InitializeSecurityContext function.
            </para>
            </summary>
            <param name="ServiceClass">
            <para>
            Pointer to a constant null-terminated string that specifies the class of the service. This parameter can be any string unique to
            that service; either the protocol name, for example, ldap, or the string form of a GUID are acceptable.
            </para>
            </param>
            <param name="ServiceName">
            <para>
            Pointer to a constant null-terminated string that specifies the DNS name, NetBIOS name, or distinguished name (DN). This
            parameter must be non- <c>NULL</c>.
            </para>
            <para>
            For more information about how the ServiceName, InstanceName and InstancePort parameters are used to compose an SPN, see the
            following Remarks section.
            </para>
            </param>
            <param name="InstanceName">
            <para>
            Pointer to a constant null-terminated string that specifies the DNS name or IP address of the host for an instance of the service.
            </para>
            <para>If ServiceName specifies the DNS or NetBIOS name of the service host computer, the InstanceName parameter must be <c>NULL</c>.</para>
            <para>
            If ServiceName specifies a DNS domain name, the name of a DNS SRV record, or a distinguished name, such as the DN of a service
            connection point, the InstanceName parameter must specify the DNS or NetBIOS name of the service host computer.
            </para>
            </param>
            <param name="InstancePort">
            <para>
            Port number for an instance of the service. Use 0 for the default port. If this parameter is zero, the SPN does not include a
            port number.
            </para>
            </param>
            <param name="Referrer">
            <para>
            Pointer to a constant null-terminated string that specifies the DNS name of the host that gave an IP address referral. This
            parameter is ignored unless the ServiceName parameter specifies an IP address.
            </para>
            </param>
            <param name="pcSpnLength">
            <para>
            Pointer to a variable that contains the length, in characters, of the buffer that will receive the new constructed SPN. This
            value may be 0 to request the final buffer size in advance.
            </para>
            <para>The pcSpnLength parameter also receives the actual length of the SPN created, including the terminating null character.</para>
            </param>
            <param name="pszSpn">
            <para>
            Pointer to a null-terminated string that receives the constructed SPN. This buffer should be the length specified by pcSpnLength.
            The pszSpn parameter may be <c>NULL</c> to request the final buffer size in advance.
            </para>
            </param>
            <returns>
            <para>
            If the function returns an SPN, the return value is <c>ERROR_SUCCESS</c>. If the function fails, the return value can be one of
            the following error codes.
            </para>
            </returns>
            <remarks>
            <para>
            The format of the SPN produced by the <c>DsMakeSpn</c> function depends on the input parameters. There are two basic formats.
            Both formats begin with the ServiceClass string followed by a host computer name and an optional InstancePort component.
            </para>
            <para><c>Note</c> This format is used by host-based services.</para>
            <para><c>To produce an SPN with the "&lt;ServiceClass&gt;/&lt;host&gt;" format</c></para>
            <list type="number">
            <item>
            <term>
            Set the ServiceName parameter to the DNS name of the host computer for the service instance. This is the host component of the SPN.
            </term>
            </item>
            <item>
            <term>Set the InstanceName and Referrer parameters to <c>NULL</c>.</term>
            </item>
            <item>
            <term>Set the InstancePort parameter to zero. If InstancePort is nonzero, the SPN has the following format:</term>
            </item>
            </list>
            <para><c>Note</c> This format is used by replicable services.</para>
            <para><c>To produce an SPN with the "&lt;ServiceClass&gt;/&lt;host&gt;:&lt;InstancePort&gt;" format</c></para>
            <list type="number">
            <item>
            <term>Set the InstanceName parameter to the DNS name of the host computer for the service instance. This is the host component.</term>
            </item>
            <item>
            <term>
            Set the ServiceName parameter to a string that identifies an instance of the service. For example, it could be the distinguished
            name of the service connection point for this service instance.
            </term>
            </item>
            <item>
            <term>Set the Referrer parameter to <c>NULL</c>.</term>
            </item>
            <item>
            <term>Set the InstancePort parameter to zero. If InstancePort is nonzero, the SPN has the following format:</term>
            </item>
            </list>
            <para>
            The Referrer parameter is used only if the ServiceName parameter specifies the IP address of the service's host computer. In this
            case, Referrer specifies the DNS name of the computer that gave the IP address as a referral. The SPN has the following format:
            </para>
            <para>
            where the host component is the InstanceName string or the ServiceName string if InstanceName is <c>NULL</c>, and the
            InstancePort component is optional.
            </para>
            <para>String parameters cannot include the forward slash (/) character, as it is used to separate the components of the SPN.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsQuoteRdnValue(System.UInt32,System.String,System.UInt32@,System.Text.StringBuilder)">
            <summary>
            <para>
            The <c>DsQuoteRdnValue</c> function converts an RDN into a quoted RDN value, if the RDN value contains characters that require
            quotes. The quoted RDN can then be submitted as part of a distinguished name (DN) to the directory service using various APIs
            such as LDAP. An example of an RDN that would require quotes would be one that has a comma-separated value, such as an RDN for a
            name that uses the format "last,first".
            </para>
            </summary>
            <param name="cUnquotedRdnValueLength">
            <para>The number of characters in the psUnquotedRdnValue string.</para>
            </param>
            <param name="psUnquotedRdnValue">
            <para>The string that specifies the unquoted RDN value.</para>
            </param>
            <param name="pcQuotedRdnValueLength">
            <para>The maximum number of characters in the psQuotedRdnValue string.</para>
            <para>The following flags are the output for this parameter.</para>
            <para>ERROR_SUCCESS</para>
            <para>Indicates that the correct number of characters were found in psQuotedRdnValue.</para>
            <para>ERROR_BUFFER_OVERFLOW</para>
            <para>Indicates that the number of characters in the string do not match psQuotedRdnValue.</para>
            </param>
            <param name="psQuotedRdnValue">
            <para>The string that receives the converted, and perhaps quoted, RDN value.</para>
            </param>
            <returns>
            <para>The following list contains the possible values returned for the <c>DsQuoteRdnValue</c> function.</para>
            </returns>
            <remarks>
            <para>
            Quotes are not added to the RDN if none are required. In this case, the output RDN value is the same as the input RDN value.
            </para>
            <para>
            When quoting is required, the RDN is quoted in accordance with the specification "Lightweight Directory Access Protocol (v3):
            UTF-8 String Representation of Distinguished Names," RFC 2253.
            </para>
            <para>The input and output RDN values are not <c>NULL</c>-terminated strings.</para>
            <para>To revert changes made by this call, call the DsUnquoteRdnValue function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsUnquoteRdnValue(System.UInt32,System.String,System.UInt32@,System.Text.StringBuilder)">
            <summary>
            <para>
            The <c>DsUnquoteRdnValue</c> function is a client call that converts a quoted RDN value back to an unquoted RDN value. Because
            the RDN was originally put into quotes because it contained characters that could be misinterpreted when it was embedded within a
            distinguished name (DN), the unquoted RDN value should not be submitted as part of a DN to the directory service using various
            APIs such as LDAP.
            </para>
            </summary>
            <param name="cQuotedRdnValueLength">
            <para>The number of characters in the psQuotedRdnValue string.</para>
            </param>
            <param name="psQuotedRdnValue">
            <para>The RDN value that may be quoted and escaped.</para>
            </param>
            <param name="pcUnquotedRdnValueLength">
            <para>The input value for this argument is the maximum length, in characters, of psQuotedRdnValue.</para>
            <para>The output value for this argument includes the following flags.</para>
            <para>ERROR_SUCCESS</para>
            <para>This is returned if the number of characters match the string used in psQuotedRdnValue.</para>
            <para>ERROR_BUFFER_OVERFLOW</para>
            <para>This is returned if the number of characters do not match the string used in psQuotedRdnValue.</para>
            </param>
            <param name="psUnquotedRdnValue">
            <para>The converted, unquoted RDN value.</para>
            </param>
            <returns>
            <para>The following list contains the possible values that are returned for the <c>DsUnquoteRdnValue</c> function.</para>
            </returns>
            <remarks>
            <para>When psQuotedRdnValue is quoted:</para>
            <list type="bullet">
            <item>
            <term>The leading and trailing quotes are removed.</term>
            </item>
            <item>
            <term>White space before the first quote is discarded.</term>
            </item>
            <item>
            <term>White space trailing the last quote is discarded.</term>
            </item>
            <item>
            <term>Escapes are removed and the character following the escape is kept.</term>
            </item>
            </list>
            <para>The following actions are taken when psQuotedRdnValue is unquoted:</para>
            <list type="bullet">
            <item>
            <term>The leading white space is discarded.</term>
            </item>
            <item>
            <term>The trailing white space is kept.</term>
            </item>
            <item>
            <term>Escaped non-special characters return an error.</term>
            </item>
            <item>
            <term>Unescaped special characters return an error.</term>
            </item>
            <item>
            <term>
            RDN values beginning with # (ignoring leading white space) are handled as a BER value that has previously been converted to a
            string, and converted accordingly.
            </term>
            </item>
            <item>
            <term>Escaped hex digits (\89) are converted into a binary byte (0x89).</term>
            </item>
            <item>
            <term>Escapes are removed from escaped special characters.</term>
            </item>
            </list>
            <para>The following actions are always taken:</para>
            <list type="bullet">
            <item>
            <term>Escaped special characters are unescaped.</term>
            </item>
            <item>
            <term>The input and output RDN values are not null-terminated values.</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.SyncUpdateProc">
            <summary>
            The <c>SyncUpdateProc</c> function is an application-defined function that handles update messages passed from the
            <c>DsReplicaSyncAll</c> function. <c>SyncUpdateProc</c> is a placeholder for the application-defined callback function name.
            </summary>
            <param name="pData">
            Pointer to application-defined data passed in the pCallbackData parameter of the <c>DsReplicaSyncAll</c> function.
            </param>
            <param name="pUpdate">
            Pointer to a <c>DS_REPSYNCALL_UPDATE</c> structure that describes the event in the <c>DsReplicaSyncAll</c> function that caused
            the <c>SyncUpdateProc</c> callback function to be called.
            </param>
            <returns>
            Execution of the <c>DsReplicaSyncAll</c> function pauses when it calls the <c>SyncUpdateProc</c> callback function. If
            <c>SyncUpdateProc</c> returns <c>TRUE</c>, execution of <c>DsReplicaSyncAll</c> resumes. Otherwise, the <c>DsReplicaSyncAll</c>
            function terminates.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_KCC_TASKID">
            <summary>Identifies the task that the KCC should execute.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_KCC_TASKID.DS_KCC_TASKID_UPDATE_TOPOLOGY">
            <summary>Update topology.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_NAME_ERROR">
            <summary>
            Defines the errors returned by the status member of the <see cref="T:Vanara.PInvoke.NTDSApi.DS_NAME_RESULT_ITEM"/> structure. These are potential errors
            that may be encountered while a name is converted by the <see cref="M:Vanara.PInvoke.NTDSApi.DsCrackNames(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String[],Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT,Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT,Vanara.PInvoke.NTDSApi.DS_NAME_FLAGS)"/> function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_ERROR.DS_NAME_NO_ERROR">
            <summary>The conversion was successful.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_ERROR.DS_NAME_ERROR_RESOLVING">
            <summary>A generic processing error occurred.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_ERROR.DS_NAME_ERROR_NOT_FOUND">
            <summary>The name cannot be found or the caller does not have permission to access the name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_ERROR.DS_NAME_ERROR_NOT_UNIQUE">
            <summary>
            The input name is mapped to more than one output name or the desired format did not have a single, unique value for the
            object found.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_ERROR.DS_NAME_ERROR_NO_MAPPING">
            <summary>
            The input name was found, but the associated output format cannot be found. This can occur if the object does not have all
            the required attributes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_ERROR.DS_NAME_ERROR_DOMAIN_ONLY">
            <summary>
            Unable to resolve entire name, but was able to determine in which domain object resides. The caller is expected to retry the
            call at a domain controller for the specified domain. The entire name cannot be resolved, but the domain that the object
            resides in could be determined. The pDomain member of the DS_NAME_RESULT_ITEM contains valid data when this error is specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_ERROR.DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING">
            <summary>A syntactical mapping cannot be performed on the client without transmitting over the network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_ERROR.DS_NAME_ERROR_TRUST_REFERRAL">
            <summary>The name is from an external trusted forest.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_NAME_FLAGS">
            <summary>
            Used to define how the name syntax will be cracked. These flags are used by the <see cref="M:Vanara.PInvoke.NTDSApi.DsCrackNames(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String[],Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT,Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT,Vanara.PInvoke.NTDSApi.DS_NAME_FLAGS)"/> function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FLAGS.DS_NAME_NO_FLAGS">
            <summary>Indicates that there are no associated flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FLAGS.DS_NAME_FLAG_SYNTACTICAL_ONLY">
            <summary>
            Performs a syntactical mapping at the client without transferring over the network. The only syntactic mapping supported is
            from DS_FQDN_1779_NAME to DS_CANONICAL_NAME or DS_CANONICAL_NAME_EX. <see cref="M:Vanara.PInvoke.NTDSApi.DsCrackNames(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String[],Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT,Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT,Vanara.PInvoke.NTDSApi.DS_NAME_FLAGS)"/> returns the DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING flag if a syntactical
            mapping is not possible.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FLAGS.DS_NAME_FLAG_EVAL_AT_DC">
            <summary>Forces a trip to the domain controller for evaluation, even if the syntax could be cracked locally.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FLAGS.DS_NAME_FLAG_GCVERIFY">
            <summary>The call fails if the domain controller is not a global catalog server.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FLAGS.DS_NAME_FLAG_TRUST_REFERRAL">
            <summary>Enables cross forest trust referral.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT">
            <summary>
            Provides formats to use for input and output names for the <see cref="M:Vanara.PInvoke.NTDSApi.DsCrackNames(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String[],Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT,Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT,Vanara.PInvoke.NTDSApi.DS_NAME_FLAGS)"/> function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT.DS_UNKNOWN_NAME">
            <summary>
            Indicates the name is using an unknown name type. This format can impact performance because it forces the server to attempt
            to match all possible formats. Only use this value if the input format is unknown.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT.DS_FQDN_1779_NAME">
            <summary>
            Indicates that the fully qualified distinguished name is used. For example: CN = someone, OU = Users, DC = Engineering, DC =
            Fabrikam, DC = Com
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT.DS_NT4_ACCOUNT_NAME">
            <summary>
            Indicates a Windows NT 4.0 account name. For example: Engineering\someone The domain-only version includes two trailing
            backslashes (\\).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT.DS_DISPLAY_NAME">
            <summary>
            Indicates a user-friendly display name, for example, Jeff Smith. The display name is not necessarily the same as relative
            distinguished name (RDN).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT.DS_UNIQUE_ID_NAME">
            <summary>Indicates a GUID string that the IIDFromString function returns. For example: {4fa050f0-f561-11cf-bdd9-00aa003a77b6}</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT.DS_CANONICAL_NAME">
            <summary>
            Indicates a complete canonical name. For example: engineering.fabrikam.com/software/someone The domain-only version includes
            a trailing forward slash (/).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT.DS_USER_PRINCIPAL_NAME">
            <summary>Indicates that it is using the user principal name (UPN). For example: someone@engineering.fabrikam.com</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT.DS_CANONICAL_NAME_EX">
            <summary>
            This element is the same as DS_CANONICAL_NAME except that the rightmost forward slash (/) is replaced with a newline
            character (\n), even in a domain-only case. For example: engineering.fabrikam.com/software\nsomeone
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT.DS_SERVICE_PRINCIPAL_NAME">
            <summary>Indicates it is using a generalized service principal name. For example: www/www.fabrikam.com@fabrikam.com</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT.DS_SID_OR_SID_HISTORY_NAME">
            <summary>
            Indicates a Security Identifier (SID) for the object. This can be either the current SID or a SID from the object SID
            history. The SID string can use either the standard string representation of a SID, or one of the string constants defined in
            Sddl.h. For more information about converting a binary SID into a SID string, see SID Strings. The following is an example of
            a SID string: S-1-5-21-397955417-626881126-188441444-501
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT.DS_DNS_DOMAIN_NAME">
            <summary>Not supported by the Directory Service (DS) APIs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT.DS_LIST_NCS">
            <summary>
            This causes DsCrackNames to return the distinguished names of all naming contexts in the current forest. The formatDesired
            parameter is ignored. cNames must be at least one and all strings in rpNames must have a length greater than zero characters.
            The contents of the rpNames strings is ignored.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE">
            <summary>
            <para>
            The <c>DS_REPL_INFO_TYPE</c> enumeration is used with the DsReplicaGetInfo and DsReplicaGetInfo2 functions to specify the type of
            replication data to retrieve.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE.DS_REPL_INFO_NEIGHBORS">
            <summary>
            Requests replication state data for naming context and source server pairs. Returns a pointer to a DS_REPL_NEIGHBORS structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE.DS_REPL_INFO_CURSORS_FOR_NC">
            <summary>
            Requests replication state data with respect to all replicas of a given naming context. Returns a pointer to a
            DS_REPL_CURSORS structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE.DS_REPL_INFO_METADATA_FOR_OBJ">
            <summary>
            Requests replication state data for the attributes for the given object. Returns a pointer to a DS_REPL_OBJ_META_DATA structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE.DS_REPL_INFO_KCC_DSA_CONNECT_FAILURES">
            <summary>
            Requests replication state data with respect to connection failures between inbound replication partners. Returns a pointer
            to a DS_REPL_KCC_DSA_FAILURES structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE.DS_REPL_INFO_KCC_DSA_LINK_FAILURES">
            <summary>
            Requests replication state data with respect to link failures between inbound replication partners. Returns a pointer to a
            DS_REPL_KCC_DSA_FAILURES structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE.DS_REPL_INFO_PENDING_OPS">
            <summary>
            Requests the replication tasks currently executing or queued to execute. Returns a pointer to a DS_REPL_PENDING_OPS structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE.DS_REPL_INFO_METADATA_FOR_ATTR_VALUE">
            <summary>
            Requests replication state data for a specific attribute for the given object. Returns a pointer to a
            DS_REPL_ATTR_VALUE_META_DATA structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE.DS_REPL_INFO_CURSORS_2_FOR_NC">
            <summary>
            Requests replication state data with respect to all replicas of a given naming context. Returns a pointer to a
            DS_REPL_CURSORS_2 structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE.DS_REPL_INFO_CURSORS_3_FOR_NC">
            <summary>
            Requests replication state data with respect to all replicas of a given naming context. Returns a pointer to a
            DS_REPL_CURSORS_3 structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE.DS_REPL_INFO_METADATA_2_FOR_OBJ">
            <summary>
            Requests replication state data for the attributes for the given object. Returns a pointer to a DS_REPL_OBJ_META_DATA_2 structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE.DS_REPL_INFO_METADATA_2_FOR_ATTR_VALUE">
            <summary>
            Requests replication state data for a specific attribute for the given object. Returns a pointer to a
            DS_REPL_ATTR_VALUE_META_DATA_2 structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE.DS_REPL_INFO_METADATA_EXT_FOR_ATTR_VALUE">
            <summary>
            Requests replication state data for a specific attribute for the given object. Returns a pointer to a
            DS_REPL_ATTR_VALUE_META_DATA_EXT structure.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_OP_TYPE">
            <summary>
            <para>
            The <c>DS_REPL_OP_TYPE</c> enumeration type is used to indicate the type of replication operation that a given entry in the
            replication queue represents.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OP_TYPE.DS_REPL_OP_TYPE_SYNC">
            <summary>Indicates an inbound replication over an existing replication agreement from a direct replication partner.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OP_TYPE.DS_REPL_OP_TYPE_ADD">
            <summary>Indicates the addition of a replication agreement for a new direct replication partner.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OP_TYPE.DS_REPL_OP_TYPE_DELETE">
            <summary>Indicates the removal of a replication agreement for an existing direct replication partner.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OP_TYPE.DS_REPL_OP_TYPE_MODIFY">
            <summary>Indicates the modification of a replication agreement for an existing direct replication partner.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OP_TYPE.DS_REPL_OP_TYPE_UPDATE_REFS">
            <summary>Indicates the addition, deletion, or update of outbound change notification data for a direct replication partner.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_ERROR">
            <summary>
            <para>
            The <c>DS_REPSYNCALL_ERROR</c> enumeration is used with the DS_REPSYNCALL_ERRINFO structure to indicate where in the replication
            process an error occurred.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_ERROR.DS_REPSYNCALL_WIN32_ERROR_CONTACTING_SERVER">
            <summary>The server referred to by the pszSvrId member of the DS_REPSYNCALL_ERRINFO structure cannot be contacted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_ERROR.DS_REPSYNCALL_WIN32_ERROR_REPLICATING">
            <summary>
            An error occurred during replication of the server identified by the pszSvrId member of the DS_REPSYNCALL_ERRINFO structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_ERROR.DS_REPSYNCALL_SERVER_UNREACHABLE">
            <summary>The server identified by the pszSvrId member of the DS_REPSYNCALL_ERRINFO structure cannot be contacted.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_EVENT">
            <summary>
            <para>
            The <c>DS_REPSYNCALL_EVENT</c> enumeration is used with the DS_REPSYNCALL_UPDATE structure to define which event the
            <c>DS_REPSYNCALL_UPDATE</c> structure represents.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_EVENT.DS_REPSYNCALL_EVENT_ERROR">
            <summary>An error occurred. Error data is stored in the pErrInfo member of the DS_REPSYNCALL_UPDATE structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_EVENT.DS_REPSYNCALL_EVENT_SYNC_STARTED">
            <summary>
            Synchronization of two servers has started. Both the pErrInfo and pSync members of the DS_REPSYNCALL_UPDATE structure are NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_EVENT.DS_REPSYNCALL_EVENT_SYNC_COMPLETED">
            <summary>
            Synchronization of two servers has just finished. The servers involved in the synchronization are identified by the pSync
            member of the DS_REPSYNCALL_UPDATE structure. The pErrInfo member of the DS_REPSYNCALL_UPDATE structure is NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_EVENT.DS_REPSYNCALL_EVENT_FINISHED">
            <summary>
            Execution of DsReplicaSyncAll is complete. Both the pErrInfo and pSync members of the DS_REPSYNCALL_UPDATE structure are
            NULL. The return value of the callback function is ignored.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_SPN_NAME_TYPE">
            <summary>
            <para>The <c>DS_SPN_NAME_TYPE</c> enumeration is used by the DsGetSPN function to identify the format for composing SPNs.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_SPN_NAME_TYPE.DS_SPN_DNS_HOST">
            <summary>The SPN format for the distinguished name service of the host-based service, which provides services identified with its host computer. This SPN uses the following format:
            <para><code>jeffsmith.fabrikam.com</code></para></summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_SPN_NAME_TYPE.DS_SPN_DN_HOST">
            <summary>The SPN format for the distinguished name of the host-based service, which provides services identified with its host computer. This SPN uses the following format:
            <para><code>cn=jeffsmith,ou=computers,dc=fabrikam,dc=com</code></para></summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_SPN_NAME_TYPE.DS_SPN_NB_HOST">
            <summary>The SPN format for the NetBIOS service of the host-based service, which provides services identified with its host computer. This SPN uses the following format:
            <para><code>jeffsmith-nec</code></para></summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_SPN_NAME_TYPE.DS_SPN_DOMAIN">
            <summary>The SPN format for a replicable service that provides services to the specified domain. This SPN uses the following format:
            <para><code>fabrikam.com</code></para></summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_SPN_NAME_TYPE.DS_SPN_NB_DOMAIN">
            <summary>The SPN format for a replicable service that provides services to the specified NetBIOS domain. This SPN uses the following format:
            <para><code>fabrikam</code></para></summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_SPN_NAME_TYPE.DS_SPN_SERVICE">
            <summary>The SPN format for a specified service. This SPN uses the following formats, depending on which service is used:
            <para><code>cn=anRpcService,cn=RPC Services,cn=system,dc=fabrikam,dc=com</code></para>
            <para><code>cn=aWsService,cn=Winsock Services,cn=system,dc=fabrikam,dc=com</code></para></summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_SPN_WRITE_OP">
            <summary>
            <para>
            The <c>DS_SPN_WRITE_OP</c> enumeration identifies the type of write operation that should be performed by the DsWriteAccountSpn function.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_SPN_WRITE_OP.DS_SPN_ADD_SPN_OP">
            <summary>Adds the specified service principal names (SPNs) to the object identified by the pszAccount parameter in DsWriteAccountSpn.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_SPN_WRITE_OP.DS_SPN_REPLACE_SPN_OP">
            <summary>
            Removes all SPNs currently registered on the account identified by the pszAccount parameter in DsWriteAccountSpn and replaces
            them with the SPNs specified by the rpszSpn parameter in DsWriteAccountSpn.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_SPN_WRITE_OP.DS_SPN_DELETE_SPN_OP">
            <summary>Deletes the specified SPNs from the object identified by the pszAccount parameter in DsWriteAccountSpn.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DsBindFlags">
            <summary>Flags for DsBindWithSpnEx and DsBindByInstance</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsBindFlags.NTDSAPI_BIND_ALLOW_DELEGATION">
            <summary>
            <para>
            Causes the bind to use the delegate impersonation level. This enables operations that require delegation, such as
            DsAddSidHistory, to succeed. Specifying this flag also causes DsBindWithSpnEx to operate similar to DsBindWithSpn.
            </para>
            <para>
            If this flag is not specified, the bind will use the impersonate impersonation level. For more information about
            impersonation levels, see Impersonation Levels.
            </para>
            <para>
            Most operations do not require the delegate impersonation level; this flag should only be specified if it is required.
            Binding to a rogue server with the delegate impersonation level enables the rogue server to connect to a non-rogue server
            with your credentials and perform unintended operations.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsBindFlags.NTDSAPI_BIND_FIND_BINDING">
            <summary>
            With AD/AM, a single machine, could have multiple "AD's" on a single server. Since DsBindXxxx() will not pick an AD/AM
            instance without an instance specifier ( ":389" ), it can be difficult (well impossible) to determine from just a server
            name, what the instance annotation or instance guid is. This option will take a server name and find the first available AD
            or AD/AM instance. WARNING: The results could be non- deterministic on a server w/ multiple instances.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsBindFlags.NTDSAPI_BIND_FORCE_KERBEROS">
            <summary>
            Active Directory Lightweight Directory Services: If this flag is specified, DsBindWithSpnEx requires Kerberos authentication
            to be used. If Kerberos authentication cannot be established, DsBindWithSpnEx will not attempt to authenticate with any other mechanism.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DsKCCFlags">
            <summary>Contains a set of flags that modify the function behavior.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsKCCFlags.DS_KCC_FLAG_ASYNC_OP">
            <summary>The task is queued and then the function returns without waiting for the task to complete.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsKCCFlags.DS_KCC_FLAG_DAMPED">
            <summary>The task will not be added to the queue if another queued task will run soon.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DsReplicaAddOptions">
            <summary>Passes additional data to be used to process the request.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaAddOptions.DS_REPADD_ASYNCHRONOUS_OPERATION">
            <summary>Performs this operation asynchronously.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaAddOptions.DS_REPADD_WRITEABLE">
            <summary>Creates a writable replica; otherwise, the replica is read-only.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaAddOptions.DS_REPADD_INITIAL">
            <summary>Synchronizes the NC from this source when the DSA is started.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaAddOptions.DS_REPADD_PERIODIC">
            <summary>Synchronizes the NC from this source periodically, as defined in pSchedule.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaAddOptions.DS_REPADD_INTERSITE_MESSAGING">
            <summary>
            Synchronizes from the source DSA using the Intersite Messaging Service (IMS) transport, for example, by SMTP, rather than
            using the native directory service RPC.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaAddOptions.DS_REPADD_ASYNCHRONOUS_REPLICA">
            <summary>Does not replicate the NC. Instead, save enough state data such that it may be replicated later.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaAddOptions.DS_REPADD_DISABLE_NOTIFICATION">
            <summary>
            Disables notification-based synchronization for the NC from this source. This is expected to be a temporary state. Use
            DS_REPADD_NEVER_NOTIFY to permanently disable synchronization.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaAddOptions.DS_REPADD_DISABLE_PERIODIC">
            <summary>Disables periodic synchronization for the NC from this source.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaAddOptions.DS_REPADD_USE_COMPRESSION">
            <summary>
            Uses compression when replicating. This saves network bandwidth at the expense of CPU overhead at both the source and
            destination servers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaAddOptions.DS_REPADD_NEVER_NOTIFY">
            <summary>
            <para>
            Disables change notifications from this source. When this flag is set, the source does not notify the destination when
            changes occur. This is recommended for all intersite replication that may occur over WAN links.
            </para>
            <para>This is expected to be a permanent state; use <c>DS_REPADD_DISABLE_NOTIFICATION</c> to temporarily disable notifications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaAddOptions.DS_REPADD_TWO_WAY">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaAddOptions.DS_REPADD_CRITICAL">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaAddOptions.DS_REPADD_SELECT_SECRETS">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaAddOptions.DS_REPADD_NONGC_RO_REPLICA">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DsReplicaDelOptions">
            <summary>Passes additional data used to process the request.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaDelOptions.DS_REPDEL_ASYNCHRONOUS_OPERATION">
            <summary>Performs this operation asynchronously.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaDelOptions.DS_REPDEL_WRITEABLE">
            <summary>Signifies that the replica deleted can be written to.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaDelOptions.DS_REPDEL_INTERSITE_MESSAGING">
            <summary>Signifies the replica is mail-based rather than synchronized using native directory service RPC.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaDelOptions.DS_REPDEL_IGNORE_ERRORS">
            <summary>
            Ignores any error generated from contacting the source to instruct it to remove this NC from its list of servers to which it replicates.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaDelOptions.DS_REPDEL_LOCAL_ONLY">
            <summary>
            Does not contact the source to tell it to remove this NC from its list of servers to which it replicates. If this flag is not
            set and the link is based in RPC, the source is contacted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaDelOptions.DS_REPDEL_NO_SOURCE">
            <summary>Deletes all the objects in the NC. This option is valid only for read-only NCs with no source.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplicaDelOptions.DS_REPDEL_REF_OK">
            <summary>Allows deletion of a read-only replica even if it sources other read-only replicas.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DsReplInfoFlags">
            <summary>Contains a set of flags that modify the behavior of the function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplInfoFlags.DS_REPL_INFO_FLAG_NONE">
            <summary>No flags are set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplInfoFlags.DS_REPL_INFO_FLAG_IMPROVE_LINKED_ATTRS">
            <summary>
            Causes the attribute metadata to account for metadata on the attribute's linked values. The resulting vector represents
            changes for all attributes. This modified vector is useful for clients that expect all attributes and metadata to be included
            in the attribute metadata vector.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DsReplModFieldFlags">
            <summary>Specifies what fields should be modified. At least one field must be specified in ModifyFields.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplModFieldFlags.DS_REPMOD_UPDATE_FLAGS">
            <summary>Updates the flags associated with the replica.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplModFieldFlags.DS_REPMOD_UPDATE_INSTANCE">
            <summary>Updates the address associated with the referenced server.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplModFieldFlags.DS_REPMOD_UPDATE_ADDRESS">
            <summary>Updates the address associated with the referenced server.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplModFieldFlags.DS_REPMOD_UPDATE_SCHEDULE">
            <summary>Updates the periodic replication schedule associated with the replica.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplModFieldFlags.DS_REPMOD_UPDATE_RESULT">
            <summary>Not used. Specifying updates of result values is not currently supported. Result values default to 0.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplModFieldFlags.DS_REPMOD_UPDATE_TRANSPORT">
            <summary>Updates the transport associated with the replica.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DsReplModOptions">
            <summary>Passes additional data used to process the request.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplModOptions.DS_REPMOD_ASYNCHRONOUS_OPERATION">
            <summary>Performs this operation asynchronously.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplModOptions.DS_REPMOD_WRITEABLE">
            <summary>Indicates that the replica being modified can be written to.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DsReplNeighborFlags">
            <summary>Contains a set of flags that specify attributes and options for the replication data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplNeighborFlags.DS_REPL_NBR_WRITEABLE">
            <summary>
            <para>The local copy of the naming context is writable.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplNeighborFlags.DS_REPL_NBR_SYNC_ON_STARTUP">
            <summary>
            <para>
            Replication of this naming context from this source is attempted when the destination server is booted. This normally only
            applies to intra-site neighbors.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplNeighborFlags.DS_REPL_NBR_DO_SCHEDULED_SYNCS">
            <summary>
            <para>
            Perform replication on a schedule. This flag is normally set unless the schedule for this naming context/source is "never",
            that is, the empty schedule.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplNeighborFlags.DS_REPL_NBR_USE_ASYNC_INTERSITE_TRANSPORT">
            <summary>
            <para>
            Perform replication indirectly through the Inter-Site Messaging Service. This flag is set only when replicating over SMTP.
            This flag is not set when replicating over inter-site RPC/IP.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplNeighborFlags.DS_REPL_NBR_TWO_WAY_SYNC">
            <summary>
            <para>
            If set, indicates that when inbound replication is complete, the destination server must tell the source server to
            synchronize in the reverse direction. This feature is used in dial-up scenarios where only one of the two servers can
            initiate a dial-up connection. For example, this option would be used in a corporate headquarters and branch office, where
            the branch office connects to the corporate headquarters over the Internet by means of a dial-up ISP connection.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplNeighborFlags.DS_REPL_NBR_RETURN_OBJECT_PARENTS">
            <summary>
            <para>
            This neighbor is in a state where it returns parent objects before children objects. It goes into this state after it
            receives a child object before its parent.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplNeighborFlags.DS_REPL_NBR_FULL_SYNC_IN_PROGRESS">
            <summary>
            <para>
            The destination server is performing a full synchronization from the source server. Full synchronizations do not use vectors
            that create updates (DS_REPL_CURSORS) for filtering updates. Full synchronizations are not used as a part of the normal
            replication protocol.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplNeighborFlags.DS_REPL_NBR_FULL_SYNC_NEXT_PACKET">
            <summary>
            <para>
            The last packet from the source indicated a modification of an object that the destination server has not yet created. The
            next packet to be requested instructs the source server to put all attributes of the modified object into the packet.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplNeighborFlags.DS_REPL_NBR_NEVER_SYNCED">
            <summary>
            <para>A synchronization has never been successfully completed from this source.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplNeighborFlags.DS_REPL_NBR_PREEMPTED">
            <summary>
            <para>
            The replication engine has temporarily stopped processing this neighbor in order to service another higher-priority neighbor,
            either for this partition or for another partition. The replication engine will resume processing this neighbor after the
            higher-priority work is completed.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplNeighborFlags.DS_REPL_NBR_IGNORE_CHANGE_NOTIFICATIONS">
            <summary>
            <para>
            This neighbor is set to disable notification-based synchronizations. Within a site, domain controllers synchronize with each
            other based on notifications when changes occur. This setting prevents this neighbor from performing syncs that are triggered
            by notifications. The neighbor will still do synchronizations based on its schedule, or in response to manually requested synchronizations.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplNeighborFlags.DS_REPL_NBR_DISABLE_SCHEDULED_SYNC">
            <summary>
            <para>
            This neighbor is set to not perform synchronizations based on its schedule. The only way this neighbor will perform
            synchronizations is in response to change notifications or to manually requested synchronizations.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplNeighborFlags.DS_REPL_NBR_COMPRESS_CHANGES">
            <summary>
            <para>
            Changes received from this source are to be compressed. This is normally set if, and only if, the source server is in a
            different site.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplNeighborFlags.DS_REPL_NBR_NO_CHANGE_NOTIFICATIONS">
            <summary>
            <para>
            No change notifications should be received from this source. Normally set if, and only if, the source server is in a
            different site.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplNeighborFlags.DS_REPL_NBR_PARTIAL_ATTRIBUTE_SET">
            <summary>
            <para>
            This neighbor is in a state where it is rebuilding the contents of this replica because of a change in the partial attribute set.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DsReplSyncAllFlags">
            <summary>Passes additional data used to process the request.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncAllFlags.DS_REPSYNCALL_NO_OPTIONS">
            <summary>This option has no effect.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncAllFlags.DS_REPSYNCALL_ABORT_IF_SERVER_UNAVAILABLE">
            <summary>
            Generates a fatal error if any server cannot be contacted or if any server is unreachable due to a disconnected or broken topology.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncAllFlags.DS_REPSYNCALL_SYNC_ADJACENT_SERVERS_ONLY">
            <summary>Disables transitive replication. Synchronization is performed only with adjacent servers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncAllFlags.DS_REPSYNCALL_ID_SERVERS_BY_DN">
            <summary>In the event of a non-fatal error, returns server distinguished names (DN) instead of their GUID DNS names.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncAllFlags.DS_REPSYNCALL_DO_NOT_SYNC">
            <summary>
            Disables all synchronization. The topology is still analyzed, and unavailable or unreachable servers are still identified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncAllFlags.DS_REPSYNCALL_SKIP_INITIAL_CHECK">
            <summary>
            Assumes that all servers are responding. This speeds operation of the DsReplicaSyncAll function, but if some servers are not
            responding, some transitive replications may be blocked.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncAllFlags.DS_REPSYNCALL_PUSH_CHANGES_OUTWARD">
            <summary>
            Pushes changes from the home server out to all partners using transitive replication. This reverses the direction of
            replication, and the order of execution of the replication sets from the usual "pulling" mode of execution.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncAllFlags.DS_REPSYNCALL_CROSS_SITE_BOUNDARIES">
            <summary>
            Synchronizes across site boundaries. By default, DsReplicaSyncAll attempts to synchronize only with DCs in the same site as
            the home system. Set this flag to attempt to synchronize with all DCs in the enterprise forest. However, the DCs can be
            synchronized only if connected by a synchronous (RPC) transport.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DsReplSyncOptions">
            <summary>These flag values are used both as input to DsReplicaSync and as output from DsReplicaGetInfo, PENDING_OPS, DS_REPL_OPW.ulOptions</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_ASYNCHRONOUS_OPERATION">
            <summary>
            Performs this operation asynchronously.
            <para>
            Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista and Windows Server 2003: Required when using DS_REPSYNC_ALL_SOURCES.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_WRITEABLE">
            <summary>Replica is writable. Otherwise, it is read-only.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_PERIODIC">
            <summary>Indicates this operation is a periodic synchronization request as scheduled by the administrator.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_INTERSITE_MESSAGING">
            <summary>Synchronizes using an ISM.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_FULL">
            <summary>Synchronizes starting from the first Update Sequence Number (USN).</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_URGENT">
            <summary>Indicates this operation is a notification of an update marked urgent.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_NO_DISCARD">
            <summary>Does not discard this synchronization request, even if a similar synchronization is pending.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_FORCE">
            <summary>Synchronizes even if the link is currently disabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_ADD_REFERENCE">
            <summary>
            Causes the source directory system agent (DSA) to verify that the local DSA is present in the source replicates-to list. If
            not, the local DSA is added. This ensures that the source sends change notifications.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_NEVER_COMPLETED">
            <summary>A sync from this source has never completed (e.g., a new source).</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_TWO_WAY">
            <summary>When this sync is complete, requests a sync in the opposite direction.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_NEVER_NOTIFY">
            <summary>Do not request change notifications from this source.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_INITIAL">
            <summary>Sync the NC from this source when the DSA is started.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_USE_COMPRESSION">
            <summary>
            Use compression when replicating. Saves message size (e.g., network bandwidth) at the expense of extra CPU overhead at both
            the source and destination servers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_ABANDONED">
            <summary>Sync was abandoned for lack of updates (W2K, W2K3)</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_SELECT_SECRETS">
            <summary>Special secret processing</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_INITIAL_IN_PROGRESS">
            <summary>Initial sync in progress</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_PARTIAL_ATTRIBUTE_SET">
            <summary>Partial Attribute Set sync in progress</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_REQUEUE">
            <summary>Sync is being retried</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_NOTIFICATION">
            <summary>Sync is a notification request from a source</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_ASYNCHRONOUS_REPLICA">
            <summary>Sync is a special form which requests to establish contact now and do the rest of the sync later</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_CRITICAL">
            <summary>Request critical objects only</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_FULL_IN_PROGRESS">
            <summary>A full synchronization is in progress</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_PREEMPTED">
            <summary>Synchronization request was previously preempted</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplSyncOptions.DS_REPSYNC_NONGC_RO_REPLICA">
            <summary>Non GC readonly replica</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DsReplUpdateOptions">
            <summary>Contains a set of flags that provide additional data used to process the request.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplUpdateOptions.DS_REPUPD_ASYNCHRONOUS_OPERATION">
            <summary>The operation is performed asynchronously.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplUpdateOptions.DS_REPUPD_WRITEABLE">
            <summary>The reference to the replica added or removed is writable. Otherwise, it is read-only.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplUpdateOptions.DS_REPUPD_ADD_REFERENCE">
            <summary>A reference to the destination is added to the source server.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplUpdateOptions.DS_REPUPD_DELETE_REFERENCE">
            <summary>A reference to the destination is removed from the source server.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplUpdateOptions.DS_REPUPD_REFERENCE_GCSPN">
            <summary>Use GCSPN while notifying replica partner</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DsReplVerifyOptions">
            <summary>Contains a set of flags that modify the behavior of the function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsReplVerifyOptions.DS_EXIST_ADVISORY_MODE">
            <summary>Do not delete objects in response to this function.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DsSchemaGuidType">
            <summary>Indicates the type of GUID mapped by DsMapSchemaGuids.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsSchemaGuidType.DS_SCHEMA_GUID_NOT_FOUND">
            <summary>The GUID cannot be found in the directory service schema.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsSchemaGuidType.DS_SCHEMA_GUID_ATTR">
            <summary>The GUID identifies a property.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsSchemaGuidType.DS_SCHEMA_GUID_ATTR_SET">
            <summary>The GUID identifies a property set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsSchemaGuidType.DS_SCHEMA_GUID_CLASS">
            <summary>The GUID identifies a type of object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DsSchemaGuidType.DS_SCHEMA_GUID_CONTROL_RIGHT">
            <summary>The GUID identifies an extended access right.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.ScheduleType">
            <summary>Defines the type of schedule data that is contained in the <see cref="T:Vanara.PInvoke.NTDSApi.SCHEDULE_HEADER"/> structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.ScheduleType.SCHEDULE_INTERVAL">
            <summary>
            <para>
            The schedule contains a set of intervals. The <c>Offset</c> member contains the offset to an array of bytes with
            <c>SCHEDULE_DATA_ENTRIES</c> elements. Each byte in the array represents an hour of the week. The first hour is 00:00 on
            Sunday morning GMT.
            </para>
            <para>
            Each bit of the lower four bits of each byte represents a 15 minute block within the hour that the source is available for
            replication. The following list lists the binary values and describes each bit of the lower four bits of the hour value.
            </para>
            <list type="table">
            <listheader>
            <term>Binary value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>1000</term>
            <term>The source is available for replication from 0 to 14 minutes after the hour.</term>
            </item>
            <item>
            <term>0100</term>
            <term>The source is available for replication from 15 to 29 minutes after the hour.</term>
            </item>
            <item>
            <term>0010</term>
            <term>The source is available for replication from 30 to 44 minutes after the hour.</term>
            </item>
            <item>
            <term>0001</term>
            <term>The source is available for replication from 45 to 59 minutes after the hour.</term>
            </item>
            </list>
            <para>
            These bits can be combined to create multiple 15 minute blocks that the source is available. For example, a binary value of
            0111 indicates that the source is available from 0 to 44 minutes after the hour.
            </para>
            <para>The upper fours bits of each byte are not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.ScheduleType.SCHEDULE_BANDWIDTH">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.ScheduleType.SCHEDULE_PRIORITY">
            <summary>Not supported.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsAddSidHistory(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.UInt32,System.String,System.String,System.String,Vanara.PInvoke.NTDSApi.SafeAuthIdentityHandle,System.String,System.String)">
            <summary>
            <para>
            The <c>DsAddSidHistory</c> function retrieves the primary account security identifier (SID) of a security principal from one
            domain and adds it to the <c>sIDHistory</c> attribute of a security principal in another domain in a different forest. When the
            source domain is in Windows 2000 native mode, this function also retrieves the <c>sIDHistory</c> values of the source principal
            and adds them to the destination principal <c>sIDHistory</c>.
            </para>
            <para>
            The <c>DsAddSidHistory</c> function performs a security-sensitive function by adding the primary account SID of an existing
            security principal to the <c>sIDHistory</c> of a principal in a domain in a different forest, effectively granting to the latter
            access to all resources accessible to the former. For more information about the use and security implications of this function,
            see Using DsAddSidHistory.
            </para>
            </summary>
            <param name="hDS">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="Flags">Reserved for future use. Set to <c>NULL</c>.</param>
            <param name="SrcDomain"><para>Pointer to a null-terminated string that specifies the name of the domain to query for the SID of SrcPrincipal.</para>
            <para>
            If the source domain runs on Windows Server operating systems, SrcDomain can be either a domain name system (DNS) name, for
            example, fabrikam.com, or a flat NetBIOS, for example, Fabrikam, name. DNS names should be used when possible.
            </para></param>
            <param name="SrcPrincipal">Pointer to a null-terminated string that specifies the name of a security principal, user or group, in the source domain. This
            name is a domain-relative Security Account Manager (SAM) name, for example: evacorets.</param>
            <param name="SrcDomainController"><para>
            Pointer to a null-terminated string that specifies the name of the primary domain controller (PDC) Emulator in the source domain
            to use for secure retrieval of the source principal SID and audit generation.
            </para>
            <para>If this parameter is <c>NULL</c>, DSBindWithCred will select the primary domain controller.</para>
            <para>SrcDomainController can be either a DNS name or a flat NetBIOS name. DNS names should be used when possible.</para></param>
            <param name="SrcDomainCreds"><para>
            Contains an identity handle that represents the identity and credentials of a user with administrative rights in the source
            domain. To obtain this handle, call DsMakePasswordCredentials. This user must be a member of either the Administrators or the
            Domain Administrators group. If this call is made from a remote computer to the destination DC, then both the remote computer and
            the destination DC must support 128-bit encryption to privacy-protect the credentials. If 128-bit encryption is unavailable and
            SrcDomainCreds are provided, then the call must be made on the destination DC.
            </para>
            <para>If this parameter is <c>NULL</c>, the credentials of the caller are used for access to the source domain.</para></param>
            <param name="DstDomain">Pointer to a null-terminated string that specifies the name of the destination domain in which DstPrincipal resides. This name
            can either be a DNS name, for example, fabrikam.com, or a NetBIOS name, for example, Fabrikam. The destination domain must run
            Windows 2000 native mode.</param>
            <param name="DstPrincipal">Pointer to a null-terminated string that specifies the name of a security principal, user or group, in the destination domain.
            This domain-relative SAM name identifies the principal whose <c>sIDHistory</c> attribute is updated with the SID of the SrcPrincipal.</param>
            <returns>Returns a Win32 error codes including the following.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsBind(System.String,System.String,Vanara.PInvoke.NTDSApi.SafeDsHandle@)">
            <summary>
            The DsBind function binds to a domain controller.DsBind uses the default process credentials to bind to the domain controller. To
            specify alternate credentials, use the DsBindWithCred function.
            </summary>
            <param name="DomainControllerName">Pointer to a null-terminated string that contains the name of the domain controller to bind to. This name can be the name of the
            domain controller or the fully qualified DNS name of the domain controller. Either name type can, optionally, be preceded by two
            backslash characters. All of the following examples represent correctly formatted domain controller names:
            <list type="bullet"><item><definition>"FAB-DC-01"</definition></item><item><definition>"\\FAB-DC-01"</definition></item><item><definition>"FAB-DC-01.fabrikam.com"</definition></item><item><definition>"\\FAB-DC-01.fabrikam.com"</definition></item></list><para>This parameter can be NULL. For more information, see Remarks.</para></param>
            <param name="DnsDomainName">Pointer to a null-terminated string that contains the fully qualified DNS name of the domain to bind to. This parameter can be
            NULL. For more information, see Remarks.</param>
            <param name="phDS">Address of a HANDLE value that receives the binding handle. To close this handle, pass it to the DsUnBind function.</param>
            <returns>
            Returns ERROR_SUCCESS if successful or a Windows or RPC error code otherwise.
            </returns>
            <remarks>
            The behavior of the DsBind function is determined by the contents of the DomainControllerName and DnsDomainName parameters. The
            following list describes the behavior of this function based on the contents of these parameters.
            <list type="table"><listheader><description>DomainControllerName</description><description>DnsDomainName</description><description>Description</description></listheader><item><description><c>NULL</c></description><description><c>NULL</c></description><description>DsBind will attempt to bind to a global catalog server in the forest of the local computer.</description></item><item><description>(value)</description><description><c>NULL</c></description><description>DsBind will attempt to bind to the domain controller specified by the DomainControllerName parameter.</description></item><item><description><c>NULL</c></description><description>(value)</description><description>DsBind will attempt to bind to any domain controller in the domain specified by DnsDomainName parameter.</description></item><item><description>(value)</description><description>(value)</description><description>
            The DomainControllerName parameter takes precedence. DsBind will attempt to bind to the domain controller specified by the
            DomainControllerName parameter.
            </description></item></list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsBindByInstance(System.String,System.String,System.Guid@,System.String,Vanara.PInvoke.NTDSApi.SafeAuthIdentityHandle,System.String,Vanara.PInvoke.NTDSApi.DsBindFlags,Vanara.PInvoke.NTDSApi.SafeDsHandle@)">
            <summary>
            The <c>DsBindByInstance</c> function explicitly binds to any AD LDS or Active Directory instance.
            </summary>
            <param name="ServerName">Pointer to a null-terminated string that specifies the name of the instance. This parameter is required to bind to an AD LDS
            instance. If this parameter is <c>NULL</c> when binding to an Active Directory instance, then the DnsDomainName parameter must
            contain a value. If this parameter and the DnsDomainName parameter are both <c>NULL</c>, the function fails with the return value
            <c>ERROR_INVALID_PARAMETER</c> (87).</param>
            <param name="Annotation"><para>
            Pointer to a null-terminated string that specifies the port number of the AD LDS instance or <c>NULL</c> when binding to an
            Active Directory instance. For example, "389".
            </para>
            <para>
            If this parameter is <c>NULL</c> when binding by domain to an Active Directory instance, then the DnsDomainName parameter must be
            specified. If this parameter is <c>NULL</c> when binding to an AD LDS instance, then the InstanceGuid parameter must be specified.
            </para></param>
            <param name="InstanceGuid">Pointer to a <c>GUID</c> value that contains the <c>GUID</c> of the AD LDS instance. The <c>GUID</c> value is the
            <c>objectGUID</c> property of the <c>nTDSDSA</c> object of the instance. If this parameter is <c>NULL</c> when binding to an AD
            LDS instance, the Annotation parameter must be specified.</param>
            <param name="DnsDomainName">Pointer to a null-terminated string that specifies the DNS name of the domain when binding to an Active Directory instance by
            domain. Set this parameter to <c>NULL</c> to bind to an Active Directory instance by server or to an AD LDS instance.</param>
            <param name="AuthIdentity">Handle to the credentials used to start the RPC session. Use the DsMakePasswordCredentials function to create a structure
            suitable for AuthIdentity.</param>
            <param name="ServicePrincipalName">Pointer to a null-terminated string that specifies the Service Principal Name to assign to the client. Passing <c>NULL</c> in
            ServicePrincipalName is equivalent to a call to the DsBindWithCred function.</param>
            <param name="BindFlags"><para>
            Contains a set of flags that define the behavior of this function. This parameter can contain zero or a combination of one or
            more of the following values.
            </para>
            <para>NTDSAPI_BIND_ALLOW_DELEGATION (1)</para>
            <para>
            Causes the bind to use the delegate impersonation level. This enables operations that require delegation, such as
            DsAddSidHistory, to succeed. Specifying this flag also causes DsBindWithSpnEx to operate similar to DsBindWithSpn.
            </para>
            <para>
            If this flag is not specified, the bind will use the impersonate impersonation level. For more information about impersonation
            levels, see Impersonation Levels.
            </para>
            <para>
            Most operations do not require the delegate impersonation level; this flag should only be specified if it is required. Binding to
            a rogue server with the delegate impersonation level enables the rogue server to connect to a non-rogue server with your
            credentials and perform unintended operations.
            </para>
            <para>NTDSAPI_BIND_FORCE_KERBEROS (4)</para>
            <para>
              <c>Active Directory Lightweight Directory Services:</c> If this flag is specified, DsBindWithSpnEx requires Kerberos
            authentication to be used. If Kerberos authentication cannot be established, <c>DsBindWithSpnEx</c> will not attempt to
            authenticate with any other mechanism.
            </para></param>
            <param name="phDS">Address of a <c>HANDLE</c> value that receives the bind handle. To close this handle, call DsUnBind.</param>
            <returns>
            Returns <c>NO_ERROR</c> if successful or an RPC or Win32 error otherwise. Possible error codes include those listed in the
            following list.
            </returns>
            <remarks>
            <para>The following list lists the required parameter values for binding to an instance.</para>
            <list type="table">
              <listheader>
                <term>Instance</term>
                <term>ServerName</term>
                <term>Annotation</term>
                <term>InstanceGuid</term>
                <term>DnsDomainName</term>
              </listheader>
              <item>
                <term>Active Directory by server</term>
                <term>Server Name</term>
                <term>NULL</term>
                <term>NULL</term>
                <term>NULL</term>
              </item>
              <item>
                <term>Active Directory by domain</term>
                <term>NULL</term>
                <term>NULL</term>
                <term>NULL</term>
                <term>DNS domain name</term>
              </item>
              <item>
                <term>AD LDS by port</term>
                <term>DNS Name of the computer with the AD LDS installation.</term>
                <term>Port Number</term>
                <term>NULL</term>
                <term>NULL</term>
              </item>
              <item>
                <term>AD LDS by GUID</term>
                <term>DNS Name of the computer with the AD LDS installation.</term>
                <term>NULL</term>
                <term>Instance GUID</term>
                <term>NULL</term>
              </item>
            </list>
            <para>
              <c>Note</c> For improved performance when binding to an AD LDS instance on a computer with several instances of AD LDS, bind by
            the Instance <c>GUID</c> instead of the port number.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsBindByInstance(System.String,System.String,System.IntPtr,System.String,Vanara.PInvoke.NTDSApi.SafeAuthIdentityHandle,System.String,Vanara.PInvoke.NTDSApi.DsBindFlags,Vanara.PInvoke.NTDSApi.SafeDsHandle@)">
            <summary>
            The <c>DsBindByInstance</c> function explicitly binds to any AD LDS or Active Directory instance.
            </summary>
            <param name="ServerName">Pointer to a null-terminated string that specifies the name of the instance. This parameter is required to bind to an AD LDS
            instance. If this parameter is <c>NULL</c> when binding to an Active Directory instance, then the DnsDomainName parameter must
            contain a value. If this parameter and the DnsDomainName parameter are both <c>NULL</c>, the function fails with the return value
            <c>ERROR_INVALID_PARAMETER</c> (87).</param>
            <param name="Annotation"><para>
            Pointer to a null-terminated string that specifies the port number of the AD LDS instance or <c>NULL</c> when binding to an
            Active Directory instance. For example, "389".
            </para>
            <para>
            If this parameter is <c>NULL</c> when binding by domain to an Active Directory instance, then the DnsDomainName parameter must be
            specified. If this parameter is <c>NULL</c> when binding to an AD LDS instance, then the InstanceGuid parameter must be specified.
            </para></param>
            <param name="InstanceGuid">Pointer to a <c>GUID</c> value that contains the <c>GUID</c> of the AD LDS instance. The <c>GUID</c> value is the
            <c>objectGUID</c> property of the <c>nTDSDSA</c> object of the instance. If this parameter is <c>NULL</c> when binding to an AD
            LDS instance, the Annotation parameter must be specified.</param>
            <param name="DnsDomainName">Pointer to a null-terminated string that specifies the DNS name of the domain when binding to an Active Directory instance by
            domain. Set this parameter to <c>NULL</c> to bind to an Active Directory instance by server or to an AD LDS instance.</param>
            <param name="AuthIdentity">Handle to the credentials used to start the RPC session. Use the DsMakePasswordCredentials function to create a structure
            suitable for AuthIdentity.</param>
            <param name="ServicePrincipalName">Pointer to a null-terminated string that specifies the Service Principal Name to assign to the client. Passing <c>NULL</c> in
            ServicePrincipalName is equivalent to a call to the DsBindWithCred function.</param>
            <param name="BindFlags"><para>
            Contains a set of flags that define the behavior of this function. This parameter can contain zero or a combination of one or
            more of the following values.
            </para>
            <para>NTDSAPI_BIND_ALLOW_DELEGATION (1)</para>
            <para>
            Causes the bind to use the delegate impersonation level. This enables operations that require delegation, such as
            DsAddSidHistory, to succeed. Specifying this flag also causes DsBindWithSpnEx to operate similar to DsBindWithSpn.
            </para>
            <para>
            If this flag is not specified, the bind will use the impersonate impersonation level. For more information about impersonation
            levels, see Impersonation Levels.
            </para>
            <para>
            Most operations do not require the delegate impersonation level; this flag should only be specified if it is required. Binding to
            a rogue server with the delegate impersonation level enables the rogue server to connect to a non-rogue server with your
            credentials and perform unintended operations.
            </para>
            <para>NTDSAPI_BIND_FORCE_KERBEROS (4)</para>
            <para>
              <c>Active Directory Lightweight Directory Services:</c> If this flag is specified, DsBindWithSpnEx requires Kerberos
            authentication to be used. If Kerberos authentication cannot be established, <c>DsBindWithSpnEx</c> will not attempt to
            authenticate with any other mechanism.
            </para></param>
            <param name="phDS">Address of a <c>HANDLE</c> value that receives the bind handle. To close this handle, call DsUnBind.</param>
            <returns>
            Returns <c>NO_ERROR</c> if successful or an RPC or Win32 error otherwise. Possible error codes include those listed in the
            following list.
            </returns>
            <remarks>
            <para>The following list lists the required parameter values for binding to an instance.</para>
            <list type="table">
              <listheader>
                <term>Instance</term>
                <term>ServerName</term>
                <term>Annotation</term>
                <term>InstanceGuid</term>
                <term>DnsDomainName</term>
              </listheader>
              <item>
                <term>Active Directory by server</term>
                <term>Server Name</term>
                <term>NULL</term>
                <term>NULL</term>
                <term>NULL</term>
              </item>
              <item>
                <term>Active Directory by domain</term>
                <term>NULL</term>
                <term>NULL</term>
                <term>NULL</term>
                <term>DNS domain name</term>
              </item>
              <item>
                <term>AD LDS by port</term>
                <term>DNS Name of the computer with the AD LDS installation.</term>
                <term>Port Number</term>
                <term>NULL</term>
                <term>NULL</term>
              </item>
              <item>
                <term>AD LDS by GUID</term>
                <term>DNS Name of the computer with the AD LDS installation.</term>
                <term>NULL</term>
                <term>Instance GUID</term>
                <term>NULL</term>
              </item>
            </list>
            <para>
              <c>Note</c> For improved performance when binding to an AD LDS instance on a computer with several instances of AD LDS, bind by
            the Instance <c>GUID</c> instead of the port number.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsBindingSetTimeout(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.UInt32)">
            <summary>
            The <c>DsBindingSetTimeout</c> function sets the timeout value that is honored by all RPC calls that use the specified binding
            handle. RPC calls that required more time than the timeout value are canceled.
            </summary>
            <param name="hDS">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="cTimeoutSecs">Contains the new timeout value, in seconds.</param>
            <returns>
            Returns <c>ERROR_SUCCESS</c> if successful or a Win32 or RPC error code otherwise. The following is a possible error code.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsBindToISTG(System.String,Vanara.PInvoke.NTDSApi.SafeDsHandle@)">
            <summary>
            The <c>DsBindToISTG</c> function binds to the computer that holds the Inter-Site Topology Generator (ISTG) role in the domain of
            the local computer.
            </summary>
            <param name="SiteName">Pointer to a null-terminated string that contains the site name used when binding. If this parameter is <c>NULL</c>, the site of
            the nearest domain controller is used.</param>
            <param name="phDS">Address of a <c>HANDLE</c> value that receives the bind handle. To close this handle, call DsUnBind.</param>
            <returns>
            Returns <c>ERROR_SUCCESS</c> if successful or a Win32 or RPC error code otherwise. The following are possible error codes.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsBindWithCred(System.String,System.String,Vanara.PInvoke.NTDSApi.SafeAuthIdentityHandle,Vanara.PInvoke.NTDSApi.SafeDsHandle@)">
            <summary>
            The DsBindWithCred function binds to a domain controller using the specified credentials.
            </summary>
            <param name="DomainControllerName">Pointer to a null-terminated string that contains the name of the domain controller to bind to. This name can be the name of the
            domain controller or the fully qualified DNS name of the domain controller. Either name type can, optionally, be preceded by two
            backslash characters. All of the following examples represent correctly formatted domain controller names:
            <list type="bullet"><item><definition>"FAB-DC-01"</definition></item><item><definition>"\\FAB-DC-01"</definition></item><item><definition>"FAB-DC-01.fabrikam.com"</definition></item><item><definition>"\\FAB-DC-01.fabrikam.com"</definition></item></list><para>This parameter can be NULL. For more information, see Remarks.</para></param>
            <param name="DnsDomainName">Pointer to a null-terminated string that contains the fully qualified DNS name of the domain to bind to. This parameter can be
            NULL. For more information, see Remarks.</param>
            <param name="AuthIdentity">Contains an RPC_AUTH_IDENTITY_HANDLE value that represents the credentials to be used for the bind. The DsMakePasswordCredentials
            function is used to obtain this value. If this parameter is NULL, the credentials of the calling thread are used.
            <para>DsUnBind must be called before freeing this handle with the DsFreePasswordCredentials function.</para></param>
            <param name="phDS">Address of a HANDLE value that receives the binding handle. To close this handle, pass it to the DsUnBind function.</param>
            <returns>
            Returns ERROR_SUCCESS if successful or a Windows or RPC error code otherwise.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsBindWithSpn(System.String,System.String,Vanara.PInvoke.NTDSApi.SafeAuthIdentityHandle,System.String,Vanara.PInvoke.NTDSApi.SafeDsHandle@)">
            <summary>
            <para>
            The <c>DsBindWithSpn</c> function binds to a domain controller using the specified credentials and a specific service principal
            name (SPN) for mutual authentication.
            </para>
            <para>
            This function is provided for where complete control is required for mutual authentication. Do not use this function if you
            expect DsBind to find a server for you, because SPNs are computer-specific, and it is unlikely that the SPN you provide will
            match the server that <c>DsBind</c> finds for you. Providing a <c>NULL</c> ServicePrincipalName argument results in behavior that
            is identical to DsBindWithCred.
            </para>
            </summary>
            <param name="DomainControllerName">Pointer to a null-terminated string that contains the fully qualified DNS name of the domain to bind to. For more information,
            see the DomainControllerName description in the DsBind topic.</param>
            <param name="DnsDomainName">Pointer to a null-terminated string that contains the fully qualified DNS name of the domain to bind to. For more information,
            see the DnsDomainName description in the DsBind topic.</param>
            <param name="AuthIdentity"><para>Contains an RPC_AUTH_IDENTITY_HANDLE value that represents the credentials to be used for the bind. The</para>
            <para>
            DsMakePasswordCredentialsfunction is used to obtain this value. If this parameter is <c>NULL</c>, the credentials of the calling
            thread are used.
            </para>
            <para>DsUnBind must be called before freeing this handle with the DsFreePasswordCredentials function.</para></param>
            <param name="ServicePrincipalName">Pointer to a null-terminated string that specifies the Service Principal Name to assign to the client. Passing <c>NULL</c> in
            ServicePrincipalName is equivalent to a call to the DsBindWithCred function.</param>
            <param name="phDS">Address of a <c>HANDLE</c> value that receives the binding handle. To close this handle, pass it to the DsUnBind function.</param>
            <returns>
            Returns <c>ERROR_SUCCESS</c> if successful or a Windows or RPC error code otherwise. The following are the most common error codes.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsBindWithSpnEx(System.String,System.String,Vanara.PInvoke.NTDSApi.SafeAuthIdentityHandle,System.String,Vanara.PInvoke.NTDSApi.DsBindFlags,Vanara.PInvoke.NTDSApi.SafeDsHandle@)">
            <summary>
            <para>
            The <c>DsBindWithSpnEx</c> function binds to a domain controller using the specified credentials and a specific service principal
            name (SPN) for mutual authentication. This function is similar to the DsBindWithSpn function except this function allows more
            binding options with the BindFlags parameter.
            </para>
            <para>
            This function is provided where complete control is required over mutual authentication. Do not use this function if you expect
            DsBind to find a server for you, because SPNs are computer-specific, and it is unlikely that the SPN you provide will match the
            server that <c>DsBind</c> finds for you. Providing a <c>NULL</c> ServicePrincipalName argument results in behavior that is
            identical to DsBindWithCred.
            </para>
            </summary>
            <param name="DomainControllerName">Pointer to a null-terminated string that contains the fully qualified DNS name of the domain to bind. For more information, see
            the DomainControllerName description in the DsBind topic.</param>
            <param name="DnsDomainName">Pointer to a null-terminated string that contains the fully qualified DNS name of the domain to bind. For more information, see
            the DnsDomainName description in the DsBind topic.</param>
            <param name="AuthIdentity"><para>Contains an RPC_AUTH_IDENTITY_HANDLE value that represents the credentials to be used for the bind. The</para>
            <para>
            DsMakePasswordCredentialsfunction is used to obtain this value. If this parameter is <c>NULL</c>, the credentials of the calling
            thread are used.
            </para>
            <para>DsUnBind must be called before freeing this handle with the DsFreePasswordCredentials function.</para></param>
            <param name="ServicePrincipalName">Pointer to a null-terminated string that specifies the Service Principal Name to assign to the client. Passing <c>NULL</c> in
            ServicePrincipalName is equivalent to a call to the DsBindWithCred function.</param>
            <param name="BindFlags"><para>
            Contains a set of flags that define the behavior of this function. This parameter can contain zero or a combination of the values
            listed in the following list.
            </para>
            <para>NTDSAPI_BIND_ALLOW_DELEGATION (1)</para>
            <para>
            Causes the bind to use the delegate impersonation level. This allows operations that require delegation, such as DsAddSidHistory,
            to succeed. Specifying this flag also causes <c>DsBindWithSpnEx</c> to operate like DsBindWithSpn.
            </para>
            <para>
            If this flag is not specified, the bind will use the impersonate impersonation level. For more information, see Impersonation Levels.
            </para>
            <para>
            Most operations do not require the delegate impersonation level, so this flag should only be specified if absolutely required.
            Binding to a rogue server with the delegate impersonation level will allow the rogue server to connect to a non-rogue server with
            your credentials and perform unintended operations.
            </para>
            <para>NTDSAPI_BIND_FIND_BINDING (2)</para>
            <para>Reserved.</para>
            <para>NTDSAPI_BIND_FORCE_KERBEROS (4)</para>
            <para>
              <c>Active Directory Lightweight Directory Services:</c> If this flag is specified, <c>DsBindWithSpnEx</c> forces Kerberos
            authentication to be used. If Kerberos authentication cannot be established, <c>DsBindWithSpnEx</c> will not attempt to
            authenticate with any other method.
            </para></param>
            <param name="phDS">Address of a <c>HANDLE</c> value that receives the binding handle. To close this handle, pass it to the DsUnBind function.</param>
            <returns>
            Returns <c>ERROR_SUCCESS</c> if successful or a Windows or RPC error code otherwise. The following list lists common error codes.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsClientMakeSpnForTargetServer(System.String,System.String,System.UInt32@,System.Text.StringBuilder)">
            <summary>
            The <c>DsClientMakeSpnForTargetServer</c> function constructs a service principal name (SPN) that identifies a specific server to
            use for authentication.
            </summary>
            <param name="ServiceClass">Pointer to a null-terminated string that contains the class of the service as defined by the service. This can be any string
            unique to the service.</param>
            <param name="ServiceName"><para>
            Pointer to a null-terminated string that contains the distinguished name service (DNS) host name. This can either be a fully
            qualified name or an IP address in the Internet standard format.
            </para>
            <para>
            Use of an IP address for ServiceName is not recommended because this can create a security issue. Before the SPN is constructed,
            the IP address must be translated to a computer name through DNS name resolution. It is possible for the DNS name resolution to
            be spoofed, replacing the intended computer name with an unauthorized computer name.
            </para></param>
            <param name="pcSpnLength">Pointer to a <c>DWORD</c> value that, on entry, contains the size of the pszSpn buffer, in characters. On output, this parameter
            receives the number of characters copied to the pszSpn buffer, including the terminating <c>NULL</c>.</param>
            <param name="pszSpn">Pointer to a string buffer that receives the SPN.</param>
            <returns>This function returns standard Windows error codes.</returns>
            <remarks>
            <para>When using this function, supply the service class and part of a DNS host name.</para>
            <para>
            This function is a simplified version of the DsMakeSpn function. The ServiceName is made canonical by resolving through DNS.
            </para>
            <para>GUID-based DNS names are not supported. When constructed, the simplified SPN is as follows:</para>
            <para>The instance name portion (second position) is always set to default. The port and referrer fields are not used.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsCrackNames(Vanara.PInvoke.NTDSApi.SafeDsHandle,Vanara.PInvoke.NTDSApi.DS_NAME_FLAGS,Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT,Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT,System.UInt32,System.String[],Vanara.PInvoke.NTDSApi.SafeDsNameResult@)">
            <summary>
            The DsCrackNames function converts an array of directory service object names from one format to another. Name conversion enables
            client applications to map between the multiple names used to identify various directory service objects. For example, user
            objects can be identified by SAM account names (Domain\UserName), user principal name (UserName@Domain.com), or distinguished
            name. <note type="note">This function uses many handles and memory allocations that can be unwieldy. It is recommended to use the
            <see cref="M:Vanara.PInvoke.NTDSApi.DsCrackNames(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String[],Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT,Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT,Vanara.PInvoke.NTDSApi.DS_NAME_FLAGS)" /> method instead.</note>
            </summary>
            <param name="hSafeDs">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function. If flags contains
            DS_NAME_FLAG_SYNTACTICAL_ONLY, hDS can be NULL.</param>
            <param name="flags">Contains one or more of the DS_NAME_FLAGS values used to determine how the name syntax will be cracked.</param>
            <param name="formatOffered">Contains one of the DS_NAME_FORMAT values that identifies the format of the input names.</param>
            <param name="formatDesired">Contains one of the DS_NAME_FORMAT values that identifies the format of the output names. The DS_SID_OR_SID_HISTORY_NAME value is
            not supported.</param>
            <param name="cNames">Contains the number of elements in the rpNames array.</param>
            <param name="rpNames">Pointer to an array of pointers to null-terminated strings that contain names to be converted.</param>
            <param name="ppResult">Pointer to a PDS_NAME_RESULT value that receives a DS_NAME_RESULT structure that contains the converted names. The caller must
            free this memory, when it is no longer required, by calling DsFreeNameResult.</param>
            <returns>
            Returns a Win32 error value, an RPC error value, or one of the following.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsCrackNames(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String[],Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT,Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT,Vanara.PInvoke.NTDSApi.DS_NAME_FLAGS)">
            <summary>A wrapper function for the DsCrackNames OS call</summary>
            <param name="hSafeDs">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function. If flags contains
            DS_NAME_FLAG_SYNTACTICAL_ONLY, hDS can be NULL.</param>
            <param name="names">The names to be converted.</param>
            <param name="formatDesired">Contains one of the DS_NAME_FORMAT values that identifies the format of the output names. The DS_SID_OR_SID_HISTORY_NAME value is
            not supported.</param>
            <param name="formatOffered">Contains one of the DS_NAME_FORMAT values that identifies the format of the input names.</param>
            <param name="flags">Contains one or m ore of the DS_NAME_FLAGS values used to determine how the name syntax will be cracked.</param>
            <returns>The crack results.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsFreeDomainControllerInfo(System.UInt32,System.UInt32,Vanara.PInvoke.NTDSApi.DCInfoHandle)">
            <summary>
            The <c>DsFreeDomainControllerInfo</c> function frees memory that is allocated by DsGetDomainControllerInfo for data about the
            domain controllers in a domain.
            </summary>
            <param name="InfoLevel"><para>
            Indicates what version of the <c>DS_DOMAIN_CONTROLLER_INFO</c> structure should be freed. This parameter can be one of the
            following values.
            </para>
            <para>1</para>
            <para>The function frees the structure that contains DS_DOMAIN_CONTROLLER_INFO_1 data.</para>
            <para>2</para>
            <para>The function frees the structure that contains DS_DOMAIN_CONTROLLER_INFO_2 data.</para></param>
            <param name="cInfo">Indicates the number of items in pInfo.</param>
            <param name="pInfo">Pointer to an array of DS_DOMAIN_CONTROLLER_INFO structures to be freed.</param>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsFreeNameResult(System.IntPtr)">
            <summary>
            The DsFreeNameResult function frees the memory held by a DS_NAME_RESULT structure. Use this function to free the memory allocated
            by the DsCrackNames function.
            </summary>
            <param name="pResult">Pointer to the DS_NAME_RESULT structure to be freed.</param>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsFreePasswordCredentials(System.IntPtr)">
            <summary>
            Frees memory allocated for a credentials structure by the DsMakePasswordCredentials function.
            </summary>
            <param name="AuthIdentity">Handle of the credential structure to be freed.</param>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsFreeSchemaGuidMap(System.IntPtr)">
            <summary>
            The <c>DsFreeSchemaGuidMap</c> function frees memory that the DsMapSchemaGuids function has allocated for a DS_SCHEMA_GUID_MAP structure.
            </summary>
            <param name="pGuidMap">Pointer to a DS_SCHEMA_GUID_MAP structure to deallocate.</param>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsFreeSpnArray(System.UInt32,Vanara.PInvoke.NTDSApi.SpnArrayHandle@)">
            <summary>
            The <c>DsFreeSpnArray</c> function frees an array returned from the DsGetSpn function.
            </summary>
            <param name="cSpn">Specifies the number of elements contained in rpszSpn.</param>
            <param name="rpszSpn">Pointer to an array returned from DsGetSpn.</param>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsGetDomainControllerInfo(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,System.UInt32,System.UInt32@,Vanara.PInvoke.NTDSApi.DCInfoHandle@)">
            <summary>
            The <c>DsGetDomainControllerInfo</c> function retrieves data about the domain controllers in a domain.
            </summary>
            <param name="hDs">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="DomainName">Pointer to a null-terminated string that specifies the domain name.</param>
            <param name="InfoLevel"><para>
            Contains a value that indicates the version of the <c>DS_DOMAIN_CONTROLLER_INFO</c> structure to return. This can be one of the
            following values.
            </para>
            <para>1</para>
            <para>The function provides the domain data in the DS_DOMAIN_CONTROLLER_INFO_1 structure format.</para>
            <para>2</para>
            <para>The function provides the domain data in the DS_DOMAIN_CONTROLLER_INFO_2 structure format.</para>
            <para>3</para>
            <para>The function provides the domain data in the DS_DOMAIN_CONTROLLER_INFO_3 structure format.</para></param>
            <param name="pcOut">Pointer to a <c>DWORD</c> variable that receives the number of items returned in ppInfo array.</param>
            <param name="ppInfo">Pointer to a pointer variable that receives an array of <c>DS_DOMAIN_CONTROLLER_INFO_*</c> structures. The type of structures in
            this array is defined by the InfoLevel parameter. The caller must free this array, when it is no longer required, by using the
            DsFreeDomainControllerInfo function.</param>
            <returns>
            <para>
            If the function returns domain controller data, the return value is <c>ERROR_SUCCESS</c>. If the caller does not have the
            privileges to access the server objects, the return value is <c>ERROR_SUCCESS</c>, but the <c>DS_DOMAIN_CONTROLLER_INFO</c>
            structures could be empty.
            </para>
            <para>If the function fails, the return value can be one of the following error codes.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsGetDomainControllerInfo``1(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String)">
            <summary>
            The <c>DsGetDomainControllerInfo</c> function retrieves data about the domain controllers in a domain.
            </summary>
            <typeparam name="T">The type of the DS_DOMAIN_CONTROLLER_INFO_X structure to return.</typeparam>
            <param name="hDs">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="DomainName">Pointer to a null-terminated string that specifies the domain name.</param>
            <returns>
            An array of <typeparamref name="T" /> returned by a call to the native <c>DsGetDomainControllerInfo</c> function.
            </returns>
            <exception cref="T:System.ArgumentException">Unable to determine level from requested type.</exception>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsGetSpn(Vanara.PInvoke.NTDSApi.DS_SPN_NAME_TYPE,System.String,System.String,System.UInt16,System.UInt16,System.String[],System.UInt16[],System.UInt32@,Vanara.PInvoke.NTDSApi.SpnArrayHandle@)">
            <summary>
            The <c>DsGetSpn</c> function constructs an array of one or more service principal names (SPNs). Each name in the array identifies
            an instance of a service. These SPNs may be registered with the directory service (DS) using the DsWriteAccountSpn function.
            </summary>
            <param name="ServiceType"><para>Identifies the format of the SPNs to compose. The ServiceType parameter can have one of the following values.</para>
            <para>DS_SPN_DNS_HOST, DS_SPN_DN_HOST, DS_SPN_NB_HOST</para>
            <para>The SPNs have the following format.</para>
            <para>The</para>
            <para>ServiceName</para>
            <para>parameter must be</para>
            <para>NULL</para>
            <para>. This is the SPN format for a host-based service, which provides services identified with its host computer. The</para>
            <para>InstancePort</para>
            <para>component is optional.</para>
            <para>DS_SPN_DOMAIN, DS_SPN_NB_DOMAIN</para>
            <para>The SPNs have the following format.</para>
            <para>The</para>
            <para>ServiceName</para>
            <para>
            parameter must be the DNS name or DN of a domain. This format is used for a replicable service that provides services to the
            specified domain.
            </para>
            <para>DS_SPN_SERVICE</para>
            <para>The SPNs have the following format.</para>
            <para>The</para>
            <para>ServiceName</para>
            <para>
            parameter must be a canonical DN or DNS name that identifies an instance of the service. For example, it could be a DNS name of a
            SRV record, or the distinguished name of the service connection point for this service instance.
            </para></param>
            <param name="ServiceClass">Pointer to a constant null-terminated string that specifies the class of the service; for example, http. Generally, this can be
            any string that is unique to the service.</param>
            <param name="ServiceName">Pointer to a constant null-terminated string that specifies the DNS name or distinguished name (DN) of the service. ServiceName
            is not required for a host-based service. For more information, see the description of the ServiceType parameter for the possible
            values of ServiceName.</param>
            <param name="InstancePort">Specifies the port number of the service instance. If this value is zero, the SPN does not include a port number.</param>
            <param name="cInstanceNames">Specifies the number of elements in the pInstanceNames and pInstancePorts arrays. If this value is zero, pInstanceNames must
            point to an array of cInstanceNames strings, and pInstancePorts can be either <c>NULL</c> or a pointer to an array of
            cInstanceNames port numbers. If this value is zero, <c>DsGetSpn</c> returns only one SPN in the prpszSpn array and pInstanceNames
            and pInstancePorts are ignored.</param>
            <param name="pInstanceNames">Pointer to an array of null-terminated strings that specify extra instance names (not used for host names). This parameter is
            ignored if cInstanceNames is zero. In that case, the InstanceName component of the SPN defaults to the fully qualified DNS name
            of the local computer or the NetBIOS name if <c>DS_SPN_NB_HOST</c> or <c>DS_SPN_NB_DOMAIN</c> is specified.</param>
            <param name="pInstancePorts">Pointer to an array of extra instance ports. If this value is non- <c>NULL</c>, it must point to an array of cInstanceNames port
            numbers. If this value is <c>NULL</c>, the SPNs do not include a port number. This parameter is ignored if cInstanceNames is zero.</param>
            <param name="pcSpn">Pointer to a variable that receives the number of SPNs contained in prpszSpn.</param>
            <param name="prpszSpn">Pointer to a variable that receives a pointer to an array of SPNs. This array must be freed with DsFreeSpnArray.</param>
            <returns>
            <para>If the function returns an array of SPNs, the return value is <c>ERROR_SUCCESS</c>.</para>
            <para>If the function fails, the return value can be one of the following error codes.</para>
            </returns>
            <remarks>
            <para>
              <c>To create SPNs for multiple instances of a replicated service running on multiple host computers</c>
            </para>
            <list type="number">
              <item>
                <term>Set cInstanceNames to the number of instances.</term>
              </item>
              <item>
                <term>Specify the names of the host computers in the pInstanceNames array.</term>
              </item>
            </list>
            <para>
              <c>To create SPNs for multiple instances of a service running on the same host computer</c>
            </para>
            <list type="number">
              <item>
                <term>Set the cInstanceNames to the number of instances.</term>
              </item>
              <item>
                <term>Set each entry in the pInstanceNames array to the DNS name of the host computer.</term>
              </item>
              <item>
                <term>Use the pInstancePorts parameter to specify an array of unique port numbers for each instance to disambiguate the SPNs.</term>
              </item>
            </list>
            <para>String parameters cannot include the forward slash (/), which is used to separate the components of the SPN.</para>
            <para>
            An application with the appropriate privileges, which are usually those of a domain administrator, can call the DsWriteAccountSpn
            function to register one or more SPNs on the user or computer account where the service is running. Clients can then use the SPNs
            to authenticate the service.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsInheritSecurityIdentity(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.UInt32,System.String,System.String)">
            <summary>
            The <c>DsInheritSecurityIdentity</c> function appends the <c>objectSid</c> and <c>sidHistory</c> attributes of SrcPrincipal to
            the <c>sidHistory</c> of DstPrincipal and then deletes SrcPrincipal, all in a single transaction. To ensure that this operation
            is atomic, SrcPrincipal and DstPrincipal must be in the same domain and hDS must be bound to a domain controller that the correct
            permissions within that domain.
            </summary>
            <param name="hDS">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="Flags">Reserved for future use. Must be zero.</param>
            <param name="SrcPrincipal">Pointer to a null-terminated string that specifies the name of a security principal (user or group) in the source domain. This
            name is a domain-relative SAM name.</param>
            <param name="DstPrincipal">Pointer to a null-terminated string that specifies the name of a security principal (user or group) in the destination domain.
            This domain-relative SAM name identifies the principal whose <c>sidHistory</c> attribute will be updated with the SID of SrcPrincipal.</param>
            <returns>Returns a system or RPC error code including the following.</returns>
            <remarks>
            <para>
            With an operating system upgrade domain applications, which span both upgraded and non-upgraded domains, may have security
            principals inside and outside the forest for the same logical entity at the same time.
            </para>
            <para>
            When all upgraded domains have joined the same forest, <c>DsInheritSecurityIdentity</c> eliminates the duplicate objects while
            ensuring that the remaining objects have all the security rights and privileges belonging to their respective deleted object.
            </para>
            <para>A <c>DsInheritSecurityIdentity</c> implementation:</para>
            <list type="bullet">
              <item>
                <term>Verifies that SrcPrincipal and DstPrincipal are in the same domain.</term>
              </item>
              <item>
                <term>Verifies that the domain is writable at the bind to the server.</term>
              </item>
              <item>
                <term>Verifies that auditing is enabled for the domain.</term>
              </item>
              <item>
                <term>Verifies that the caller is a member of the domain administrators for the domain.</term>
              </item>
              <item>
                <term>Verifies that the domain is in the native mode.</term>
              </item>
              <item>
                <term>
            Verifies that SrcPrincipal exists, that it is a security principal and has read its <c>objectSid</c> and <c>sidHistory</c> properties.
            </term>
              </item>
              <item>
                <term>
            Verifies that DstPrincipal exists, that it is a security principal, and has read certain properties required for auditing and verification.
            </term>
              </item>
              <item>
                <term>
            Deletes SrcPrincipal in the database only if the entire operation is committed at completion. This operation fails if the caller
            does not have delete rights or if SrcPrincipal has children.
            </term>
              </item>
              <item>
                <term>Fails the operation if the <c>objectSid</c> of SrcPrincipal or DstPrincipal is a well-known SID.</term>
              </item>
              <item>
                <term>Adds the <c>objectSid</c> and the <c>sidHistory</c> (if present) of SrcPrincipal to the <c>sidHistory</c> of DstPrincipal.</term>
              </item>
              <item>
                <term>Forces an audit event and fails the operation if the audit fails.</term>
              </item>
              <item>
                <term>Enters events into the Directory Service Log. Do not confuse this with the Security Audit Log.</term>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsListDomainsInSite(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,Vanara.PInvoke.NTDSApi.SafeDsNameResult@)">
            <summary>
            The <c>DsListDomainsInSite</c> function lists all the domains in a site.
            </summary>
            <param name="hDs">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="site">Pointer to a null-terminated string that specifies the site name. This string is taken from the list of site names returned by
            the DsListSites function.</param>
            <param name="ppDomains">Pointer to a pointer to a DS_NAME_RESULT structure that receives the list of domains in the site. To free the returned structure,
            call the DsFreeNameResult function.</param>
            <returns>
            If the function returns a list of domains, the return value is <c>NO_ERROR</c>. If the function fails, the return value can be
            one of the following error codes.
            </returns>
            <remarks>
            Individual name conversion errors are reported in the returned DS_NAME_RESULT structure.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsListInfoForServer(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,Vanara.PInvoke.NTDSApi.SafeDsNameResult@)">
            <summary>
            The <c>DsListInfoForServer</c> function lists miscellaneous data for a server.
            </summary>
            <param name="hDs">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="server">Pointer to a null-terminated string that specifies the server name. This name must be the same as one of the strings returned by
            the DsListServersForDomainInSite or DsListServersInSite function.</param>
            <param name="ppInfo"><para>
            Pointer to a variable that receives a pointer to a DS_NAME_RESULT structure that contains the server data. The returned structure
            must be deallocated using DsFreeNameResult.
            </para>
            <para>
            The indexes of the array in the DS_NAME_RESULT structure indicate what data are contained by each array element. The following
            constants may be used to specify the desired index for a particular piece of data.
            </para>
            <para>DS_LIST_ACCOUNT_OBJECT_FOR_SERVER</para>
            <para>Name of the account object for the domain controller (DC).</para>
            <para>DS_LIST_DNS_HOST_NAME_FOR_SERVER</para>
            <para>DNS host name of the DC.</para>
            <para>DS_LIST_DSA_OBJECT_FOR_SERVER</para>
            <para>GUID of the directory service agent (DSA) for the domain controller (DC).</para></param>
            <returns>
            <para>If the function returns server data, the return value is <c>NO_ERROR</c>.</para>
            <para>If the function fails, the return value can be one of the following error codes.</para>
            </returns>
            <remarks>
            Individual name conversion errors are reported in the returned DS_NAME_RESULT structure.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsListRoles(Vanara.PInvoke.NTDSApi.SafeDsHandle,Vanara.PInvoke.NTDSApi.SafeDsNameResult@)">
            <summary>
            The <c>DsListRoles</c> function lists roles recognized by the server.
            </summary>
            <param name="hDs">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="ppRoles"><para>
            Pointer to a variable that receives a pointer to a DS_NAME_RESULT structure containing the roles the server recognizes. The
            returned structure must be deallocated using DsFreeNameResult.
            </para>
            <para>
            The indexes of the array in the DS_NAME_RESULT structure indicate what data are contained by each array element. The following
            constants may be used to specify the desired index for a particular piece of data.
            </para>
            <para>DS_ROLE_DOMAIN_OWNER</para>
            <para>Server owns the domain.</para>
            <para>DS_ROLE_INFRASTRUCTURE_OWNER</para>
            <para>Server owns the infrastructure.</para>
            <para>DS_ROLE_PDC_OWNER</para>
            <para>Server owns the PDC.</para>
            <para>DS_ROLE_RID_OWNER</para>
            <para>Server owns the RID.</para>
            <para>DS_ROLE_SCHEMA_OWNER</para>
            <para>Server owns the schema.</para></param>
            <returns>
            <para>If the function returns a list of roles, the return value is <c>NO_ERROR</c>.</para>
            <para>If the function fails, the return value can be one of the following error codes.</para>
            <para>Individual name conversion errors are reported in the returned DS_NAME_RESULT structure.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsListServersForDomainInSite(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,System.String,Vanara.PInvoke.NTDSApi.SafeDsNameResult@)">
            <summary>
            The <c>DsListServersForDomainInSite</c> function lists all the servers in a domain in a site.
            </summary>
            <param name="hDs">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="domain">Pointer to a null-terminated string that specifies the domain name. This string must be the same as one of the strings returned
            by DsListDomainsInSite function.</param>
            <param name="site">Pointer to a null-terminated string that specifies the site name. This string is taken from the list of site names returned by
            the DsListSites function.</param>
            <param name="ppServers">Pointer to a pointer to a DS_NAME_RESULT structure that receives the list of servers in the domain. The returned structure must
            be freed using the DsFreeNameResult function.</param>
            <returns>
            If the function returns a list of servers, the return value is <c>NO_ERROR</c>. If the function fails, the return value can be
            one of the following error codes.
            </returns>
            <remarks>
            Individual name conversion errors are reported in the returned DS_NAME_RESULT structure.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsListServersInSite(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,Vanara.PInvoke.NTDSApi.SafeDsNameResult@)">
            <summary>
            The <c>DsListServersInSite</c> function lists all the servers in a site.
            </summary>
            <param name="hDs">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="site">Pointer to a null-terminated string that specifies the site name. The site name uses a distinguished name format. It is taken
            from the list of sites returned by the DsListSites function.</param>
            <param name="ppServers">Pointer to a pointer to a DS_NAME_RESULT structure that receives the list of servers in the site. The returned structure must be
            freed using the DsFreeNameResult function.</param>
            <returns>
            If the function returns a list of servers, the return value is <c>NO_ERROR</c>. If the function fails, the return value can be
            one of the following error codes.
            </returns>
            <remarks>
            Individual name conversion errors are reported in the returned DS_NAME_RESULT structure.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsListSites(Vanara.PInvoke.NTDSApi.SafeDsHandle,Vanara.PInvoke.NTDSApi.SafeDsNameResult@)">
            <summary>
            The <c>DsListSites</c> function lists all the sites in the enterprise forest.
            </summary>
            <param name="hDs">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="ppSites">Pointer to a pointer to a DS_NAME_RESULT structure that receives the list of sites in the enterprise. The site name is returned
            in the distinguished name (DN) format. The returned structure must be freed using the DsFreeNameResult function.</param>
            <returns>
            If the function returns a list of sites, the return value is <c>NO_ERROR</c>. If the function fails, the return value can be one
            of the following error codes.
            </returns>
            <remarks>
            Individual name conversion errors are reported in the returned DS_NAME_RESULT structure.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsMakePasswordCredentials(System.String,System.String,System.String,Vanara.PInvoke.NTDSApi.SafeAuthIdentityHandle@)">
            <summary>
            Constructs a credential handle suitable for use with the DsBindWithCred function.
            </summary>
            <param name="User">A string that contains the user name to use for the credentials.</param>
            <param name="Domain">A string that contains the domain that the user is a member of.</param>
            <param name="Password">A string that contains the password to use for the credentials.</param>
            <param name="pAuthIdentity">An RPC_AUTH_IDENTITY_HANDLE value that receives the credential handle. This handle is used in a subsequent call to
            DsBindWithCred. This handle must be freed with the DsFreePasswordCredentials function when it is no longer required.</param>
            <returns>Returns a Windows error code.</returns>
            <remarks>
            A null, default credential handle is created if User, Domain and Password are all NULL. Otherwise, User must be present. The
            Domain parameter may be NULL when User is fully qualified, such as a user in UPN format; for example, "someone@fabrikam.com".
            <para>
            When the handle returned in pAuthIdentity is passed to DsBindWithCred, DsUnBind must be called before freeing the handle with DsFreePasswordCredentials.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsMapSchemaGuids(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.UInt32,System.Guid[],Vanara.PInvoke.NTDSApi.SafeDsSchemaGuidMap@)">
            <summary>
            The <c>DsMapSchemaGuids</c> function converts GUIDs of directory service schema objects to their display names.
            </summary>
            <param name="hDs">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="cGuids">Indicates the number of elements in rGuids.</param>
            <param name="rGuids">Pointer to an array of <c>GUID</c> values for the objects to be mapped.</param>
            <param name="ppGuidMap">Pointer to a variable that receives a pointer to an array of DS_SCHEMA_GUID_MAP structures that contain the display names of the
            objects in rGuids. This array must be deallocated using DsFreeSchemaGuidMap.</param>
            <returns>
            Returns a standard error code that includes the following values.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsQuerySitesByCost(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,System.String[],System.UInt32,System.UInt32,Vanara.PInvoke.NTDSApi.SafeDsQuerySites@)">
            <summary>
            The <c>DsQuerySitesByCost</c> function gets the communication cost between one site and one or more other sites.
            </summary>
            <param name="hDS">A directory service handle.</param>
            <param name="pszFromSite">Pointer to a null-terminated string that contains the relative distinguished name of the site the costs are measured from.</param>
            <param name="rgszToSites">Contains an array of null-terminated string pointers that contain the relative distinguished names of the sites the costs are
            measured to.</param>
            <param name="cToSites">Contains the number of elements in the rgwszToSites array.</param>
            <param name="dwFlags">Reserved.</param>
            <param name="prgSiteInfo"><para>
            Pointer to an array of DS_SITE_COST_INFO structures that receives the cost data. Each element in this array contains the cost
            data between the site identified by the pwszFromSite parameter and the site identified by the corresponding rgwszToSites element.
            </para>
            <para>The caller must free this memory when it is no longer required by calling DsQuerySitesFree.</para></param>
            <returns>
            Returns <c>ERROR_SUCCESS</c> if successful or a Win32 or RPC error code otherwise. Possible error codes include values listed in
            the following list.
            </returns>
            <remarks>
            The cost values obtained by this function are only used to compare and have no meaning by themselves. For example, the cost for
            site 1 can be compared to the cost for site 2, but the cost for site 1 cannot be compared to a fixed value.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsQuerySitesFree(System.IntPtr)">
            <summary>
            The <c>DsQuerySitesFree</c> function frees the memory allocated by the DsQuerySitesByCost function.
            </summary>
            <param name="rgSiteInfo">Pointer to an array of DS_SITE_COST_INFO structures allocated by a call to DsQuerySitesByCost.</param>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsRemoveDsDomain(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String)">
            <summary>
            The <c>DsRemoveDsDomain</c> function removes all traces of a domain naming context from the global area of the directory service.
            </summary>
            <param name="hDs">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="DomainDN">Pointer to a null-terminated string that specifies the distinguished name of the naming context to remove from the directory service.</param>
            <returns>
            Returns <c>ERROR_SUCCESS</c> if successful or a Win32 or RPC error code if unsuccessful. Possible error codes include the following.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsRemoveDsServer(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,System.String,System.Boolean@,System.Boolean)">
            <summary>
            The <c>DsRemoveDsServer</c> function removes all traces of a directory service agent (DSA) from the global area of the directory service.
            </summary>
            <param name="hDs">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="ServerDN">Pointer to a null-terminated string that specifies the fully qualified distinguished name of the domain controller to remove.</param>
            <param name="DomainDN">Pointer to a null-terminated string that specifies a domain hosted by ServerDN. If this parameter is <c>NULL</c>, no verification
            is performed to ensure that ServerDN is the last domain controller in DomainDN.</param>
            <param name="fLastDcInDomain">Pointer to a Boolean value that receives <c>TRUE</c> if ServerDN is the last DC in DomainDN or <c>FALSE</c> otherwise. This
            parameter receives <c>FALSE</c> if DomainDN is <c>NULL</c>.</param>
            <param name="fCommit">Contains a Boolean value that specifies if the domain controller should actually be removed. If this parameter is nonzero,
            ServerDN is removed. If this parameter is zero, the existence of ServerDN is checked and fLastDcInDomain is written, but the
            domain controller is not removed.</param>
            <returns>
            Returns <c>ERROR_SUCCESS</c> if successful or a Win32 or RPC error code if unsuccessful. Possible error codes include the following.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsReplicaAdd(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,System.String,System.String,System.String,Vanara.PInvoke.NTDSApi.SCHEDULE,Vanara.PInvoke.NTDSApi.DsReplicaAddOptions)">
            <summary>
            The <c>DsReplicaAdd</c> function adds a replication source reference to a destination naming context.
            </summary>
            <param name="hDS">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="NameContext">The null-terminated string that specifies the distinguished name (DN) of the destination naming context (NC) for which to add the
            replica. The destination NC record must exist locally as either an object, instantiated or not, or a reference phantom, for
            example, a phantom with a GUID.</param>
            <param name="SourceDsaDn">The null-terminated string that specifies the DN of the <c>NTDS-DSA</c> object for the source directory system agent. This
            parameter is required if Options includes <c>DS_REPADD_ASYNCHRONOUS_REPLICA</c>; otherwise, it is ignored.</param>
            <param name="TransportDn">The null-terminated string that specifies the DN of the <c>interSiteTransport</c> object that represents the transport used for
            communication with the source server. This parameter is required if Options includes <c>DS_REPADD_INTERSITE_MESSAGING</c>;
            otherwise, it is ignored.</param>
            <param name="SourceDsaAddress">The null-terminated string that specifies the transport-specific address of the source DSA. This source server is identified by a
            string name, not by its UUID. A string name appropriate for SourceDsaAddress is usually a DNS name based on a GUID, where the
            GUID part of the name is the GUID of the <c>NTDS-DSA</c> object for the source server.</param>
            <param name="pSchedule">Pointer to a SCHEDULE structure that contains the replication schedule data for the replication source. This parameter is
            optional and can be <c>NULL</c> if not used.</param>
            <param name="Options"><para>Passes additional data to be used to process the request. This parameter can be a combination of the following values.</para>
            <para>DS_REPADD_ASYNCHRONOUS_OPERATION</para>
            <para>Performs this operation asynchronously.</para>
            <para>DS_REPADD_ASYNCHRONOUS_REPLICA</para>
            <para>Does not replicate the NC. Instead, save enough state data such that it may be replicated later.</para>
            <para>DS_REPADD_DISABLE_NOTIFICATION</para>
            <para>
            Disables notification-based synchronization for the NC from this source. This is expected to be a temporary state. Use
            <c>DS_REPADD_NEVER_NOTIFY</c> to permanently disable synchronization.
            </para>
            <para>DS_REPADD_DISABLE_PERIODIC</para>
            <para>Disables periodic synchronization for the NC from this source.</para>
            <para>DS_REPADD_INITIAL</para>
            <para>Synchronizes the NC from this source when the DSA is started.</para>
            <para>DS_REPADD_INTERSITE_MESSAGING</para>
            <para>
            Synchronizes from the source DSA using the Intersite Messaging Service (IMS) transport, for example, by SMTP, rather than using
            the native directory service RPC.
            </para>
            <para>DS_REPADD_NEVER_NOTIFY</para>
            <para>
            Disables change notifications from this source. When this flag is set, the source does not notify the destination when changes
            occur. This is recommended for all intersite replication that may occur over WAN links.
            </para>
            <para>This is expected to be a permanent state; use <c>DS_REPADD_DISABLE_NOTIFICATION</c> to temporarily disable notifications.</para>
            <para>DS_REPADD_PERIODIC</para>
            <para>Synchronizes the NC from this source periodically, as defined in pSchedule.</para>
            <para>DS_REPADD_USE_COMPRESSION</para>
            <para>
            Uses compression when replicating. This saves network bandwidth at the expense of CPU overhead at both the source and destination servers.
            </para>
            <para>DS_REPADD_WRITEABLE</para>
            <para>Creates a writable replica; otherwise, the replica is read-only.</para></param>
            <returns>
            <para>If the function succeeds, the return value is <c>ERROR_SUCCESS</c>.</para>
            <para>If the function fails, the return value can be one of the following.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsReplicaConsistencyCheck(Vanara.PInvoke.NTDSApi.SafeDsHandle,Vanara.PInvoke.NTDSApi.DS_KCC_TASKID,Vanara.PInvoke.NTDSApi.DsKCCFlags)">
            <summary>
            The <c>DsReplicaConsistencyCheck</c> function invokes the Knowledge Consistency Checker (KCC) to verify the replication topology.
            The KCC dynamically adjusts the data replication topology of your network when domain controllers are added to or removed from
            the network, when a domain controller is unavailable, or when the data replication schedules are changed.
            </summary>
            <param name="hDS">Contains a directory service handle obtained from either the DSBind, DSBindWithCred, or DsBindWithSpn function.</param>
            <param name="TaskID">Identifies the task that the KCC should execute. <c>DS_KCC_TASKID_UPDATE_TOPOLOGY</c> is the only currently supported value.</param>
            <param name="dwFlags"><para>
            Contains a set of flags that modify the function behavior. This can be zero or a combination of one or more of the following values.
            </para>
            <para>DS_KCC_FLAG_ASYNC_OP</para>
            <para>The task is queued and then the function returns without waiting for the task to complete.</para>
            <para>DS_KCC_FLAG_DAMPED</para>
            <para>The task will not be added to the queue if another queued task will run soon.</para></param>
            <returns>
            If the function performs its operation successfully, the return value is <c>ERROR_SUCCESS</c>. If the function fails, the return
            value can be one of the following.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsReplicaDel(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,System.String,Vanara.PInvoke.NTDSApi.DsReplicaDelOptions)">
            <summary>
            The <c>DsReplicaDel</c> function removes a replication source reference from a destination naming context (NC).
            </summary>
            <param name="hDS">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="NameContext">Pointer to a constant null-terminated string that specifies the distinguished name (DN) of the destination NC from which to
            remove the replica. The destination NC record must exist locally as either an object, instantiated or not, or a reference
            phantom, for example, a phantom with a GUID.</param>
            <param name="DsaSrc">Pointer to a constant null-terminated Unicode string that specifies the transport-specific address of the source directory system
            agent (DSA). This source server is identified by a string name, not by its <c>UUID</c>. A string name appropriate for DsaSrc is
            usually a DNS name that is based on a <c>GUID</c>, where the <c>GUID</c> part of the name is the <c>GUID</c> of the nTDSDSA
            object for the source server.</param>
            <param name="Options"><para>Passes additional data used to process the request. This parameter can be a combination of the following values.</para>
            <para>DS_REPDEL_ASYNCHRONOUS_OPERATION</para>
            <para>Performs this operation asynchronously.</para>
            <para>DS_REPDEL_IGNORE_ERRORS</para>
            <para>
            Ignores any error generated from contacting the source to instruct it to remove this NC from its list of servers to which it replicates.
            </para>
            <para>DS_REPDEL_INTERSITE_MESSAGING</para>
            <para>Signifies the replica is mail-based rather than synchronized using native directory service RPC.</para>
            <para>DS_REPDEL_LOCAL_ONLY</para>
            <para>
            Does not contact the source to tell it to remove this NC from its list of servers to which it replicates. If this flag is not set
            and the link is based in RPC, the source is contacted.
            </para>
            <para>DS_REPDEL_NO_SOURCE</para>
            <para>Deletes all the objects in the NC. This option is valid only for read-only NCs with no source.</para>
            <para>DS_REPDEL_REF_OK</para>
            <para>Allows deletion of a read-only replica even if it sources other read-only replicas.</para>
            <para>DS_REPDEL_WRITEABLE</para>
            <para>Signifies that the replica deleted can be written to.</para></param>
            <returns>
            <para>If the function succeeds, the return value is <c>ERROR_SUCCESS</c>.</para>
            <para>
            If the function fails, the return value is a standard Win32 API error or <c>ERROR_INVALID_PARAMETER</c> if a parameter is invalid.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsReplicaFreeInfo(Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE,System.IntPtr)">
            <summary>
            The <c>DsReplicaFreeInfo</c> function frees the replication state data structure allocated by the DsReplicaGetInfo or
            DsReplicaGetInfo2 functions.
            </summary>
            <param name="InfoType">Contains one of the DS_REPL_INFO_TYPE values that specifies the type of replication data structure contained in pInfo. This must
            be the same value passed to the DsReplicaGetInfo or DsReplicaGetInfo2 function when the structure was allocated.</param>
            <param name="pInfo">Pointer to the replication data structure allocated by the DsReplicaGetInfo or DsReplicaGetInfo2 functions.</param>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsReplicaGetInfo2W(Vanara.PInvoke.NTDSApi.SafeDsHandle,Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE,System.String,System.Nullable{System.Guid},System.String,System.String,Vanara.PInvoke.NTDSApi.DsReplInfoFlags,System.UInt32,Vanara.PInvoke.NTDSApi.SafeDsReplicaInfo@)">
            <summary>
            The <c>DsReplicaGetInfo2</c> function retrieves replication state data from the directory service. This function allows paging of
            results in cases where there are more than 1000 entries to retrieve.
            </summary>
            <param name="hDS">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="InfoType">Contains one of the DS_REPL_INFO_TYPE values that specifies the type of replication data to retrieve. This value also determines
            which type of structure is returned in ppInfo.</param>
            <param name="pszObject"><para>
            Pointer to a constant null-terminated Unicode string that identifies the object to retrieve replication data for. The meaning of
            this parameter depends on the value of the InfoType parameter. The following are possible value codes.
            </para>
            <para>DS_REPL_INFO_NEIGHBORS</para>
            <para>pszObject identifies the naming context for which replication neighbors are requested.</para>
            <para>DS_REPL_INFO_CURSORS_FOR_NC</para>
            <para>pszObject identifies the naming context for which replication cursors are requested.</para>
            <para>DS_REPL_INFO_METADATA_FOR_OBJ</para>
            <para>pszObject identifies the object for which replication metadata is requested.</para>
            <para>DS_REPL_INFO_KCC_DSA_CONNECT_FAILURES</para>
            <para>pszObject must be <c>NULL</c>.</para>
            <para>DS_REPL_INFO_KCC_DSA_LINK_FAILURES</para>
            <para>pszObject must be <c>NULL</c>.</para>
            <para>DS_REPL_INFO_PENDING_OPS</para>
            <para>pszObject must be <c>NULL</c>.</para>
            <para>DS_REPL_INFO_METADATA_FOR_ATTR_VALUE</para>
            <para>pszObject identifies the object for which attribute replication metadata is requested.</para>
            <para>DS_REPL_INFO_CURSORS_2_FOR_NC</para>
            <para>DS_REPL_INFO_CURSORS_3_FOR_NC</para>
            <para>DS_REPL_INFO_METADATA_2_FOR_OBJ</para>
            <para>pszObject identifies the object for which replication metadata is requested.</para>
            <para>DS_REPL_INFO_METADATA_2_FOR_ATTR_VALUE</para>
            <para>pszObject identifies the object for which attribute replication metadata is requested.</para></param>
            <param name="puuidForSourceDsaObjGuid">Pointer to a <c>GUID</c> value that identifies a specific replication source. If this parameter is not <c>NULL</c> and the
            InfoType parameter contains <c>DS_REPL_INFO_NEIGHBORS</c>, only neighbor data for the source corresponding to the nTDSDSA object
            with the given <c>objectGuid</c> in the directory is returned. This parameter is ignored if <c>NULL</c> or if the InfoType
            parameter is anything other than <c>DS_REPL_INFO_NEIGHBORS</c>.</param>
            <param name="pszAttributeName"><para>
            Pointer to a null-terminated Unicode string that contains the name of the specific attribute to retrieve replication data for.
            </para>
            <para>This parameter is only used if the InfoType parameter contains one of the following values.</para>
            <para>DS_REPL_INFO_METADATA_FOR_ATTR_VALUE</para>
            <para>DS_REPL_INFO_METADATA_2_FOR_ATTR_VALUE</para></param>
            <param name="pszValue">Pointer to a null-terminated Unicode string that contains the distinguished name value to match. If the requested attribute is a
            distinguished name type value, this function return the attributes that contain the specified value.</param>
            <param name="dwFlags"><para>Contains a set of flags that modify the behavior of the function. This parameter can be zero or the following value.</para>
            <para>DS_REPL_INFO_FLAG_IMPROVE_LINKED_ATTRS</para>
            <para>
            Causes the attribute metadata to account for metadata on the attribute's linked values. The resulting vector represents changes
            for all attributes. This modified vector is useful for clients that expect all attributes and metadata to be included in the
            attribute metadata vector.
            </para></param>
            <param name="dwEnumerationContext"><para>Contains the index of the next entry to retrieve. This parameter must be set to zero the first time this function is called.</para>
            <para>This parameter is only used if the InfoType parameter contains one of the following values.</para>
            <para>DS_REPL_INFO_CURSORS_2_FOR_NC</para>
            <para>DS_REPL_INFO_CURSORS_3_FOR_NC</para>
            <para>DS_REPL_INFO_METADATA_FOR_ATTR_VALUE</para>
            <para>DS_REPL_INFO_METADATA_2_FOR_ATTR_VALUE</para>
            <para>
            This function will retrieve a maximum of 1000 entries on each call. If after calling this function, more entries are available,
            the <c>dwEnumerationContext</c> member of the retrieved structure will contain the index of the next entry to retrieve. The
            <c>dwEnumerationContext</c> member of the retrieved structure is then used as the dwEnumerationContext parameter in the next call
            to this function. When all of the entries have been retrieved, the <c>dwEnumerationContext</c> member of the retrieved structure
            will contain -1. If -1 is passed for this parameter, this function will return <c>ERROR_NO_MORE_ITEMS</c>.
            </para></param>
            <param name="ppInfo"><para>
            Address of a structure pointer that receives the requested data. The value of the InfoType parameter determines the format of
            this structure. For more information and a list of possible InfoType values and the corresponding structure types, see DS_REPL_INFO_TYPE.
            </para>
            <para>The caller must free this memory when it is no longer required by calling DsReplicaFreeInfo.</para></param>
            <returns>
            Returns <c>ERROR_SUCCESS</c> if successful or a Win32 or RPC error otherwise. The following are possible error codes.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsReplicaGetInfoW(Vanara.PInvoke.NTDSApi.SafeDsHandle,Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE,System.String,System.Guid@,Vanara.PInvoke.NTDSApi.SafeDsReplicaInfo@)">
            <summary>
            The <c>DsReplicaGetInfo</c> function retrieves replication state data from the directory service.
            </summary>
            <param name="hDS">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="InfoType"><para>
            Contains one of the DS_REPL_INFO_TYPE values that specifies the type of replication data to retrieve. This value also determines
            which type of structure is returned in ppInfo.
            </para>
            <para>
            Only the following values are supported for this function. If other data types are required, the DsReplicaGetInfo2 function must
            be used.
            </para>
            <para>DS_REPL_INFO_NEIGHBORS</para>
            <para>DS_REPL_INFO_CURSORS_FOR_NC</para>
            <para>DS_REPL_INFO_METADATA_FOR_OBJ</para>
            <para>DS_REPL_INFO_KCC_DSA_CONNECT_FAILURES</para>
            <para>DS_REPL_INFO_KCC_DSA_LINK_FAILURES</para>
            <para>DS_REPL_INFO_PENDING_OPS</para></param>
            <param name="pszObject"><para>
            Pointer to a constant null-terminated Unicode string that identifies the object to retrieve replication data for. The meaning of
            this parameter depends on the value of the InfoType parameter. The following are possible value codes.
            </para>
            <para>DS_REPL_INFO_NEIGHBORS</para>
            <para>pszObject identifies the naming context for which replication neighbors are requested.</para>
            <para>DS_REPL_INFO_CURSORS_FOR_NC</para>
            <para>pszObject identifies the naming context for which replication cursors are requested.</para>
            <para>DS_REPL_INFO_METADATA_FOR_OBJ</para>
            <para>pszObject identifies the object for which replication metadata is requested.</para>
            <para>DS_REPL_INFO_KCC_DSA_CONNECT_FAILURES</para>
            <para>pszObject must be <c>NULL</c>.</para>
            <para>DS_REPL_INFO_KCC_DSA_LINK_FAILURES</para>
            <para>pszObject must be <c>NULL</c>.</para>
            <para>DS_REPL_INFO_PENDING_OPS</para>
            <para>pszObject must be <c>NULL</c>.</para></param>
            <param name="puuidForSourceDsaObjGuid">Pointer to a <c>GUID</c> value that identifies a specific replication source. If this parameter is not <c>NULL</c> and the
            InfoType parameter contains <c>DS_REPL_INFO_NEIGHBORS</c>, only neighbor data for the source corresponding to the nTDSDSA object
            with the given <c>objectGuid</c> in the directory is returned. This parameter is ignored if <c>NULL</c> or if the InfoType
            parameter is anything other than <c>DS_REPL_INFO_NEIGHBORS</c>.</param>
            <param name="ppInfo"><para>
            Address of a structure pointer that receives the requested data. The value of the InfoType parameter determines the format of
            this structure. For more information and list of possible InfoType values and the corresponding structure types, see DS_REPL_INFO_TYPE.
            </para>
            <para>The caller must free this memory when it is no longer required by calling DsReplicaFreeInfo.</para></param>
            <returns>
            Returns <c>ERROR_SUCCESS</c> if successful or a Win32 or RPC error otherwise. The following are possible error codes.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsReplicaModify(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,System.Guid@,System.String,System.String,Vanara.PInvoke.NTDSApi.SCHEDULE,Vanara.PInvoke.NTDSApi.DsReplNeighborFlags,Vanara.PInvoke.NTDSApi.DsReplModFieldFlags,Vanara.PInvoke.NTDSApi.DsReplModOptions)">
            <summary>
            The <c>DsReplicaModify</c> function modifies an existing replication source reference for a destination naming context.
            </summary>
            <param name="hDS">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="NameContext">Pointer to a constant null-terminated string that specifies the distinguished name (DN) of the destination naming context (NC).</param>
            <param name="pUuidSourceDsa">Pointer to the UUID of the source directory system agent (DSA). This parameter may be null if ModifyFields does not include
            <c>DS_REPMOD_UPDATE_ADDRESS</c> and SourceDsaAddress is not <c>NULL</c>.</param>
            <param name="TransportDn">Reserved for future use. Any value other than <c>NULL</c> results in <c>ERROR_NOT_SUPPORTED</c> being returned.</param>
            <param name="SourceDsaAddress">Pointer to a constant null-terminated Unicode string that specifies the transport-specific address of the source DSA. This
            parameter is ignored if pUuidSourceDsa is not <c>NULL</c> and ModifyFields does not include <c>DS_REPMOD_UPDATE_ADDRESS</c>.</param>
            <param name="pSchedule">Pointer to a SCHEDULE structure that contains the replication schedule data for the replication source. This parameter is
            optional and can be <c>NULL</c> if not used. This parameter is required if ModifyFields contains the
            <c>DS_REPMOD_UPDATE_SCHEDULE</c> flag.</param>
            <param name="ReplicaFlags"><para>This parameter is used to control replication behavior and can take the following values.</para>
            <para>DS_REPL_NBR_SYNC_ON_STARTUP</para>
            <para>
            Replication of this naming context from this source is attempted when the destination server is booted. This normally only
            applies to intra-site neighbors.
            </para>
            <para>DS_REPL_NBR_DO_SCHEDULED_SYNCS</para>
            <para>
            Perform replication on a schedule. This flag is normally set unless the schedule for this naming context and source is "never",
            that is, the empty schedule.
            </para>
            <para>DS_REPL_NBR_TWO_WAY_SYNC</para>
            <para>
            If set, indicates that when inbound replication is complete, the destination server must tell the source server to synchronize in
            the reverse direction. This feature is used in dial-up scenarios where only one of the two servers can initiate a dial-up
            connection. For example, this option would be used in a corporate headquarters and branch office, where the branch office
            connects to the corporate headquarters over the Internet by means of a dial-up ISP connection.
            </para>
            <para>DS_REPL_NBR_IGNORE_CHANGE_NOTIFICATIONS</para>
            <para>
            This neighbor is set to disable notification-based synchronization. Within a site, domain controllers synchronize with each other
            based on notifications when changes occur. This setting prevents this neighbor from performing a synchronization triggered by a
            notification. The neighbor will still do synchronization based on its schedule or in response to manually requested synchronization.
            </para>
            <para>DS_REPL_NBR_DISABLE_SCHEDULED_SYNC</para>
            <para>
            This neighbor is set to not perform synchronization based on its schedule. The only way this neighbor will perform
            synchronization is in response to change notifications or to manually requested synchronization.
            </para>
            <para>DS_REPL_NBR_COMPRESS_CHANGES</para>
            <para>
            Changes received from this source are to be compressed. This is normally set if, and only if, the source server is in a different site.
            </para>
            <para>DS_REPL_NBR_NO_CHANGE_NOTIFICATIONS</para>
            <para>
            No change notifications should be received from this source. This is normally set if, and only if, the source server is in a
            different site.
            </para></param>
            <param name="ModifyFields"><para>
            Specifies what fields should be modified. At least one field must be specified in ModifyFields. This parameter can be a
            combination of the following values.
            </para>
            <para>DS_REPMOD_UPDATE_ADDRESS</para>
            <para>Updates the address associated with the referenced server.</para>
            <para>DS_REPMOD_UPDATE_FLAGS</para>
            <para>Updates the flags associated with the replica.</para>
            <para>DS_REPMOD_UPDATE_RESULT</para>
            <para>Not used. Specifying updates of result values is not currently supported. Result values default to 0.</para>
            <para>DS_REPMOD_UPDATE_SCHEDULE</para>
            <para>Updates the periodic replication schedule associated with the replica.</para>
            <para>DS_REPMOD_UPDATE_TRANSPORT</para>
            <para>Updates the transport associated with the replica.</para></param>
            <param name="Options"><para>Passes additional data used to process the request. This parameter can be a combination of the following values.</para>
            <para>DS_REPMOD_ASYNCHRONOUS_OPERATION</para>
            <para>Performs this operation asynchronously.</para>
            <para>DS_REPMOD_WRITEABLE</para>
            <para>Indicates that the replica being modified can be written to.</para></param>
            <returns>
            <para>If the function succeeds, the return value is <c>ERROR_SUCCESS</c>.</para>
            <para>If the function fails, the return value can be one of the following.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsReplicaModify(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,System.IntPtr,System.String,System.String,Vanara.PInvoke.NTDSApi.SCHEDULE,Vanara.PInvoke.NTDSApi.DsReplNeighborFlags,Vanara.PInvoke.NTDSApi.DsReplModFieldFlags,Vanara.PInvoke.NTDSApi.DsReplModOptions)">
            <summary>
            The <c>DsReplicaModify</c> function modifies an existing replication source reference for a destination naming context.
            </summary>
            <param name="hDS">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="NameContext">Pointer to a constant null-terminated string that specifies the distinguished name (DN) of the destination naming context (NC).</param>
            <param name="pUuidSourceDsa">Pointer to the UUID of the source directory system agent (DSA). This parameter may be null if ModifyFields does not include
            <c>DS_REPMOD_UPDATE_ADDRESS</c> and SourceDsaAddress is not <c>NULL</c>.</param>
            <param name="TransportDn">Reserved for future use. Any value other than <c>NULL</c> results in <c>ERROR_NOT_SUPPORTED</c> being returned.</param>
            <param name="SourceDsaAddress">Pointer to a constant null-terminated Unicode string that specifies the transport-specific address of the source DSA. This
            parameter is ignored if pUuidSourceDsa is not <c>NULL</c> and ModifyFields does not include <c>DS_REPMOD_UPDATE_ADDRESS</c>.</param>
            <param name="pSchedule">Pointer to a SCHEDULE structure that contains the replication schedule data for the replication source. This parameter is
            optional and can be <c>NULL</c> if not used. This parameter is required if ModifyFields contains the
            <c>DS_REPMOD_UPDATE_SCHEDULE</c> flag.</param>
            <param name="ReplicaFlags"><para>This parameter is used to control replication behavior and can take the following values.</para>
            <para>DS_REPL_NBR_SYNC_ON_STARTUP</para>
            <para>
            Replication of this naming context from this source is attempted when the destination server is booted. This normally only
            applies to intra-site neighbors.
            </para>
            <para>DS_REPL_NBR_DO_SCHEDULED_SYNCS</para>
            <para>
            Perform replication on a schedule. This flag is normally set unless the schedule for this naming context and source is "never",
            that is, the empty schedule.
            </para>
            <para>DS_REPL_NBR_TWO_WAY_SYNC</para>
            <para>
            If set, indicates that when inbound replication is complete, the destination server must tell the source server to synchronize in
            the reverse direction. This feature is used in dial-up scenarios where only one of the two servers can initiate a dial-up
            connection. For example, this option would be used in a corporate headquarters and branch office, where the branch office
            connects to the corporate headquarters over the Internet by means of a dial-up ISP connection.
            </para>
            <para>DS_REPL_NBR_IGNORE_CHANGE_NOTIFICATIONS</para>
            <para>
            This neighbor is set to disable notification-based synchronization. Within a site, domain controllers synchronize with each other
            based on notifications when changes occur. This setting prevents this neighbor from performing a synchronization triggered by a
            notification. The neighbor will still do synchronization based on its schedule or in response to manually requested synchronization.
            </para>
            <para>DS_REPL_NBR_DISABLE_SCHEDULED_SYNC</para>
            <para>
            This neighbor is set to not perform synchronization based on its schedule. The only way this neighbor will perform
            synchronization is in response to change notifications or to manually requested synchronization.
            </para>
            <para>DS_REPL_NBR_COMPRESS_CHANGES</para>
            <para>
            Changes received from this source are to be compressed. This is normally set if, and only if, the source server is in a different site.
            </para>
            <para>DS_REPL_NBR_NO_CHANGE_NOTIFICATIONS</para>
            <para>
            No change notifications should be received from this source. This is normally set if, and only if, the source server is in a
            different site.
            </para></param>
            <param name="ModifyFields"><para>
            Specifies what fields should be modified. At least one field must be specified in ModifyFields. This parameter can be a
            combination of the following values.
            </para>
            <para>DS_REPMOD_UPDATE_ADDRESS</para>
            <para>Updates the address associated with the referenced server.</para>
            <para>DS_REPMOD_UPDATE_FLAGS</para>
            <para>Updates the flags associated with the replica.</para>
            <para>DS_REPMOD_UPDATE_RESULT</para>
            <para>Not used. Specifying updates of result values is not currently supported. Result values default to 0.</para>
            <para>DS_REPMOD_UPDATE_SCHEDULE</para>
            <para>Updates the periodic replication schedule associated with the replica.</para>
            <para>DS_REPMOD_UPDATE_TRANSPORT</para>
            <para>Updates the transport associated with the replica.</para></param>
            <param name="Options"><para>Passes additional data used to process the request. This parameter can be a combination of the following values.</para>
            <para>DS_REPMOD_ASYNCHRONOUS_OPERATION</para>
            <para>Performs this operation asynchronously.</para>
            <para>DS_REPMOD_WRITEABLE</para>
            <para>Indicates that the replica being modified can be written to.</para></param>
            <returns>
            <para>If the function succeeds, the return value is <c>ERROR_SUCCESS</c>.</para>
            <para>If the function fails, the return value can be one of the following.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsReplicaSync(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,System.Guid@,Vanara.PInvoke.NTDSApi.DsReplSyncOptions)">
            <summary>
            The <c>DsReplicaSync</c> function synchronizes a destination naming context (NC) with one of its sources.
            </summary>
            <param name="hDS">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="NameContext">Pointer to a constant null-terminated string that specifies the distinguished name of the destination NC.</param>
            <param name="pUuidDsaSrc">Pointer to the UUID of a source that replicates to the destination NC.</param>
            <param name="Options"><para>Passes additional data used to process the request. This parameter can be a combination of the following values.</para>
            <para>DS_REPSYNC_ADD_REFERENCE</para>
            <para>
            Causes the source directory system agent (DSA) to verify that the local DSA is present in the source replicates-to list. If not,
            the local DSA is added. This ensures that the source sends change notifications.
            </para>
            <para>DS_REPSYNC_ALL_SOURCES</para>
            <para>This value is not supported.</para>
            <para>
              <c>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista and Windows Server 2003:</c> Synchronizes from all sources.
            </para>
            <para>DS_REPSYNC_ASYNCHRONOUS_OPERATION</para>
            <para>Performs this operation asynchronously.</para>
            <para>
              <c>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista and Windows Server 2003:</c> Required when using <c>DS_REPSYNC_ALL_SOURCES</c>.
            </para>
            <para>DS_REPSYNC_FORCE</para>
            <para>Synchronizes even if the link is currently disabled.</para>
            <para>DS_REPSYNC_FULL</para>
            <para>Synchronizes starting from the first Update Sequence Number (USN).</para>
            <para>DS_REPSYNC_INTERSITE_MESSAGING</para>
            <para>Synchronizes using an ISM.</para>
            <para>DS_REPSYNC_NO_DISCARD</para>
            <para>Does not discard this synchronization request, even if a similar synchronization is pending.</para>
            <para>DS_REPSYNC_PERIODIC</para>
            <para>Indicates this operation is a periodic synchronization request as scheduled by the administrator.</para>
            <para>DS_REPSYNC_URGENT</para>
            <para>Indicates this operation is a notification of an update marked urgent.</para>
            <para>DS_REPSYNC_WRITEABLE</para>
            <para>Replica is writable. Otherwise, it is read-only.</para></param>
            <returns>
            <para>If the function performs its operation successfully, the return value is <c>ERROR_SUCCESS</c>.</para>
            <para>If the function fails, the return value is one of the standard Win32 API errors.</para>
            </returns>
            <remarks>
            <para>
            The server that <c>DsReplicaSync</c> executes on is called the destination. The destination naming context is brought up-to-date
            with respect to a source system, identified by the UUID of the source system NTDS Settings object. The destination system must
            already be configured so that the source system is one of the systems from which it receives replication data.
            </para>
            <para>
              <c>Note</c> Forcing manual synchronization can prevent the directory service from properly prioritizing replication operations.
            For example, synchronizing a new user may preempt an urgent synchronization performed to provide access to a recently locked out
            user or to add a new trust password. If you call this API often, you can flood the network with requests, which can interfere
            with other replication operations. For this reason, it is strongly recommended that this function be used only for single-use
            scenarios rather than incorporating it into an application that would use it on a regular basis.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsReplicaSyncAll(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,Vanara.PInvoke.NTDSApi.DsReplSyncAllFlags,Vanara.PInvoke.NTDSApi.SyncUpdateProc,System.IntPtr,Vanara.PInvoke.NTDSApi.SafeDS_REPSYNCALL_ERRINFOArray@)">
            <summary>
            The <c>DsReplicaSyncAll</c> function synchronizes a server with all other servers, using transitive replication, as necessary. By
            default, <c>DsReplicaSyncAll</c> synchronizes the server with all other servers in its site; however, you can also use it to
            synchronize across site boundaries.
            </summary>
            <param name="hDS">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="pszNameContext">Pointer to a null-terminated string that specifies the distinguished name of the naming context to synchronize. The
            pszNameContext parameter is optional; if its value is <c>NULL</c>, the configuration naming context is replicated.</param>
            <param name="ulFlags"><para>Passes additional data used to process the request. This parameter can be a combination of the following values.</para>
            <para>DS_REPSYNCALL_ABORT_IF_SERVER_UNAVAILABLE</para>
            <para>
            Generates a fatal error if any server cannot be contacted or if any server is unreachable due to a disconnected or broken topology.
            </para>
            <para>DS_REPSYNCALL_CROSS_SITE_BOUNDARIES</para>
            <para>
            Synchronizes across site boundaries. By default, <c>DsReplicaSyncAll</c> attempts to synchronize only with DCs in the same site
            as the home system. Set this flag to attempt to synchronize with all DCs in the enterprise forest. However, the DCs can be
            synchronized only if connected by a synchronous (RPC) transport.
            </para>
            <para>DS_REPSYNCALL_DO_NOT_SYNC</para>
            <para>Disables all synchronization. The topology is still analyzed, and unavailable or unreachable servers are still identified.</para>
            <para>DS_REPSYNCALL_ID_SERVERS_BY_DN</para>
            <para>In the event of a non-fatal error, returns server distinguished names (DN) instead of their GUID DNS names.</para>
            <para>DS_REPSYNCALL_NO_OPTIONS</para>
            <para>This option has no effect.</para>
            <para>DS_REPSYNCALL_PUSH_CHANGES_OUTWARD</para>
            <para>
            Pushes changes from the home server out to all partners using transitive replication. This reverses the direction of replication,
            and the order of execution of the replication sets from the usual "pulling" mode of execution.
            </para>
            <para>DS_REPSYNCALL_SKIP_INITIAL_CHECK</para>
            <para>
            Assumes that all servers are responding. This speeds operation of the <c>DsReplicaSyncAll</c> function, but if some servers are
            not responding, some transitive replications may be blocked.
            </para>
            <para>DS_REPSYNCALL_SYNC_ADJACENT_SERVERS_ONLY</para>
            <para>Disables transitive replication. Synchronization is performed only with adjacent servers.</para></param>
            <param name="pFnCallBack">Pointer to an application-defined SyncUpdateProc function called by the <c>DsReplicaSyncAll</c> function when it encounters an
            error, initiates synchronization of two servers, completes synchronization of two servers, or finishes synchronization of all the
            servers in the site.</param>
            <param name="pCallbackData">Pointer to application-defined data passed as the first argument of the SyncUpdateProc callback function pointed to by the
            pFnCallBack parameter.</param>
            <param name="pErrors">A NULL-terminated array of pointers to DS_REPSYNCALL_ERRINFO structures that contain errors that occurred during synchronization.
            The memory used to hold both the array of pointers and the MsCS\mscs\clusctl_resource_type_get_private_property_fmts.xml data is
            allocated as a single block of memory and should be freed when no longer required by a single call to <c>LocalFree</c> with the
            pointer value returned in pErrors used as the argument.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>ERROR_SUCCESS</c>.</para>
            <para>If the function fails, the return value is as follows.</para>
            </returns>
            <remarks>
            <para>
            The <c>DsReplicaSyncAll</c> function attempts to bind to all servers before generating a topology to synchronize from. If a
            server cannot be contacted, the function excludes that server from the topology and attempts to work around it. Setting the
            <c>DS_REPSYNCALL_SKIP_INITIAL_CHECK</c> flag in ulFlags bypasses the initial binding.
            </para>
            <para>
            If a server cannot be contacted, the <c>DsReplicaSyncAll</c> function attempts to route around it and replicate from as many
            servers as possible, unless <c>DS_REPSYNCALL_ABORT_IF_SERVER_UNAVAILABLE</c> is set in ulFlags.
            </para>
            <para>
            The <c>DsReplicaSyncAll</c> function can use the callback function pointed to by pFnCallBack to keep an end user informed about
            the current status of the replication. Execution of the <c>DsReplicaSyncAll</c> function pauses when it calls the function
            pointed to by pFnCallBack. If the return value from the callback function is <c>TRUE</c>, replication continues; otherwise, the
            <c>DsReplicaSyncAll</c> function terminates replication.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsReplicaUpdateRefs(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,System.String,System.Guid@,Vanara.PInvoke.NTDSApi.DsReplUpdateOptions)">
            <summary>
            The <c>DsReplicaUpdateRefs</c> function adds or removes a replication reference for a destination from a source naming context.
            </summary>
            <param name="hDS">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="NameContext">Pointer to a constant null-terminated string that specifies the distinguished name of the source naming context.</param>
            <param name="DsaDest">Pointer to a constant null-terminated string that specifies the transport-specific address of the destination directory system agent.</param>
            <param name="pUuidDsaDest">Pointer to a <c>UUID</c> value that contains the destination directory system agent.</param>
            <param name="Options"><para>
            Contains a set of flags that provide additional data used to process the request. This can be zero or a combination of one or
            more of the following values.
            </para>
            <para>DS_REPUPD_ADD_REFERENCE</para>
            <para>A reference to the destination is added to the source server.</para>
            <para>DS_REPUPD_ASYNCHRONOUS_OPERATION</para>
            <para>The operation is performed asynchronously.</para>
            <para>DS_REPUPD_DELETE_REFERENCE</para>
            <para>A reference to the destination is removed from the source server.</para>
            <para>DS_REPUPD_WRITEABLE</para>
            <para>The reference to the replica added or removed is writable. Otherwise, it is read-only.</para></param>
            <returns>
            <para>If the function succeeds, <c>ERROR_SUCCESS</c> is returned.</para>
            <para>If the function fails, the return value can be one of the following.</para>
            </returns>
            <remarks>
            If both <c>DS_REPUPD_ADD_REFERENCE</c> and <c>DS_REPUPD_DELETE_REFERENCE</c> are set in the Options parameter, a reference to the
            destination is added if one does not already exist on the server. If a reference to the destination already exists, the reference
            is updated.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsReplicaVerifyObjects(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,System.Guid@,Vanara.PInvoke.NTDSApi.DsReplVerifyOptions)">
            <summary>
            The <c>DsReplicaVerifyObjects</c> function verifies all objects for a naming context with a source.
            </summary>
            <param name="hDS">Contains a directory service handle obtained from either the DSBind, DSBindWithCred, or DsBindWithSpn function.</param>
            <param name="NameContext">Pointer to a null-terminated string that contains the distinguished name of the naming context.</param>
            <param name="pUuidDsaSrc">Pointer to a <c>UUID</c> value that contains the <c>objectGuid</c> of the directory system agent object.</param>
            <param name="ulOptions"><para>Contains a set of flags that modify the behavior of the function. This can be zero or the following value.</para>
            <para>DS_EXIST_ADVISORY_MODE</para>
            <para>Do not delete objects in response to this function.</para></param>
            <returns>
            Returns <c>ERROR_SUCCESS</c> if successful or a Win32 error otherwise. Possible error values include the following.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsServerRegisterSpn(Vanara.PInvoke.NTDSApi.DS_SPN_WRITE_OP,System.String,System.String)">
            <summary>
            <para>
            The <c>DsServerRegisterSpn</c> function composes two SPNs for a host-based service. The names are based on the DNS and NetBIOS
            names of the local computer. The function modifies the <c>servicePrincipalName</c> attribute of either a specified account or of
            the account associated with the calling thread. The function either registers or unregisters the SPNs.
            </para>
            <para>
            A host-based service is a service instance that provides services identified with its host computer, as distinguished from a
            replicable service where clients have no preference which host computer a service instance runs on.
            </para>
            </summary>
            <param name="Operation"><para>Specifies what operation <c>DsServerRegisterSpn</c> should perform. This parameter can have one of the following values.</para>
            <para>DS_SPN_ADD_SPN_OP</para>
            <para>Adds the SPNs to the user or computer account.</para>
            <para>DS_SPN_DELETE_SPN_OP</para>
            <para>Deletes the specified SPNs from the account.</para>
            <para>DS_SPN_REPLACE_SPN_OP</para>
            <para>Removes all SPNs currently registered on the user or computer account and replaces them with the new SPNs.</para></param>
            <param name="ServiceClass">Pointer to a constant null-terminated string specifying the class of the service. This parameter may be any string unique to that
            service; either the protocol name (for example, ldap) or the string form of a GUID will work.</param>
            <param name="UserObjectDN">Pointer to a constant null-terminated string specifying the distinguished name of a user or computer account object to write the
            SPNs to. If this parameter is <c>NULL</c>, <c>DsServerRegisterSpn</c> writes to the account object of the primary or impersonated
            user associated with the calling thread. If the thread is running in the security context of the LocalSystem account, the
            function writes to the account object of the local computer.</param>
            <returns>
            If the function successfully registers one or more SPNs, it returns <c>ERROR_SUCCESS</c>. Modification is performed permissively,
            so that adding a value that already exists does not return an error.
            </returns>
            <remarks>
            <para>The two SPNs composed by the <c>DsServerRegisterSpn</c> function have the following format:</para>
            <para>
            In one SPN, the host computer is the fully qualified DNS name of the local computer. In the other SPN, the host component is the
            NetBIOS name of the local computer.
            </para>
            <para>
            In most cases, the <c>DsServerRegisterSpn</c> caller must have domain administrator privileges to successfully modify the
            <c>servicePrincipalName</c> attribute of an account object. The exception to this rule is if the calling thread is running under
            the LocalSystem account, <c>DsServerRegisterSpn</c> is allowed if the UserObjectDN parameter is either <c>NULL</c> or specifies
            the distinguished name of the local computer account.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsUnBind(System.IntPtr@)">
            <summary>
            The <c>DsUnBind</c> function finds an RPC session with a domain controller and unbinds a handle to the directory service (DS).
            </summary>
            <param name="phDS">Pointer to a bind handle to the directory service. This handle is provided by a call to DsBind, DsBindWithCred, or DsBindWithSpn.</param>
            <returns><c>NO_ERROR</c></returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsWriteAccountSpn(Vanara.PInvoke.NTDSApi.SafeDsHandle,Vanara.PInvoke.NTDSApi.DS_SPN_WRITE_OP,System.String,System.UInt32,Vanara.PInvoke.NTDSApi.SpnArrayHandle)">
            <summary>
            The <c>DsWriteAccountSpn</c> function writes an array of service principal names (SPNs) to the <c>servicePrincipalName</c>
            attribute of a specified user or computer account object in Active Directory Domain Services. The function can either register or
            unregister the SPNs.
            </summary>
            <param name="hDS">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="Operation">Contains one of the DS_SPN_WRITE_OP values that specifies the operation that <c>DsWriteAccountSpn</c> will perform.</param>
            <param name="pszAccount">Pointer to a constant null-terminated string that specifies the distinguished name of a user or computer object in Active
            Directory Domain Services. The caller must have write access to the <c>servicePrincipalName</c> property of this object.</param>
            <param name="cSpn">Specifies the number of SPNs in rpszSpn. If this value is zero, and Operation contains <c>DS_SPN_REPLACE_SPN_OP</c>, the function
            removes all values from the <c>servicePrincipalName</c> attribute of the specified account.</param>
            <param name="rpszSpn">Pointer to an array of constant null-terminated strings that specify the SPNs to be added to or removed from the account
            identified by the pszAccount parameter. The DsGetSpn function is used to compose SPNs for a service.</param>
            <returns>
            Returns <c>ERROR_SUCCESS</c> if successful or a Win32, RPC or directory service error if unsuccessful.
            </returns>
            <remarks>
            <para>
            The <c>DsWriteAccountSpn</c> function registers the SPNs for one or more instances of a service. SPNs are used by clients, in
            conjunction with a trusted authentication service, to authenticate the service. To protect against security attacks where an
            application or service fraudulently registers an SPN that identifies some other service, the default DACL on user and computer
            accounts allows only domain administrators to register SPNs in most cases.
            </para>
            <para>
            One exception to this rule is that a service running under the LocalSystem account can call <c>DsWriteAccountSpn</c> to register
            a simple SPN of the form "ServiceClass/Host:Port" if the host specified in the SPN is the DNS or NetBIOS name of the computer on
            which the service is running.
            </para>
            <para>
            Another exception is that the default DACL on computer accounts allows callers to register SPNs on themselves, subject to certain
            constraints. For example, a computer account can have SPNs relative to its computername, of the form "host/&lt;computername&gt;".
            Because the computername is contained in the SPN, the SPN is allowable.
            </para>
            <para>
            None of the rules above apply if the DSA is configured to allow any SPN to be written. This reduces security, however, so it is
            not recommended.
            </para>
            <para>
            SPNs passed to <c>DsWriteAccountSpn</c> are actually added to the <c>Service-Principal-Name</c> attribute of the computer object
            in pszAccount. This call is made using RPC to the domain controller where the account object is stored so it can securely enforce
            policy on what SPNs are allowed on the account. Using LDAP to write directly to the SPN property is not allowed; all writes must
            come through this RPC call. Reads using LDAP are allowed.
            </para>
            <para>Permissions required to set SPNs</para>
            <para>
            To write an arbitrary SPN on an account, the writer requires the "Write ServicePrincipalName" right, which is not granted by
            default to the person who created the account. That person has the 'Write validated SPN" right(present only on machine accounts).
            </para>
            <para>Below is a summary of rights per user on machine accounts:</para>
            <list type="table">
              <listheader>
                <term>User Type</term>
                <term>Rights</term>
              </listheader>
              <item>
                <term>Person creating the Account</term>
                <term>Write validated SPN</term>
              </item>
              <item>
                <term>Account Operators</term>
                <term>Write SPN and Write Validated SPN</term>
              </item>
              <item>
                <term>Authenticated Users</term>
                <term>None</term>
              </item>
              <item>
                <term>(self)</term>
                <term>Write Validated SPN</term>
              </item>
            </list>
            <para>
            On user accounts there is no "Validated SPN" property or "Write SPN" right. Rather, the "Write public information" property set
            grants the ability to create arbitrary SPNs.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DsReplicaGetInfo2W(Vanara.PInvoke.NTDSApi.SafeDsHandle,Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE,System.String,System.Guid*,System.String,System.String,Vanara.PInvoke.NTDSApi.DsReplInfoFlags,System.UInt32,Vanara.PInvoke.NTDSApi.SafeDsReplicaInfo@)">
            <summary>
            The <c>DsReplicaGetInfo2</c> function retrieves replication state data from the directory service. This function allows paging of
            results in cases where there are more than 1000 entries to retrieve.
            </summary>
            <param name="hDS">Contains a directory service handle obtained from either the DSBind or DSBindWithCred function.</param>
            <param name="InfoType">Contains one of the DS_REPL_INFO_TYPE values that specifies the type of replication data to retrieve. This value also determines
            which type of structure is returned in ppInfo.</param>
            <param name="pszObject"><para>
            Pointer to a constant null-terminated Unicode string that identifies the object to retrieve replication data for. The meaning of
            this parameter depends on the value of the InfoType parameter. The following are possible value codes.
            </para>
            <para>DS_REPL_INFO_NEIGHBORS</para>
            <para>pszObject identifies the naming context for which replication neighbors are requested.</para>
            <para>DS_REPL_INFO_CURSORS_FOR_NC</para>
            <para>pszObject identifies the naming context for which replication cursors are requested.</para>
            <para>DS_REPL_INFO_METADATA_FOR_OBJ</para>
            <para>pszObject identifies the object for which replication metadata is requested.</para>
            <para>DS_REPL_INFO_KCC_DSA_CONNECT_FAILURES</para>
            <para>pszObject must be <c>NULL</c>.</para>
            <para>DS_REPL_INFO_KCC_DSA_LINK_FAILURES</para>
            <para>pszObject must be <c>NULL</c>.</para>
            <para>DS_REPL_INFO_PENDING_OPS</para>
            <para>pszObject must be <c>NULL</c>.</para>
            <para>DS_REPL_INFO_METADATA_FOR_ATTR_VALUE</para>
            <para>pszObject identifies the object for which attribute replication metadata is requested.</para>
            <para>DS_REPL_INFO_CURSORS_2_FOR_NC</para>
            <para>DS_REPL_INFO_CURSORS_3_FOR_NC</para>
            <para>DS_REPL_INFO_METADATA_2_FOR_OBJ</para>
            <para>pszObject identifies the object for which replication metadata is requested.</para>
            <para>DS_REPL_INFO_METADATA_2_FOR_ATTR_VALUE</para>
            <para>pszObject identifies the object for which attribute replication metadata is requested.</para></param>
            <param name="puuidForSourceDsaObjGuid">Pointer to a <c>GUID</c> value that identifies a specific replication source. If this parameter is not <c>NULL</c> and the
            InfoType parameter contains <c>DS_REPL_INFO_NEIGHBORS</c>, only neighbor data for the source corresponding to the nTDSDSA object
            with the given <c>objectGuid</c> in the directory is returned. This parameter is ignored if <c>NULL</c> or if the InfoType
            parameter is anything other than <c>DS_REPL_INFO_NEIGHBORS</c>.</param>
            <param name="pszAttributeName"><para>
            Pointer to a null-terminated Unicode string that contains the name of the specific attribute to retrieve replication data for.
            </para>
            <para>This parameter is only used if the InfoType parameter contains one of the following values.</para>
            <para>DS_REPL_INFO_METADATA_FOR_ATTR_VALUE</para>
            <para>DS_REPL_INFO_METADATA_2_FOR_ATTR_VALUE</para></param>
            <param name="pszValue">Pointer to a null-terminated Unicode string that contains the distinguished name value to match. If the requested attribute is a
            distinguished name type value, this function return the attributes that contain the specified value.</param>
            <param name="dwFlags"><para>Contains a set of flags that modify the behavior of the function. This parameter can be zero or the following value.</para>
            <para>DS_REPL_INFO_FLAG_IMPROVE_LINKED_ATTRS</para>
            <para>
            Causes the attribute metadata to account for metadata on the attribute's linked values. The resulting vector represents changes
            for all attributes. This modified vector is useful for clients that expect all attributes and metadata to be included in the
            attribute metadata vector.
            </para></param>
            <param name="dwEnumerationContext"><para>Contains the index of the next entry to retrieve. This parameter must be set to zero the first time this function is called.</para>
            <para>This parameter is only used if the InfoType parameter contains one of the following values.</para>
            <para>DS_REPL_INFO_CURSORS_2_FOR_NC</para>
            <para>DS_REPL_INFO_CURSORS_3_FOR_NC</para>
            <para>DS_REPL_INFO_METADATA_FOR_ATTR_VALUE</para>
            <para>DS_REPL_INFO_METADATA_2_FOR_ATTR_VALUE</para>
            <para>
            This function will retrieve a maximum of 1000 entries on each call. If after calling this function, more entries are available,
            the <c>dwEnumerationContext</c> member of the retrieved structure will contain the index of the next entry to retrieve. The
            <c>dwEnumerationContext</c> member of the retrieved structure is then used as the dwEnumerationContext parameter in the next call
            to this function. When all of the entries have been retrieved, the <c>dwEnumerationContext</c> member of the retrieved structure
            will contain -1. If -1 is passed for this parameter, this function will return <c>ERROR_NO_MORE_ITEMS</c>.
            </para></param>
            <param name="ppInfo"><para>
            Address of a structure pointer that receives the requested data. The value of the InfoType parameter determines the format of
            this structure. For more information and a list of possible InfoType values and the corresponding structure types, see DS_REPL_INFO_TYPE.
            </para>
            <para>The caller must free this memory when it is no longer required by calling DsReplicaFreeInfo.</para></param>
            <returns>
            Returns <c>ERROR_SUCCESS</c> if successful or a Win32 or RPC error otherwise. The following are possible error codes.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DCInfoHandle">
            <summary>Provides a handle to a domain controller info structure.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DCInfoHandle.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NTDSApi.DCInfoHandle"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.DCInfoHandle.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DCInfoHandle.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DCInfoHandle.ToIEnum``1(System.UInt32)">
            <summary>Gets a list of stored structures from this handle.</summary>
            <typeparam name="T">The type of structure found in the list.</typeparam>
            <param name="count">The count.</param>
            <returns>The list of structures.</returns>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.IDsGetDCResult">
            <summary>Indicates that the structure can be passed to DsGetDomainControllerInfo.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_1">
            <summary>
            The <c>DS_DOMAIN_CONTROLLER_INFO_1</c> structure contains data about a domain controller. This structure is returned by the
            DsGetDomainControllerInfo function.
            </summary>
            <seealso cref="T:Vanara.PInvoke.NTDSApi.IDsGetDCResult" />
            <remarks>
            The DsGetDomainControllerInfo function can return different versions of this structure. For more information and a list of the
            currently supported versions, see the InfoLevel parameter of <c>DsGetDomainControllerInfo</c>.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_1.NetbiosName">
            <summary>
            Pointer to a null-terminated string that specifies the NetBIOS name of the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_1.DnsHostName">
            <summary>
            Pointer to a null-terminated string that specifies the DNS host name of the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_1.SiteName">
            <summary>
            Pointer to a null-terminated string that specifies the site to which the domain controller belongs.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_1.ComputerObjectName">
            <summary>
            Pointer to a null-terminated string that specifies the name of the computer object on the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_1.ServerObjectName">
            <summary>
            Pointer to a null-terminated string that specifies the name of the server object on the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_1.fIsPdc">
            <summary>
            A Boolean value that indicates whether or not this domain controller is the primary domain controller. If this value is TRUE,
            the domain controller is the primary domain controller; otherwise, the domain controller is not the primary domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_1.fDsEnabled">
            <summary>
            A Boolean value that indicates whether or not the domain controller is enabled. If this value is TRUE, the domain controller
            is enabled; otherwise, it is not enabled.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_2">
            <summary>
            The <c>DS_DOMAIN_CONTROLLER_INFO_2</c> structure contains data about a domain controller. This structure is returned by the
            DsGetDomainControllerInfo function.
            </summary>
            <seealso cref="T:Vanara.PInvoke.NTDSApi.IDsGetDCResult" />
            <remarks>
            The DsGetDomainControllerInfo function can return different versions of this structure. For more information and a list of the
            currently supported versions, see the InfoLevel parameter of <c>DsGetDomainControllerInfo</c>.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_2.NetbiosName">
            <summary>
            Pointer to a null-terminated string that specifies the NetBIOS name of the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_2.DnsHostName">
            <summary>
            Pointer to a null-terminated string that specifies the DNS host name of the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_2.SiteName">
            <summary>
            Pointer to a null-terminated string that specifies the site to which the domain controller belongs.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_2.SiteObjectName">
            <summary>
            Pointer to a null-terminated string that specifies the name of the site object on the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_2.ComputerObjectName">
            <summary>
            Pointer to a null-terminated string that specifies the name of the computer object on the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_2.ServerObjectName">
            <summary>
            Pointer to a null-terminated string that specifies the name of the server object on the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_2.NtdsDsaObjectName">
            <summary>
            Pointer to a null-terminated string that specifies the name of the NTDS DSA object on the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_2.fIsPdc">
            <summary>
            A Boolean value that indicates whether or not this domain controller is the primary domain controller. If this value is TRUE,
            the domain controller is the primary domain controller; otherwise, the domain controller is not the primary domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_2.fDsEnabled">
            <summary>
            A Boolean value that indicates whether or not the domain controller is enabled. If this value is TRUE, the domain controller
            is enabled; otherwise, it is not enabled.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_2.fIsGc">
            <summary>
            A Boolean value that indicates whether or not the domain controller is global catalog server. If this value is TRUE, the
            domain controller is a global catalog server; otherwise, it is not a global catalog server.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_2.SiteObjectGuid">
            <summary>
            Contains the GUID for the site object on the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_2.ComputerObjectGuid">
            <summary>
            Contains the GUID for the computer object on the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_2.ServerObjectGuid">
            <summary>
            Contains the GUID for the server object on the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_2.NtdsDsaObjectGuid">
            <summary>
            Contains the GUID for the NTDS DSA object on the domain controller.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_3">
            <summary>
            The <c>DS_DOMAIN_CONTROLLER_INFO_3</c> structure contains data about a domain controller. This structure is returned by the
            DsGetDomainControllerInfo function.
            </summary>
            <seealso cref="T:Vanara.PInvoke.NTDSApi.IDsGetDCResult" />
            <remarks>
            The DsGetDomainControllerInfo function can return different versions of this structure. For more information and a list of the
            currently supported versions, see the InfoLevel parameter of <c>DsGetDomainControllerInfo</c>.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_3.NetbiosName">
            <summary>
            Pointer to a null-terminated string that specifies the NetBIOS name of the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_3.DnsHostName">
            <summary>
            Pointer to a null-terminated string that specifies the DNS host name of the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_3.SiteName">
            <summary>
            Pointer to a null-terminated string that specifies the site to which the domain controller belongs.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_3.SiteObjectName">
            <summary>
            Pointer to a null-terminated string that specifies the name of the site object on the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_3.ComputerObjectName">
            <summary>
            Pointer to a null-terminated string that specifies the name of the computer object on the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_3.ServerObjectName">
            <summary>
            Pointer to a null-terminated string that specifies the name of the server object on the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_3.NtdsDsaObjectName">
            <summary>
            Pointer to a null-terminated string that specifies the name of the NTDS DSA object on the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_3.fIsPdc">
            <summary>
            A Boolean value that indicates whether or not this domain controller is the primary domain controller. If this value is TRUE,
            the domain controller is the primary domain controller; otherwise, the domain controller is not the primary domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_3.fDsEnabled">
            <summary>
            A Boolean value that indicates whether or not the domain controller is enabled. If this value is TRUE, the domain controller
            is enabled; otherwise, it is not enabled.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_3.fIsGc">
            <summary>
            A Boolean value that indicates whether or not the domain controller is global catalog server. If this value is TRUE, the
            domain controller is a global catalog server; otherwise, it is not a global catalog server.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_3.fIsRodc">
            <summary>
            A Boolean value that indicates if the domain controller is a read-only domain controller. If this value is TRUE, the domain
            controller is a read-only domain controller; otherwise, it is not a read-only domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_3.SiteObjectGuid">
            <summary>
            Contains the GUID for the site object on the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_3.ComputerObjectGuid">
            <summary>
            Contains the GUID for the computer object on the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_3.ServerObjectGuid">
            <summary>
            Contains the GUID for the server object on the domain controller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_DOMAIN_CONTROLLER_INFO_3.NtdsDsaObjectGuid">
            <summary>
            Contains the GUID for the NTDS DSA object on the domain controller.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_NAME_RESULT">
            <summary>
            Used with the DsCrackNames function to contain the names converted by the function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_RESULT.cItems">
            <summary>Contains the number of elements in the rItems array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_RESULT.rItems">
            <summary>
            Contains an array of DS_NAME_RESULT_ITEM structure pointers. Each element of this array represents a single converted name.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.DS_NAME_RESULT.Items">
            <summary>
            Enumeration of DS_NAME_RESULT_ITEM structures. Each element of this array represents a single converted name.
            </summary>
            <value>The items.</value>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_NAME_RESULT_ITEM">
            <summary>
            Contains a name converted by the DsCrackNames function, along with associated error and domain data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_RESULT_ITEM.status">
            <summary>
            Contains one of the DS_NAME_ERROR values that indicates the status of this name conversion.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_RESULT_ITEM.pDomain">
            <summary>
            A string that specifies the DNS domain in which the object resides. This member will contain valid data if status contains
            DS_NAME_NO_ERROR or DS_NAME_ERROR_DOMAIN_ONLY.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_NAME_RESULT_ITEM.pName">
            <summary>A string that specifies the newly formatted object name.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.DS_NAME_RESULT_ITEM.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA">
            <summary>
            The <c>DS_REPL_ATTR_META_DATA</c> structure is used with the DsReplicaGetInfo and DsReplicaGetInfo2 functions to contain
            replication state data for an object attribute.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA.pszAttributeName">
            <summary>
            Pointer to a null-terminated Unicode string that contains the LDAP display name of the attribute corresponding to this metadata.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA.dwVersion">
            <summary>
            Contains the version of this attribute. Each originating modification of the attribute increases this value by one.
            Replication of a modification does not affect the version.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA.ftimeLastOriginatingChange">
            <summary>
            Contains the time at which the last originating change was made to this attribute. Replication of the change does not affect
            this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA.uuidLastOriginatingDsaInvocationID">
            <summary>
            Contains the invocation identification of the server on which the last change was made to this attribute. Replication of the
            change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA.usnOriginatingChange">
            <summary>
            Contains the update sequence number (USN) on the originating server at which the last change to this attribute was made.
            Replication of the change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA.usnLocalChange">
            <summary>
            Contains the USN on the destination server (the server from which the DsReplicaGetInfo function retrieved the metadata) at
            which the last change to this attribute was applied. This value typically is different on all servers.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA_2">
            <summary>
            The <c>DS_REPL_ATTR_META_DATA_2</c> structure is used with the DsReplicaGetInfo and DsReplicaGetInfo2 functions to contain
            replication state data for an object attribute.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA_2.pszAttributeName">
            <summary>
            Pointer to a null-terminated Unicode string that contains the LDAP display name of the attribute that corresponds to this metadata.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA_2.dwVersion">
            <summary>
            Contains the version of this attribute. Each originating modification of the attribute increases this value by one.
            Replication of a modification does not affect the version.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA_2.ftimeLastOriginatingChange">
            <summary>
            Contains the time at which the last originating change was made to this attribute. Replication of the change does not affect
            this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA_2.uuidLastOriginatingDsaInvocationID">
            <summary>
            Contains the invocation identification of the server on which the last change was made to this attribute. Replication of the
            change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA_2.usnOriginatingChange">
            <summary>
            Contains the update sequence number (USN) on the originating server at which the last change to this attribute was made.
            Replication of the change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA_2.usnLocalChange">
            <summary>
            Contains the USN on the destination server (the server from which the DsReplicaGetInfo function retrieved the metadata) at
            which the last change to this attribute was applied. This value typically is different on all servers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA_2.pszLastOriginatingDsaDN">
            <summary>
            Pointer to a null-terminated Unicode string that contains the distinguished name of the directory system agent server that
            originated the last replication.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA_BLOB">
            <summary>
            The <c>DS_REPL_ATTR_META_DATA_BLOB</c> structure is used to contain replication state data for an object attribute. This
            structure is similar to the DS_REPL_ATTR_META_DATA_2 structure, but is obtained from the Lightweight Directory Access Protocol
            API functions when obtaining binary data for the <c>msDS-ReplAttributeMetaData</c> attribute.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA_BLOB.oszAttributeName">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated Unicode string that contains the LDAP
            display name of the attribute corresponding to this metadata. A value of zero indicates an empty or <c>NULL</c> string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA_BLOB.dwVersion">
            <summary>
            Contains the version of this attribute. Each originating modification of the attribute increases this value by one.
            Replication of a modification does not affect the version.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA_BLOB.ftimeLastOriginatingChange">
            <summary>
            Contains the time at which the last originating change was made to this attribute. Replication of the change does not affect
            this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA_BLOB.uuidLastOriginatingDsaInvocationID">
            <summary>
            Contains the invocation identification of the server on which the last change was made to this attribute. Replication of the
            change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA_BLOB.usnOriginatingChange">
            <summary>
            Contains the update sequence number (USN) on the originating server at which the last change to this attribute was made.
            Replication of the change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA_BLOB.usnLocalChange">
            <summary>
            Contains the USN on the destination server (the server from which the DsReplicaGetInfo function retrieved the metadata) at
            which the last change to this attribute was applied. This value typically is different on all servers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_META_DATA_BLOB.oszLastOriginatingDsaDN">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated Unicode string that contains the
            distinguished name of the directory system agent server that originated the last replication. A value of zero indicates an
            empty or <c>NULL</c> string.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_VALUE_META_DATA">
            <summary>
            The <c>DS_REPL_ATTR_VALUE_META_DATA</c> structure is used with the DsReplicaGetInfo2 function to provide metadata for a
            collection of attribute values.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_VALUE_META_DATA.cNumEntries">
            <summary>
            Contains the number of elements in the <c>rgMetaData</c> array.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_VALUE_META_DATA.dwEnumerationContext">
            <summary>
            Contains the zero-based index of the next entry to retrieve if more entries are available. This value is passed for the
            dwEnumerationContext parameter in the next call to DsReplicaGetInfo2 to retrieve the next block of entries. If no more
            entries are available, this member contains -1.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_VALUE_META_DATA._rgMetaData">
            <summary>
            Contains an array of DS_REPL_VALUE_META_DATA structures that contain the individual attribute replication values. The
            cNumEntries member contains the number of elements in this array.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_VALUE_META_DATA.rgMetaData">
            <summary>
            Gets an array of DS_REPL_VALUE_META_DATA structures that contain the individual attribute replication values.
            </summary>
            <value>The rg meta data.</value>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_VALUE_META_DATA_2">
            <summary>
            The <c>DS_REPL_ATTR_VALUE_META_DATA_2</c> structure is used with the DsReplicaGetInfo2 function to provide metadata for a
            collection of attribute values.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_VALUE_META_DATA_2.cNumEntries">
            <summary>
            Contains the number of elements in the <c>rgMetaData</c> array.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_VALUE_META_DATA_2.dwEnumerationContext">
            <summary>
            Contains the zero-based index of the next entry to retrieve if more entries are available. This value is passed for the
            dwEnumerationContext parameter in the next call to DsReplicaGetInfo2 to retrieve the next block of entries. If no more
            entries are available, this member contains -1.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_VALUE_META_DATA_2._rgMetaData">
            <summary>
            Contains an array of DS_REPL_VALUE_META_DATA_2 structures that contain the individual attribute replication values. The
            cNumEntries member contains the number of elements in this array.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_VALUE_META_DATA_2.rgMetaData">
            <summary>
            Gets an array of DS_REPL_VALUE_META_DATA_2 structures that contain the individual attribute replication values.
            </summary>
            <value>The rg meta data.</value>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_VALUE_META_DATA_EXT">
            <summary>
            Provides metadata for a collection of attribute replication values.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_VALUE_META_DATA_EXT.cNumEntries">
            <summary>The number of elements in the <c>rgMetaData</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_VALUE_META_DATA_EXT.dwEnumerationContext">
            <summary>
            The zero-based index of the next entry to retrieve if more entries are available. This value is passed for the
            dwEnumerationContext parameter in the next call to DsReplicaGetInfo2 to retrieve the next block of entries. If no more
            entries are available, this member contains -1.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_VALUE_META_DATA_EXT._rgMetaData">
            <summary>
            Contains an array of DS_REPL_VALUE_META_DATA_EXT structures that contain the individual attribute replication values. The
            cNumEntries member contains the number of elements in this array.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.DS_REPL_ATTR_VALUE_META_DATA_EXT.rgMetaData">
            <summary>
            Gets an array of DS_REPL_VALUE_META_DATA_EXT structures that contain the individual attribute replication values.
            </summary>
            <value>The rg meta data.</value>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR">
            <summary>
            The <c>DS_REPL_CURSOR</c> structure contains inbound replication state data with respect to all replicas of a given naming
            context, as returned by the DsReplicaGetInfo and DsReplicaGetInfo2 functions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR.uuidSourceDsaInvocationID">
            <summary>
            Contains the invocation identifier of the originating server to which the <c>usnAttributeFilter</c> corresponds.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR.usnAttributeFilter">
            <summary>
            Contains the maximum update sequence number to which the destination server can indicate that it has recorded all changes
            originated by the given server at update sequence numbers less than, or equal to, this update sequence number. This is used
            to filter changes at replication source servers that the destination server has already applied.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR_2">
            <summary>
            The <c>DS_REPL_CURSOR_2</c> structure contains inbound replication state data with respect to all replicas of a given naming
            context, as returned by the DsReplicaGetInfo2 function. This structure is an enhanced version of the DS_REPL_CURSOR structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR_2.uuidSourceDsaInvocationID">
            <summary>
            Contains the invocation identifier of the originating server to which the <c>usnAttributeFilter</c> corresponds.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR_2.usnAttributeFilter">
            <summary>
            Contains the maximum update sequence number to which the destination server can indicate that it has recorded all changes
            originated by the given server at update sequence numbers less than, or equal to, this update sequence number. This is used
            to filter changes at replication source servers that the destination server has already applied.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR_2.ftimeLastSyncSuccess">
            <summary>
            Contains a FILETIME structure that contains the date and time of the last successful synchronization operation.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR_3W">
            <summary>
            The <c>DS_REPL_CURSOR_3</c> structure contains inbound replication state data with respect to all replicas of a given naming
            context, as returned by the DsReplicaGetInfo2 function. This structure is an enhanced version of the DS_REPL_CURSOR and
            DS_REPL_CURSOR_2 structures.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR_3W.uuidSourceDsaInvocationID">
            <summary>
            Contains the invocation identifier of the originating server to which the <c>usnAttributeFilter</c> corresponds.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR_3W.usnAttributeFilter">
            <summary>
            Contains the maximum update sequence number to which the destination server can indicate that it has recorded all changes
            originated by the given server at update sequence numbers less than, or equal to, this update sequence number. This is used
            to filter changes at replication source servers that the destination server has already applied.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR_3W.ftimeLastSyncSuccess">
            <summary>
            Contains a FILETIME structure that contains the date and time of the last successful synchronization operation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR_3W.pszSourceDsaDN">
            <summary>
            Pointer to a null-terminated string that contains the distinguished name of the directory service agent that corresponds to
            the source server to which this replication state data applies.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR_BLOB">
            <summary>
            The <c>DS_REPL_CURSOR_BLOB</c> structure contains inbound replication state data with respect to all replicas of a given naming
            context. This structure is similar to the DS_REPL_CURSOR_3 structure, but is obtained from the Lightweight Directory Access
            Protocol API functions when obtaining binary data for the <c>msDS-NCReplCursors</c> attribute.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR_BLOB.uuidSourceDsaInvocationID">
            <summary>
            Contains the invocation identifier of the originating server to which the <c>usnAttributeFilter</c> corresponds.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR_BLOB.usnAttributeFilter">
            <summary>
            Contains the maximum update sequence number to which the destination server can indicate that it has recorded all changes
            originated by the given server at update sequence numbers less than, or equal to, this update sequence number. This is used
            to filter changes at replication source servers that the destination server has already applied.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR_BLOB.ftimeLastSyncSuccess">
            <summary>
            Contains a FILETIME structure that contains the date and time of the last successful synchronization operation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSOR_BLOB.oszSourceDsaDN">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated Unicode string that contains the
            distinguished name of the directory service agent that corresponds to the source server to which this replication state data applies.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_CURSORS">
            <summary>
            The <c>DS_REPL_CURSORS</c> structure is used with the DsReplicaGetInfo and DsReplicaGetInfo2 function to provide replication
            state data with respect to all replicas of a given naming context.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSORS.cNumCursors">
            <summary>Contains the number of elements in the <c>rgCursor</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSORS.dwReserved">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSORS._rgCursor">
            <summary>
            Contains an array of DS_REPL_CURSOR structures that contain the requested replication data. The cNumCursors member contains
            the number of elements in this array.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.DS_REPL_CURSORS.rgCursor">
            <summary>
            Contains an array of DS_REPL_CURSOR structures that contain the requested replication data.
            </summary>
            <value>The rg cursor.</value>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_CURSORS_2">
            <summary>
            The <c>DS_REPL_CURSORS_2</c> structure is used with the DsReplicaGetInfo2 function to provide replication state data with respect
            to all replicas of a given naming context.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSORS_2.cNumCursors">
            <summary>Contains the number of elements in the <c>rgCursor</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSORS_2.dwEnumerationContext">
            <summary>
            Contains the zero-based index of the next entry to retrieve if more entries are available. This value is passed for the
            dwEnumerationContext parameter in the next call to DsReplicaGetInfo2 to retrieve the next block of entries. If no more
            entries are available, this member contains -1.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSORS_2._rgCursor">
            <summary>
            Contains an array of DS_REPL_CURSOR_2 structures that contain the requested replication data. The cNumCursors member contains
            the number of elements in this array.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.DS_REPL_CURSORS_2.rgCursor">
            <summary>
            Contains an array of DS_REPL_CURSOR_2 structures that contain the requested replication data.
            </summary>
            <value>The rg cursor.</value>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_CURSORS_3W">
            <summary>
            The <c>DS_REPL_CURSORS_3</c> structure is used with the DsReplicaGetInfo2 function to provide replication state data with respect
            to all replicas of a given naming context.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSORS_3W.cNumCursors">
            <summary>Contains the number of elements in the <c>rgCursor</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSORS_3W.dwEnumerationContext">
            <summary>
            Contains the zero-based index of the next entry to retrieve if more entries are available. This value is passed for the
            dwEnumerationContext parameter in the next call to DsReplicaGetInfo2 to retrieve the next block of entries. If no more
            entries are available, this member contains -1.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_CURSORS_3W._rgCursor">
            <summary>
            Contains an array of DS_REPL_CURSOR_3W structures that contain the requested replication data. The cNumCursors member
            contains the number of elements in this array.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.DS_REPL_CURSORS_3W.rgCursor">
            <summary>
            Contains an array of DS_REPL_CURSOR_3W structures that contain the requested replication data.
            </summary>
            <value>The rg cursor.</value>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILURESW">
            <summary>
            The <c>DS_REPL_KCC_DSA_FAILURES</c> structure contains an array of DS_REPL_KCC_DSA_FAILURE structures, which in turn contain
            replication state data with respect to inbound replication partners, as returned by the DsReplicaGetInfo and DsReplicaGetInfo2 functions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILURESW.cNumEntries">
            <summary>
            Contains the number of elements in the <c>rgMetaData</c> array.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILURESW.dwReserved">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILURESW._rgDsaFailure">
            <summary>
            Contains an array of DS_REPL_KCC_DSA_FAILURE structures that contain the requested replication data. The cNumEntries member
            contains the number of elements in this array.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILURESW.rgDsaFailure">
            <summary>
            Contains an array of DS_REPL_KCC_DSA_FAILURE structures that contain the requested replication data.
            </summary>
            <value>The rg DSA failure.</value>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILUREW">
            <summary>
            The <c>DS_REPL_KCC_DSA_FAILURE</c> structure contains replication state data about a specific inbound replication partner, as
            returned by the DsReplicaGetInfo and DsReplicaGetInfo2 function. This state data is compiled and used by the Knowledge
            Consistency Checker (KCC) to decide when alternate replication routes must be added to account for unreachable servers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILUREW.pszDsaDN">
            <summary>
            Pointer to a null-terminated string that contains the distinguished name of the directory system agent object in the
            directory that corresponds to the source server.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILUREW.uuidDsaObjGuid">
            <summary>
            Contains the <c>objectGuid</c> of the directory system agent object represented by the <c>pszDsaDN</c> member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILUREW.ftimeFirstFailure">
            <summary>
            <para>
            Contains a FILETIME structure which the contents of depends on the value passed for the InfoType parameter when
            DsReplicaGetInfo or DsReplicaGetInfo2 function was called.
            </para>
            <para>DS_REPL_INFO_KCC_DSA_CONNECT_FAILURES</para>
            <para>Contains the date and time that the first failure occurred when replicating from the source server.</para>
            <para>DS_REPL_INFO_KCC_DSA_LINK_FAILURES</para>
            <para>Contains the date and time of the last successful replication.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILUREW.cNumFailures">
            <summary>
            Contains the number of consecutive failures since the last successful replication.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILUREW.dwLastResult">
            <summary>
            Contains the error code associated with the most recent failure, or <c>ERROR_SUCCESS</c> if the specific error is unavailable.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILUREW_BLOB">
            <summary>
            The <c>DS_REPL_KCC_DSA_FAILUREW_BLOB</c> structure contains replication state data with respect to a specific inbound replication
            partner. This state data is compiled and used by the Knowledge Consistency Checker (KCC) to decide when alternate replication
            routes must be added to account for unreachable servers. This structure is similar to the DS_REPL_KCC_DSA_FAILURE structure, but
            is obtained from the Lightweight Directory Access Protocol API functions when obtaining binary data for the
            <c>msDS-ReplConnectionFailures</c> or <c>msDS-ReplLinkFailures</c> attribute.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILUREW_BLOB.oszDsaDN">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated string that contains the distinguished
            name of the directory system agent object in the directory that corresponds to the source server.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILUREW_BLOB.uuidDsaObjGuid">
            <summary>
            Contains the <c>objectGuid</c> of the directory system agent object represented by the <c>oszDsaDN</c> member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILUREW_BLOB.ftimeFirstFailure">
            <summary>
            <para>Contains a FILETIME structure which the contents of depends on the requested binary replication data.</para>
            <para>msDS-ReplConnectionFailures</para>
            <para>Contains the date and time that the first failure occurred when replicating from the source server.</para>
            <para>msDS-ReplLinkFailures</para>
            <para>Contains the date and time of the last successful replication.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILUREW_BLOB.cNumFailures">
            <summary>
            Contains the number of consecutive failures since the last successful replication.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_KCC_DSA_FAILUREW_BLOB.dwLastResult">
            <summary>
            Contains the error code associated with the most recent failure, or <c>ERROR_SUCCESS</c> if the specific error is unavailable.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR">
            <summary>
            The <c>DS_REPL_NEIGHBOR</c> structure contains inbound replication state data for a particular naming context and source server
            pair, as returned by the DsReplicaGetInfo and DsReplicaGetInfo2 functions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR.pszNamingContext">
            <summary>
            Pointer to a null-terminated string that contains the naming context to which this replication state data pertains. Each
            naming context is replicated independently and has different associated neighbor data, even if the naming contexts are
            replicated from the same source server.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR.pszSourceDsaDN">
            <summary>
            Pointer to a null-terminated string that contains the distinguished name of the directory service agent corresponding to the
            source server to which this replication state data pertains. Each source server has different associated neighbor data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR.pszSourceDsaAddress">
            <summary>
            Pointer to a null-terminated string that contains the transport-specific network address of the source server. That is, a
            directory name service name for RPC/IP replication, or an SMTP address for an SMTP replication.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR.pszAsyncIntersiteTransportDN">
            <summary>
            Pointer to a null-terminated string that contains the distinguished name of the <c>interSiteTransport</c> object that
            corresponds to the transport over which replication is performed. This member contains <c>NULL</c> for RPC/IP replication.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR.dwReplicaFlags">
            <summary>
            <para>
            Contains a set of flags that specify attributes and options for the replication data. This can be zero or a combination of
            one or more of the following flags.
            </para>
            <para>DS_REPL_NBR_WRITEABLE (16 (0x10))</para>
            <para>The local copy of the naming context is writable.</para>
            <para>DS_REPL_NBR_SYNC_ON_STARTUP (32 (0x20))</para>
            <para>
            Replication of this naming context from this source is attempted when the destination server is booted. This normally only
            applies to intra-site neighbors.
            </para>
            <para>DS_REPL_NBR_DO_SCHEDULED_SYNCS (64 (0x40))</para>
            <para>
            Perform replication on a schedule. This flag is normally set unless the schedule for this naming context/source is "never",
            that is, the empty schedule.
            </para>
            <para>DS_REPL_NBR_USE_ASYNC_INTERSITE_TRANSPORT (128 (0x80))</para>
            <para>
            Perform replication indirectly through the Inter-Site Messaging Service. This flag is set only when replicating over SMTP.
            This flag is not set when replicating over inter-site RPC/IP.
            </para>
            <para>DS_REPL_NBR_TWO_WAY_SYNC (512 (0x200))</para>
            <para>
            If set, indicates that when inbound replication is complete, the destination server must tell the source server to
            synchronize in the reverse direction. This feature is used in dial-up scenarios where only one of the two servers can
            initiate a dial-up connection. For example, this option would be used in a corporate headquarters and branch office, where
            the branch office connects to the corporate headquarters over the Internet by means of a dial-up ISP connection.
            </para>
            <para>DS_REPL_NBR_RETURN_OBJECT_PARENTS (2048 (0x800))</para>
            <para>
            This neighbor is in a state where it returns parent objects before children objects. It goes into this state after it
            receives a child object before its parent.
            </para>
            <para>DS_REPL_NBR_FULL_SYNC_IN_PROGRESS (65536 (0x10000))</para>
            <para>
            The destination server is performing a full synchronization from the source server. Full synchronizations do not use vectors
            that create updates (DS_REPL_CURSORS) for filtering updates. Full synchronizations are not used as a part of the normal
            replication protocol.
            </para>
            <para>DS_REPL_NBR_FULL_SYNC_NEXT_PACKET (131072 (0x20000))</para>
            <para>
            The last packet from the source indicated a modification of an object that the destination server has not yet created. The
            next packet to be requested instructs the source server to put all attributes of the modified object into the packet.
            </para>
            <para>DS_REPL_NBR_NEVER_SYNCED (2097152 (0x200000))</para>
            <para>A synchronization has never been successfully completed from this source.</para>
            <para>DS_REPL_NBR_PREEMPTED (16777216 (0x1000000))</para>
            <para>
            The replication engine has temporarily stopped processing this neighbor in order to service another higher-priority neighbor,
            either for this partition or for another partition. The replication engine will resume processing this neighbor after the
            higher-priority work is completed.
            </para>
            <para>DS_REPL_NBR_IGNORE_CHANGE_NOTIFICATIONS (67108864 (0x4000000))</para>
            <para>
            This neighbor is set to disable notification-based synchronizations. Within a site, domain controllers synchronize with each
            other based on notifications when changes occur. This setting prevents this neighbor from performing syncs that are triggered
            by notifications. The neighbor will still do synchronizations based on its schedule, or in response to manually requested synchronizations.
            </para>
            <para>DS_REPL_NBR_DISABLE_SCHEDULED_SYNC (134217728 (0x8000000))</para>
            <para>
            This neighbor is set to not perform synchronizations based on its schedule. The only way this neighbor will perform
            synchronizations is in response to change notifications or to manually requested synchronizations.
            </para>
            <para>DS_REPL_NBR_COMPRESS_CHANGES (268435456 (0x10000000))</para>
            <para>
            Changes received from this source are to be compressed. This is normally set if, and only if, the source server is in a
            different site.
            </para>
            <para>DS_REPL_NBR_NO_CHANGE_NOTIFICATIONS (536870912 (0x20000000))</para>
            <para>
            No change notifications should be received from this source. Normally set if, and only if, the source server is in a
            different site.
            </para>
            <para>DS_REPL_NBR_PARTIAL_ATTRIBUTE_SET (1073741824 (0x40000000))</para>
            <para>
            This neighbor is in a state where it is rebuilding the contents of this replica because of a change in the partial attribute set.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR.dwReserved">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR.uuidNamingContextObjGuid">
            <summary>
            Contains the <c>objectGuid</c> of the naming context corresponding to <c>pszNamingContext</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR.uuidSourceDsaObjGuid">
            <summary>
            Contains the <c>objectGuid</c> of the <c>nTDSDSA</c> object corresponding to <c>pszSourceDsaDN</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR.uuidSourceDsaInvocationID">
            <summary>
            Contains the invocation identifier used by the source server as of the last replication attempt.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR.uuidAsyncIntersiteTransportObjGuid">
            <summary>
            Contains the <c>objectGuid</c> of the inter-site transport object corresponding to <c>pszAsyncIntersiteTransportDN</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR.usnLastObjChangeSynced">
            <summary>
            Contains the update sequence number of the last object update received.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR.usnAttributeFilter">
            <summary>
            Contains the <c>usnLastObjChangeSynced</c> value at the end of the last complete, successful replication cycle, or 0 if none.
            Attributes at the source last updated at a update sequence number less than or equal to this value have already been received
            and applied by the destination.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR.ftimeLastSyncSuccess">
            <summary>
            Contains a FILETIME structure that contains the date and time the last successful replication cycle was completed from this
            source. All members of this structure are zero if the replication cycle has never been completed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR.ftimeLastSyncAttempt">
            <summary>
            Contains a FILETIME structure that contains the date and time of the last replication attempt from this source. All members
            of this structure are zero if the replication has never been attempted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR.dwLastSyncResult">
            <summary>
            Contains an error code associated with the last replication attempt from this source. Contains <c>ERROR_SUCCESS</c> if the
            last attempt succeeded.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBOR.cNumConsecutiveSyncFailures">
            <summary>
            Contains the number of failed replication attempts from this source since the last successful replication attempt - or since
            the source was added as a neighbor, if no previous attempt was successful.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORS">
            <summary>
            The <c>DS_REPL_NEIGHBORS</c> structure is used with the DsReplicaGetInfo and DsReplicaGetInfo2 functions to provide inbound
            replication state data for naming context and source server pairs.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORS.cNumNeighbors">
            <summary>
            Contains the number of elements in the <c>rgNeighbor</c> array.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORS.dwReserved">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORS._rgNeighbor">
            <summary>
            Contains an array of DS_REPL_NEIGHBOR structures that contain the requested replication data. The cNumNeighbors member
            contains the number of elements in this array.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORS.rgNeighbor">
            <summary>
            Contains an array of DS_REPL_NEIGHBOR structures that contain the requested replication data.
            </summary>
            <value>The rg neighbor.</value>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB">
            <summary>
            The <c>DS_REPL_NEIGHBORW_BLOB</c> structure contains inbound replication state data for a particular naming context and source
            server pair. This structure is similar to the DS_REPL_NEIGHBOR structure, but is obtained from the Lightweight Directory Access
            Protocol API functions when obtaining binary data for the <c>msDS-NCReplInboundNeighbors</c> attribute.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB.oszNamingContext">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated Unicode string that contains the
            naming context to which this replication state data pertains. Each naming context is replicated independently and has
            different associated neighbor data, even if the naming contexts are replicated from the same source server.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB.oszSourceDsaDN">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated Unicode string that contains the
            distinguished name of the directory service agent corresponding to the source server to which this replication state data
            pertains. Each source server has different associated neighbor data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB.oszSourceDsaAddress">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated Unicode string that contains the
            transport-specific network address of the source server. That is, a directory name service name for RPC/IP replication, or an
            SMTP address for an SMTP replication.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB.oszAsyncIntersiteTransportDN">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated Unicode string that contains the
            distinguished name of the <c>interSiteTransport</c> object that corresponds to the transport over which replication is
            performed. This member contains <c>NULL</c> for RPC/IP replication.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB.dwReplicaFlags">
            <summary>
            <para>
            Contains a set of flags that specify attributes and options for the replication data. This can be zero or a combination of
            one or more of the following flags.
            </para>
            <para>DS_REPL_NBR_WRITEABLE</para>
            <para>The local copy of the naming context is writable.</para>
            <para>DS_REPL_NBR_SYNC_ON_STARTUP</para>
            <para>
            Replication of this naming context from this source is attempted when the destination server is booted. This normally only
            applies to intra-site neighbors.
            </para>
            <para>DS_REPL_NBR_DO_SCHEDULED_SYNCS</para>
            <para>
            Perform replication on a schedule. This flag is normally set unless the schedule for this naming context/source is "never",
            that is, the empty schedule.
            </para>
            <para>DS_REPL_NBR_USE_ASYNC_INTERSITE_TRANSPORT</para>
            <para>
            Perform replication indirectly through the Inter-Site Messaging Service. This flag is set only when replicating over SMTP.
            This flag is not set when replicating over inter-site RPC/IP.
            </para>
            <para>DS_REPL_NBR_TWO_WAY_SYNC</para>
            <para>
            If set, indicates that when inbound replication is complete, the destination server must tell the source server to
            synchronize in the reverse direction. This feature is used in dial-up scenarios where only one of the two servers can
            initiate a dial-up connection. For example, this option would be used in a corporate headquarters and branch office, where
            the branch office connects to the corporate headquarters over the Internet by means of a dial-up ISP connection.
            </para>
            <para>DS_REPL_NBR_FULL_SYNC_IN_PROGRESS</para>
            <para>
            The destination server is performing a full synchronization from the source server. Full synchronizations do not use vectors
            that create updates (DS_REPL_CURSORS) for filtering updates. Full synchronizations are not used as a part of the normal
            replication protocol.
            </para>
            <para>DS_REPL_NBR_FULL_SYNC_NEXT_PACKET</para>
            <para>
            The last packet from the source indicated a modification of an object that the destination server has not yet created. The
            next packet to be requested instructs the source server to put all attributes of the modified object into the packet.
            </para>
            <para>DS_REPL_NBR_NEVER_SYNCED</para>
            <para>A synchronization has never been successfully completed from this source.</para>
            <para>DS_REPL_NBR_COMPRESS_CHANGES</para>
            <para>
            Changes received from this source are to be compressed. This is normally set if, and only if, the source server is in a
            different site.
            </para>
            <para>DS_REPL_NBR_NO_CHANGE_NOTIFICATIONS</para>
            <para>
            No change notifications should be received from this source. Normally set if, and only if, the source server is in a
            different site.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB.dwReserved">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB.uuidNamingContextObjGuid">
            <summary>
            Contains the <c>objectGuid</c> of the naming context that corresponds to <c>pszNamingContext</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB.uuidSourceDsaObjGuid">
            <summary>
            Contains the <c>objectGuid</c> of the <c>nTDSDSA</c> object that corresponds to <c>pszSourceDsaDN</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB.uuidSourceDsaInvocationID">
            <summary>
            Contains the invocation identifier used by the source server as of the last replication attempt.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB.uuidAsyncIntersiteTransportObjGuid">
            <summary>
            Contains the <c>objectGuid</c> of the inter-site transport object that corresponds to <c>pszAsyncIntersiteTransportDN</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB.usnLastObjChangeSynced">
            <summary>
            Contains the update sequence number of the last object update received.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB.usnAttributeFilter">
            <summary>
            Contains the <c>usnLastObjChangeSynced</c> value at the end of the last complete, successful replication cycle, or 0 if none.
            Attributes at the source last updated at a update sequence number less than or equal to this value have already been received
            and applied by the destination.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB.ftimeLastSyncSuccess">
            <summary>
            Contains a FILETIME structure that contains the date and time the last successful replication cycle was completed from this
            source. All members of this structure are zero if the replication cycle has never been completed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB.ftimeLastSyncAttempt">
            <summary>
            Contains a FILETIME structure that contains the date and time of the last replication attempt from this source. All members
            of this structure are zero if the replication has never been attempted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB.dwLastSyncResult">
            <summary>
            Contains a Windows error code associated with the last replication attempt from this source. Contains <c>ERROR_SUCCESS</c> if
            the last attempt was successful.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_NEIGHBORW_BLOB.cNumConsecutiveSyncFailures">
            <summary>
            Contains the number of failed replication attempts that have been made from this source since the last successful replication
            attempt or since the source was added as a neighbor, if no previous attempt succeeded.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_OBJ_META_DATA">
            <summary>
            The <c>DS_REPL_OBJ_META_DATA</c> structure contains an array of DS_REPL_ATTR_META_DATA structures. These structures contain
            replication state data for past and present attributes for a given object. The replication state data is returned from the
            DsReplicaGetInfo and DsReplicaGetInfo2 functions. The metadata records data about the last modification of a given object attribute.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OBJ_META_DATA.cNumEntries">
            <summary>
            Contains the number of elements in the <c>rgMetaData</c> array.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OBJ_META_DATA.dwReserved">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OBJ_META_DATA._rgMetaData">
            <summary>
            Contains an array of DS_REPL_ATTR_META_DATA structures. The cNumEntries member contains the number of elements in this array.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.DS_REPL_OBJ_META_DATA.rgMetaData">
            <summary>
            Contains an array of DS_REPL_ATTR_META_DATA structures that contain the requested replication data.
            </summary>
            <value>The rg meta data.</value>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_OBJ_META_DATA_2">
            <summary>
            The <c>DS_REPL_OBJ_META_DATA_2</c> structure contains an array of DS_REPL_ATTR_META_DATA_2 structures, which in turn contain
            replication state data for the attributes (past and present) for a given object, as returned by the DsReplicaGetInfo2 function.
            This structure is an enhanced version of the DS_REPL_OBJ_META_DATA structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OBJ_META_DATA_2.cNumEntries">
            <summary>
            Contains the number of elements in the <c>rgMetaData</c> array.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OBJ_META_DATA_2.dwReserved">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OBJ_META_DATA_2._rgMetaData">
            <summary>
            Contains an array of DS_REPL_ATTR_META_DATA_2 structures. The cNumEntries member contains the number of elements in this array.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.DS_REPL_OBJ_META_DATA_2.rgMetaData">
            <summary>
            Contains an array of DS_REPL_ATTR_META_DATA_2 structures that contain the requested replication data.
            </summary>
            <value>The rg meta data.</value>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_OPW">
            <summary>
            The <c>DS_REPL_OP</c> structure describes a replication task currently executing or pending execution, as returned by the
            DsReplicaGetInfo or DsReplicaGetInfo2 function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW.ftimeEnqueued">
            <summary>
            Contains a FILETIME structure that contains the date and time that this operation was added to the queue.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW.ulSerialNumber">
            <summary>
            Contains the operation identifier. This value is unique in the startup routine of every computer. When the computer is
            restarted, the identifiers are no longer unique.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW.ulPriority">
            <summary>
            Contains the priority value of this operation. Tasks with a higher priority value are executed first. The priority is
            calculated by the server based on the type of operation and its parameters.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW.OpType">
            <summary>
            Contains one of the DS_REPL_OP_TYPE values that indicate the type of operation that this structure represents.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW.ulOptions">
            <summary>
            <para>
            Zero or more bits, the interpretation of which depends on the <c>OpType</c>. For <c>DS_REPL_OP_TYPE_SYNC</c>, the bits should
            be interpreted as <c>DS_REPSYNC_</c>. <c>ADD</c>, <c>DELETE</c>, <c>MODIFY</c>, and <c>UPDATE_REFS</c> use <c>DS_REPADD_</c>,
            <c>DS_REPDEL_</c>, <c>DS_REPMOD_</c>, and <c>DS_REPUPD_*</c>. For more information and descriptions of these bits, see
            DsReplicaSync, DsReplicaAdd, DsReplicaDel, DsReplicaModify, and DsReplicaUpdateRefs.
            </para>
            <para>
            Contains a set of flags that provides additional data about the operation. The contents of this member is determined by the
            contents of the <c>OpType</c> member.
            </para>
            <para>DS_REPL_OP_TYPE_SYNC</para>
            <para>
            Contains zero or a combination of one or more of the <c>DS_REPSYNC_*</c> values as defined for the Options parameter in DsReplicaSync.
            </para>
            <para>DS_REPL_OP_TYPE_ADD</para>
            <para>
            Contains zero or a combination of one or more of the <c>DS_REPADD_*</c> values as defined for the Options parameter in DsReplicaAdd.
            </para>
            <para>DS_REPL_OP_TYPE_DELETE</para>
            <para>
            Contains zero or a combination of one or more of the <c>DS_REPDEL_*</c> values as defined for the Options parameter in DsReplicaDel.
            </para>
            <para>DS_REPL_OP_TYPE_MODIFY</para>
            <para>
            Contains zero or a combination of one or more of the <c>DS_REPMOD_*</c> values as defined for the Options parameter in DsReplicaModify.
            </para>
            <para>DS_REPL_OP_TYPE_UPDATE_REFS</para>
            <para>
            Contains zero or a combination of one or more of the <c>DS_REPSUPD_*</c> values as defined for the Options parameter in DsReplicaUpdateRefs.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW.pszNamingContext">
            <summary>
            Pointer to a null-terminated string that contains the distinguished name of the naming context associated with this
            operation. For example, the naming context to be synchronized for <c>DS_REPL_OP_TYPE_SYNC</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW.pszDsaDN">
            <summary>
            Pointer to a null-terminated string that contains the distinguished name of the directory system agent object associated with
            the remote server corresponding to this operation. For example, the server from which to request changes for
            <c>DS_REPL_OP_TYPE_SYNC</c>. This can be <c>NULL</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW.pszDsaAddress">
            <summary>
            Pointer to a null-terminated string that contains the transport-specific network address of the remote server associated with
            this operation. For example, the DNS or SMTP address of the server from which to request changes for
            <c>DS_REPL_OP_TYPE_SYNC</c>. This can be <c>NULL</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW.uuidNamingContextObjGuid">
            <summary>
            Contains the <c>objectGuid</c> of the naming context identified by <c>pszNamingContext</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW.uuidDsaObjGuid">
            <summary>
            Contains the <c>objectGuid</c> of the directory system agent object identified by <c>pszDsaDN</c>.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_OPW_BLOB">
            <summary>
            The <c>DS_REPL_OPW_BLOB</c> structure describes a replication task currently executing or pending execution. This structure is
            similar to the DS_REPL_OP structure, but is obtained from the Lightweight Directory Access Protocol API functions when obtaining
            binary data for the <c>msDS-ReplPendingOps</c> attribute.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW_BLOB.ftimeEnqueued">
            <summary>
            Contains a FILETIME structure that contains the date and time that this operation was added to the queue.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW_BLOB.ulSerialNumber">
            <summary>
            Contains the identifier of the operation. This value is unique in the startup routine of every computer. When the computer is
            restarted, the identifiers are no longer unique.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW_BLOB.ulPriority">
            <summary>
            Contains the priority value of this operation. Tasks with a higher priority value are executed first. The priority is
            calculated by the server based on the type of operation and its parameters.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW_BLOB.OpType">
            <summary>
            Contains one of the DS_REPL_OP_TYPE values that indicate the type of operation that this structure represents.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW_BLOB.ulOptions">
            <summary>
            <para>
            Zero or more bits, the interpretation of which depends on the <c>OpType</c>. For <c>DS_REPL_OP_TYPE_SYNC</c>, the bits should
            be interpreted as <c>DS_REPSYNC_</c>. <c>ADD</c>, <c>DELETE</c>, <c>MODIFY</c>, and <c>UPDATE_REFS</c> use <c>DS_REPADD_</c>,
            <c>DS_REPDEL_</c>, <c>DS_REPMOD_</c>, and <c>DS_REPUPD_*</c>. For more information, and descriptions of these bits, see
            DsReplicaSync, DsReplicaAdd, DsReplicaDel, DsReplicaModify, and DsReplicaUpdateRefs.
            </para>
            <para>
            Contains a set of flags that provide additional data about the operation. The contents of this member is determined by the
            contents of the <c>OpType</c> member.
            </para>
            <para>This list describes the contents of the ulOptions parameter for each OpType value.</para>
            <para>DS_REPL_OP_TYPE_SYNC</para>
            <para>
            Contains zero or a combination of one or more of the <c>DS_REPSYNC_*</c> values as defined for the Options parameter in DsReplicaSync.
            </para>
            <para>DS_REPL_OP_TYPE_ADD</para>
            <para>
            Contains zero or a combination of one or more of the <c>DS_REPADD_*</c> values as defined for the Options parameter in DsReplicaAdd.
            </para>
            <para>DS_REPL_OP_TYPE_DELETE</para>
            <para>
            Contains zero or a combination of one or more of the <c>DS_REPDEL_*</c> values as defined for the Options parameter in DsReplicaDel.
            </para>
            <para>DS_REPL_OP_TYPE_MODIFY</para>
            <para>
            Contains zero or a combination of one or more of the <c>DS_REPMOD_*</c> values as defined for the Options parameter in DsReplicaModify.
            </para>
            <para>DS_REPL_OP_TYPE_UPDATE_REFS</para>
            <para>
            Contains zero or a combination of one or more of the <c>DS_REPSUPD_*</c> values as defined for the Options parameter in DsReplicaUpdateRefs.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW_BLOB.oszNamingContext">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated string that contains the distinguished
            name of the naming context associated with this operation. For example, the naming context to be synchronized for <c>DS_REPL_OP_TYPE_SYNC</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW_BLOB.oszDsaDN">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated string that contains the distinguished
            name of the directory system agent object associated with the remote server corresponding to this operation. For example, the
            server from which to ask for changes for <c>DS_REPL_OP_TYPE_SYNC</c>. This can be <c>NULL</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW_BLOB.oszDsaAddress">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated string that contains the
            transport-specific network address of the remote server associated with this operation. For example, the DNS or SMTP address
            of the server from which to ask for changes for <c>DS_REPL_OP_TYPE_SYNC</c>. This can be <c>NULL</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW_BLOB.uuidNamingContextObjGuid">
            <summary>
            Contains the <c>objectGuid</c> of the naming context identified by <c>pszNamingContext</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_OPW_BLOB.uuidDsaObjGuid">
            <summary>
            Contains the <c>objectGuid</c> of the directory system agent object identified by <c>pszDsaDN</c>.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_PENDING_OPSW">
            <summary>
            The <c>DS_REPL_PENDING_OPS</c> structure contains an array of DS_REPL_OP structures, which in turn describe the replication tasks
            currently executing and queued to execute, as returned by the DsReplicaGetInfo and DsReplicaGetInfo2 functions. The entries in
            the queue are processed in priority order, and the first entry is the one currently being executed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_PENDING_OPSW.ftimeCurrentOpStarted">
            <summary>
            Contains a FILETIME structure that contains the date and time at which the first operation in the queue began executing.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_PENDING_OPSW.cNumPendingOps">
            <summary>
            Contains the number of elements in the <c>rgPendingOps</c> array.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_PENDING_OPSW._rgPendingOp">
            <summary>The sequence of replication operations to be performed.</summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.DS_REPL_PENDING_OPSW.rgPendingOp">
            <summary>The sequence of replication operations to be performed.</summary>
            <value>The rg pending op.</value>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_QUEUE_STATISTICSW">
            <summary>
            <para>The <c>DS_REPL_QUEUE_STATISTICSW</c> structure is used to contain replication queue statistics.</para>
            <para>
            Reserved. Obtain this data using the DS_REPL_QUEUE_STATISTICSW_BLOB structure with the Lightweight Directory Access Protocol API
            functions to obtain binary data for the <c>msDS-ReplQueueStatistics</c> attribute.
            </para>
            </summary>
            <remarks>
            DS_REPL_QUEUE_STATISTICSW_BLOB is an alias for this structure.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_QUEUE_STATISTICSW.ftimeCurrentOpStarted">
            <summary>
            Contains a FILETIME structure that contains the date and time that the currently running operation started.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_QUEUE_STATISTICSW.cNumPendingOps">
            <summary>Contains the number of currently pending operations.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_QUEUE_STATISTICSW.ftimeOldestSync">
            <summary>
            Contains a FILETIME structure that contains the date and time of the oldest synchronization operation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_QUEUE_STATISTICSW.ftimeOldestAdd">
            <summary>
            Contains a FILETIME structure that contains the date and time of the oldest add operation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_QUEUE_STATISTICSW.ftimeOldestMod">
            <summary>
            Contains a FILETIME structure that contains the date and time of the oldest modification operation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_QUEUE_STATISTICSW.ftimeOldestDel">
            <summary>
            Contains a FILETIME structure that contains the date and time of the oldest delete operation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_QUEUE_STATISTICSW.ftimeOldestUpdRefs">
            <summary>
            Contains a FILETIME structure that contains the date and time of the oldest reference update operation.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA">
            <summary>
            The <c>DS_REPL_VALUE_META_DATA</c> structure is used with the DS_REPL_ATTR_VALUE_META_DATA structure to contain attribute value
            replication metadata.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA.pszAttributeName">
            <summary>
            Pointer to a null-terminated Unicode string that contains the LDAP display name of the attribute corresponding to this metadata.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA.pszObjectDn">
            <summary>
            Pointer to a null-terminated Unicode string that contains the distinguished name of the object that this attribute belongs to.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA.cbData">
            <summary>Contains the number of bytes in the <c>pbData</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA.pbData">
            <summary>
            The binary_value portion of the attribute value if the attribute is of syntax Object(DN-Binary), or the string_value portion
            of the attribute value if the attribute is of syntax Object(DN-String); null otherwise.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA.ftimeDeleted">
            <summary>
            Contains a FILETIME structure that contains the time this attribute was deleted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA.ftimeCreated">
            <summary>
            Contains a FILETIME structure that contains the time this attribute was created.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA.dwVersion">
            <summary>
            Contains the version of this attribute. Each originating modification of the attribute increases this value by one.
            Replication of a modification does not affect the version.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA.ftimeLastOriginatingChange">
            <summary>
            Contains a FILETIME structure that contains the time at which the last originating change was made to this attribute.
            Replication of the change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA.uuidLastOriginatingDsaInvocationID">
            <summary>
            Contains the invocation identifier of the server on which the last change was made to this attribute. Replication of the
            change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA.usnOriginatingChange">
            <summary>
            Contains the update sequence number (USN) on the originating server at which the last change to this attribute was made.
            Replication of the change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA.usnLocalChange">
            <summary>
            Contains the USN on the destination server, that is the server from which the DsReplicaGetInfo2 function retrieved the
            metadata, at which the last change to this attribute was applied. This value is typically different on all servers.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_2">
            <summary>
            The <c>DS_REPL_VALUE_META_DATA_2</c> structure is used with the DS_REPL_ATTR_VALUE_META_DATA_2 structure to contain attribute
            value replication metadata.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_2.pszAttributeName">
            <summary>
            Pointer to a null-terminated Unicode string that contains the LDAP display name of the attribute that corresponds to this metadata.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_2.pszObjectDn">
            <summary>
            Pointer to a null-terminated Unicode string that contains the distinguished name of the object that this attribute belongs to.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_2.cbData">
            <summary>Contains the number of bytes in the <c>pbData</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_2.pbData">
            <summary>
            The binary_value portion of the attribute value if the attribute is of syntax Object(DN-Binary), or the string_value portion
            of the attribute value if the attribute is of syntax Object(DN-String); null otherwise.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_2.ftimeDeleted">
            <summary>
            Contains a FILETIME structure that contains the time this attribute was deleted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_2.ftimeCreated">
            <summary>
            Contains a FILETIME structure that contains the time this attribute was created.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_2.dwVersion">
            <summary>
            Contains the version of this attribute. Each originating modification of the attribute increases this value by one.
            Replication of a modification does not affect the version.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_2.ftimeLastOriginatingChange">
            <summary>
            Contains a FILETIME structure that contains the time at which the last originating change was made to this attribute.
            Replication of the change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_2.uuidLastOriginatingDsaInvocationID">
            <summary>
            Contains the invocation identifier of the server on which the last change was made to this attribute. Replication of the
            change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_2.usnOriginatingChange">
            <summary>
            Contains the update sequence number (USN) on the originating server at which the last change to this attribute was made.
            Replication of the change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_2.usnLocalChange">
            <summary>
            Contains the USN on the destination server, that is, the server from which the DsReplicaGetInfo2 function retrieved the
            metadata, at which the last change to this attribute was applied. This value is typically different on all servers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_2.pszLastOriginatingDsaDN">
            <summary>
            Pointer to a null-terminated Unicode string that contains the distinguished name of the directory system agent server that
            originated the last replication.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB">
            <summary>
            The <c>DS_REPL_VALUE_META_DATA_BLOB</c> structure is used to contain attribute value replication metadata. This structure is
            similar to the DS_REPL_VALUE_META_DATA_2 structure, but is obtained from the Lightweight Directory Access Protocol API functions
            when obtaining binary data for the <c>msDS-ReplValueMetaData</c> attribute.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB.oszAttributeName">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated Unicode string that contains the LDAP
            display name of the attribute corresponding to this metadata. A value of zero indicates an empty or <c>NULL</c> string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB.oszObjectDn">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated Unicode string that contains the
            distinguished name of the object that this attribute belongs to. A value of zero indicates an empty or <c>NULL</c> string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB.cbData">
            <summary>Contains the number of bytes in the <c>pbData</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB.obData">
            <summary>
            Contains a 32-bit offset, in bytes, from the address of this structure to a buffer that contains the attribute replication
            metadata. The cbData member contains the length, in bytes, of this buffer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB.ftimeDeleted">
            <summary>
            Contains a FILETIME structure that contains the time that this attribute was deleted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB.ftimeCreated">
            <summary>
            Contains a FILETIME structure that contains the time that this attribute was created.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB.dwVersion">
            <summary>
            Contains the version of this attribute. Each originating modification of the attribute increases this value by one.
            Replication of a modification does not affect the version.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB.ftimeLastOriginatingChange">
            <summary>
            Contains a FILETIME structure that contains the time at which the last originating change was made to this attribute.
            Replication of the change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB.uuidLastOriginatingDsaInvocationID">
            <summary>
            Contains the invocation identifier of the server on which the last change was made to this attribute. Replication of the
            change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB.usnOriginatingChange">
            <summary>
            Contains the update sequence number (USN) on the originating server at which the last change to this attribute was made.
            Replication of the change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB.usnLocalChange">
            <summary>
            Contains the USN on the destination server, that is, the server from which the DsReplicaGetInfo2 function retrieved the
            metadata, at which the last change to this attribute was applied. This value is typically different on all servers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB.oszLastOriginatingDsaDN">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated Unicode string that contains the
            distinguished name of the directory system agent server that originated the last replication. A value of zero indicates an
            empty or <c>NULL</c> string.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB_EXT">
            <summary>
            Contains attribute value replication metadata. This structure is similar to the DS_REPL_VALUE_META_DATA_EXT structure, but is
            obtained from the Lightweight Directory Access Protocol API functions when obtaining binary data for the
            <c>msDS-ReplValueMetaData</c> attribute.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB_EXT.oszAttributeName">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated Unicode string that contains the LDAP
            display name of the attribute corresponding to this metadata. A value of zero indicates an empty or <c>NULL</c> string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB_EXT.oszObjectDn">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated Unicode string that contains the
            distinguished name of the object that this attribute belongs to. A value of zero indicates an empty or <c>NULL</c> string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB_EXT.cbData">
            <summary>Contains the number of bytes in the <c>pbData</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB_EXT.obData">
            <summary>
            Pointer to a buffer that contains the attribute replication metadata. The <c>cbData</c> member contains the length, in bytes,
            of this buffer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB_EXT.ftimeDeleted">
            <summary>
            Contains a FILETIME structure that contains the time that this attribute was deleted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB_EXT.ftimeCreated">
            <summary>
            Contains a FILETIME structure that contains the time that this attribute was created.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB_EXT.dwVersion">
            <summary>
            Contains the version of this attribute. Each originating modification of the attribute increases this value by one.
            Replication of a modification does not affect the version.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB_EXT.ftimeLastOriginatingChange">
            <summary>
            Contains a FILETIME structure that contains the time at which the last originating change was made to this attribute.
            Replication of the change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB_EXT.uuidLastOriginatingDsaInvocationID">
            <summary>
            Contains the invocation identifier of the server on which the last change was made to this attribute. Replication of the
            change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB_EXT.usnOriginatingChange">
            <summary>
            Contains the update sequence number (USN) on the originating server at which the last change to this attribute was made.
            Replication of the change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB_EXT.usnLocalChange">
            <summary>
            Contains the USN on the destination server, that is, the server from which the DsReplicaGetInfo2 function retrieved the
            metadata, at which the last change to this attribute was applied. This value is typically different on all servers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB_EXT.oszLastOriginatingDsaDN">
            <summary>
            Contains the offset, in bytes, from the address of this structure to a null-terminated Unicode string that contains the
            distinguished name of the directory system agent server that originated the last replication. A value of zero indicates an
            empty or <c>NULL</c> string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB_EXT.dwUserIdentifier">
            <summary>TBD</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB_EXT.dwPriorLinkState">
            <summary>TBD</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_BLOB_EXT.dwCurrentLinkState">
            <summary>TBD</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_EXT">
            <summary>
            Contains attribute replication meta data for the DS_REPL_ATTR_VALUE_META_DATA_EXT structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_EXT.pszAttributeName">
            <summary>
            Pointer to a null-terminated Unicode string that contains the LDAP display name of the attribute corresponding to this metadata.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_EXT.pszObjectDn">
            <summary>
            Pointer to a null-terminated Unicode string that contains the distinguished name of the object that this attribute belongs to.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_EXT.cbData">
            <summary>Contains the number of bytes in the <c>pbData</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_EXT.pbData">
            <summary>
            Pointer to a buffer that contains the attribute replication metadata. The <c>cbData</c> member contains the length, in bytes,
            of this buffer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_EXT.ftimeDeleted">
            <summary>
            Contains a FILETIME structure that contains the time this attribute was deleted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_EXT.ftimeCreated">
            <summary>
            Contains a FILETIME structure that contains the time this attribute was created.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_EXT.dwVersion">
            <summary>
            Contains the version of this attribute. Each originating modification of the attribute increases this value by one.
            Replication of a modification does not affect the version.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_EXT.ftimeLastOriginatingChange">
            <summary>
            Contains a FILETIME structure that contains the time at which the last originating change was made to this attribute.
            Replication of the change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_EXT.uuidLastOriginatingDsaInvocationID">
            <summary>
            Contains the invocation identifier of the server on which the last change was made to this attribute. Replication of the
            change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_EXT.usnOriginatingChange">
            <summary>
            Contains the update sequence number (USN) on the originating server at which the last change to this attribute was made.
            Replication of the change does not affect this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_EXT.usnLocalChange">
            <summary>
            Contains the USN on the destination server, that is the server from which the DsReplicaGetInfo2 function retrieved the
            metadata, at which the last change to this attribute was applied. This value is typically different on all servers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_EXT.pszLastOriginatingDsaDN">
            <summary>
            Pointer to a null-terminated Unicode string that contains the distinguished name of the directory system agent server that
            originated the last replication.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_EXT.dwUserIdentifier">
            <summary>TBD</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_EXT.dwPriorLinkState">
            <summary>TBD</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPL_VALUE_META_DATA_EXT.dwCurrentLinkState">
            <summary>TBD</summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_ERRINFO">
            <summary>
            The <c>DS_REPSYNCALL_ERRINFO</c> structure is used with the DS_REPSYNCALL_UPDATE structure to contain errors generated by the
            DsReplicaSyncAll function during replication.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_ERRINFO.pszSvrId">
            <summary>
            Pointer to a null-terminated string that contains the DNS GUID of the server where the error occurred. Alternatively, this
            member can contain the distinguished name of the server if <c>DS_REPSYNCALL_ID_SERVERS_BY_DN</c> is specified in the ulFlags
            parameter of the DsReplicaSyncAll function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_ERRINFO.error">
            <summary>
            Contains one of the DS_REPSYNCALL_ERROR values that indicates where in the replication process the error occurred.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_ERRINFO.dwWin32Err">
            <summary>
            Indicates the actual Win32 error code generated during replication between the source server referred to by <c>pszSrcId</c>
            and the destination server referred to by <c>pszSvrId</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_ERRINFO.pszSrcId">
            <summary>
            Pointer to a null-terminated string that specifies the DNS GUID of the source server. Alternatively, this member can contain
            the distinguished name of the source server if <c>DS_REPSYNCALL_ID_SERVERS_BY_DN</c> is specified in the ulFlags parameter of
            the DsReplicaSyncAll function.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_UPDATE">
            <summary>
            The <c>DS_REPSYNCALL_UPDATE</c> structure contains status data about the replication performed by the DsReplicaSyncAll function.
            The <c>DsReplicaSyncAll</c> function passes this structure to a callback function in its pFnCallBack parameter. For more
            information about the callback function, see SyncUpdateProc.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_UPDATE.cEvent">
            <summary>
            Contains a DS_REPSYNCALL_EVENT value that describes the event which the <c>DS_REPSYNCALL_UPDATE</c> structure represents.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_UPDATE.pErrInfo">
            <summary>
            Pointer to a DS_REPSYNCALL_ERRINFO structure that contains error data about the replication performed by the DsReplicaSyncAll function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_REPSYNCALL_UPDATE.pSync">
            <summary>
            Pointer to a DS_REPSYNCALL_SYNC structure that identifies the source and destination servers that have either initiated or
            finished synchronization.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_SCHEMA_GUID_MAP">
            <summary>
            The DS_SCHEMA_GUID_MAP structure contains the results of a call to DsMapSchemaGuids. If DsMapSchemaGuids succeeds in mapping a
            GUID, DS_SCHEMA_GUID_MAP contains both the GUID and a display name for the object to which the GUID refers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_SCHEMA_GUID_MAP.guid">
            <summary>GUID structure that specifies the object GUID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_SCHEMA_GUID_MAP.guidType">
            <summary>Indicates the type of GUID mapped by DsMapSchemaGuids.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_SCHEMA_GUID_MAP.pName">
            <summary>
            Pointer to a null-terminated string value that specifies the display name associated with the GUID. This value may be NULL if
            DsMapSchemaGuids was unable to map the GUID to a display name.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.DS_SITE_COST_INFO">
            <summary>
            The <c>DS_SITE_COST_INFO</c> structure is used with the <c>DsQuerySitesByCost</c> function to contain communication cost data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_SITE_COST_INFO.errorCode">
            <summary>
            Contains a success or error code that indicates if the cost data for the site could be obtained. This member can contain one
            of the following values.
            <list type="bullet">
            <item>
            <term>ERROR_SUCCESS</term>
            <description>The communication cost of the site was obtained and is contained in the cost member of this structure.</description>
            </item>
            <item>
            <term>ERROR_DS_OBJ_NOT_FOUND</term>
            <description>The communication cost of the site cannot be obtained. The cost member of this structure should be ignored.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.DS_SITE_COST_INFO.cost">
            <summary>
            If the <c>errorCode</c> member contains <c>ERROR_SUCCESS</c>, this member contains the communication cost value of the site.
            If the <c>errorCode</c> member contains <c>ERROR_DS_OBJ_NOT_FOUND</c>, this contents of this member is undefined.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.SCHEDULE_HEADER">
            <summary>
            The <c>SCHEDULE_HEADER</c> structure is used to contain the replication schedule data for a replication source. The SCHEDULE
            structure contains an array of <c>SCHEDULE_HEADER</c> structures.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.SCHEDULE_HEADER.Type">
            <summary>
            <para>Contains one of the following values that defines the type of schedule data that is contained in this structure.</para>
            <para>SCHEDULE_INTERVAL</para>
            <para>
            The schedule contains a set of intervals. The <c>Offset</c> member contains the offset to an array of bytes with
            <c>SCHEDULE_DATA_ENTRIES</c> elements. Each byte in the array represents an hour of the week. The first hour is 00:00 on
            Sunday morning GMT.
            </para>
            <para>
            Each bit of the lower four bits of each byte represents a 15 minute block within the hour that the source is available for
            replication. The following list lists the binary values and describes each bit of the lower four bits of the hour value.
            </para>
            <list type="table">
              <listheader>
                <term>Binary value</term>
                <term>Description</term>
              </listheader>
              <item>
                <term>1000</term>
                <term>The source is available for replication from 0 to 14 minutes after the hour.</term>
              </item>
              <item>
                <term>0100</term>
                <term>The source is available for replication from 15 to 29 minutes after the hour.</term>
              </item>
              <item>
                <term>0010</term>
                <term>The source is available for replication from 30 to 44 minutes after the hour.</term>
              </item>
              <item>
                <term>0001</term>
                <term>The source is available for replication from 45 to 59 minutes after the hour.</term>
              </item>
            </list>
            <para>
            These bits can be combined to create multiple 15 minute blocks that the source is available. For example, a binary value of
            0111 indicates that the source is available from 0 to 44 minutes after the hour.
            </para>
            <para>The upper fours bits of each byte are not used.</para>
            <para>SCHEDULE_BANDWIDTH</para>
            <para>Not supported.</para>
            <para>SCHEDULE_PRIORITY</para>
            <para>Not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.SCHEDULE_HEADER.Offset">
            <summary>
            Contains the offset, in bytes, from the beginning of the SCHEDULE structure to the data for this schedule. The size and form
            of this data depends on the schedule type defined by the <c>Type</c> member.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.SpnArrayHandle">
            <summary>Provides a handle to an array of one or more service principal names (SPNs).</summary>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SpnArrayHandle.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NTDSApi.SpnArrayHandle"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SpnArrayHandle.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SpnArrayHandle.GetSPNs(System.UInt32)">
            <summary>Gets the list of service principle names (SPNs) from this handle.</summary>
            <param name="count">The count returned in the pcSpn parameter of <see cref="M:Vanara.PInvoke.NTDSApi.DsGetSpn(Vanara.PInvoke.NTDSApi.DS_SPN_NAME_TYPE,System.String,System.String,System.UInt16,System.UInt16,System.String[],System.UInt16[],System.UInt32@,Vanara.PInvoke.NTDSApi.SpnArrayHandle@)"/>.</param>
            <returns>The list of SPNs.</returns>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.SafeAuthIdentityHandle">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to an authentication identity that releases its handle at disposal using DsFreePasswordCredentials.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeAuthIdentityHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NTDSApi.SafeAuthIdentityHandle"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeAuthIdentityHandle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NTDSApi.SafeAuthIdentityHandle"/> class.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.SafeAuthIdentityHandle.LocalThreadIdentity">
            <summary>Gets a value that marshals as NULL so that the local thread's identity is used.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeAuthIdentityHandle.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.SafeDS_REPSYNCALL_ERRINFOArray">
            <summary>Provides a safe handle to an array of DS_REPSYNCALL_ERRINFO structures returned from <see cref="M:Vanara.PInvoke.NTDSApi.DsReplicaSyncAll(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,Vanara.PInvoke.NTDSApi.DsReplSyncAllFlags,Vanara.PInvoke.NTDSApi.SyncUpdateProc,System.IntPtr,Vanara.PInvoke.NTDSApi.SafeDS_REPSYNCALL_ERRINFOArray@)"/>.</summary>
            <seealso cref="T:Vanara.InteropServices.GenericSafeHandle"/>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.SafeDS_REPSYNCALL_ERRINFOArray.Count">
            <inheritdoc/>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.SafeDS_REPSYNCALL_ERRINFOArray.Items">
            <summary>Gets the array of DS_REPSYNCALL_ERRINFO structures.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeDS_REPSYNCALL_ERRINFOArray.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeDS_REPSYNCALL_ERRINFOArray.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.SafeDsHandle">
            <summary>A <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for handles bound to directory services.</summary>
            <seealso cref="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"/>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeDsHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NTDSApi.SafeDsHandle"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeDsHandle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NTDSApi.SafeDsHandle"/> class.</summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.SafeDsHandle.Null">
            <summary>Gets a <c>NULL</c> equivalent for a bound directory services handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeDsHandle.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.SafeDsNameResult">
            <summary>
            A <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for the results from <see
            cref="M:Vanara.PInvoke.NTDSApi.DsCrackNames(Vanara.PInvoke.NTDSApi.SafeDsHandle,Vanara.PInvoke.NTDSApi.DS_NAME_FLAGS,Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT,Vanara.PInvoke.NTDSApi.DS_NAME_FORMAT,System.UInt32,System.String[],Vanara.PInvoke.NTDSApi.SafeDsNameResult@)"/>.
            </summary>
            <seealso cref="T:Vanara.InteropServices.GenericSafeHandle"/>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeDsNameResult.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NTDSApi.SafeDsNameResult"/> class.</summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.SafeDsNameResult.Items">
            <summary>An array of DS_NAME_RESULT_ITEM structures. Each element of this array represents a single converted name.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeDsNameResult.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeDsNameResult.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.SafeDsQuerySites">
            <summary>A <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for the results from <see cref="M:Vanara.PInvoke.NTDSApi.DsQuerySitesByCost(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,System.String[],System.UInt32,System.UInt32,Vanara.PInvoke.NTDSApi.SafeDsQuerySites@)"/>.</summary>
            <seealso cref="T:Vanara.InteropServices.GenericSafeHandle"/>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeDsQuerySites.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NTDSApi.SafeDsNameResult"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeDsQuerySites.GetItems(System.Int32)">
            <summary>Gets an array of DS_SITE_COST_INFO structures.</summary>
            <param name="cToSites">
            <para>Indicates the number of elements in the array. This value is the same value as that passed into <see cref="M:Vanara.PInvoke.NTDSApi.DsQuerySitesByCost(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.String,System.String[],System.UInt32,System.UInt32,Vanara.PInvoke.NTDSApi.SafeDsQuerySites@)"/>.</para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.SafeDsReplicaInfo">
            <summary>A <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for the results from <see cref="M:Vanara.PInvoke.NTDSApi.DsReplicaGetInfo2W(Vanara.PInvoke.NTDSApi.SafeDsHandle,Vanara.PInvoke.NTDSApi.DS_REPL_INFO_TYPE,System.String,System.Nullable{System.Guid},System.String,System.String,Vanara.PInvoke.NTDSApi.DsReplInfoFlags,System.UInt32,Vanara.PInvoke.NTDSApi.SafeDsReplicaInfo@)"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.SafeDsReplicaInfo.Value">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeDsReplicaInfo.GetValue``1">
            <summary>Gets the requested structure.</summary>
            <typeparam name="T">Type of the structure</typeparam>
            <returns>The structure.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeDsReplicaInfo.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.SafeDsSchemaGuidMap">
            <summary>A <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for the results from <see cref="M:Vanara.PInvoke.NTDSApi.DsMapSchemaGuids(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.UInt32,System.Guid[],Vanara.PInvoke.NTDSApi.SafeDsSchemaGuidMap@)"/>.</summary>
            <seealso cref="T:Vanara.InteropServices.GenericSafeHandle"/>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeDsSchemaGuidMap.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NTDSApi.SafeDsNameResult"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SafeDsSchemaGuidMap.GetItems(System.Int32)">
            <summary>Gets an array of DS_SCHEMA_GUID_MAP structures.</summary>
            <param name="cGuids">
            <para>Indicates the number of elements in the array. This value is the same value as that passed into <see cref="M:Vanara.PInvoke.NTDSApi.DsMapSchemaGuids(Vanara.PInvoke.NTDSApi.SafeDsHandle,System.UInt32,System.Guid[],Vanara.PInvoke.NTDSApi.SafeDsSchemaGuidMap@)"/>.</para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.NTDSApi.SCHEDULE">
            <summary>
            <para>
            The <c>SCHEDULE</c> structure is a variable-length structure used with the DsReplicaAdd and DsReplicaModify functions to contain
            replication schedule data for a replication source.
            </para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.NTDSApi.SCHEDULE.#ctor(System.Byte[0:,0:])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NTDSApi.SCHEDULE"/> class.</summary>
            <param name="scheduleIntervals">The schedule intervals. See <see cref="P:Vanara.PInvoke.NTDSApi.SCHEDULE.ScheduleIntervals"/> for detail about this array.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            scheduleIntervals - Array must have at least 1 schedule and have a second dimension of 24 x 7 bytes.
            </exception>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.SCHEDULE.Size">
            <summary>
            <para>
            Contains the size, in bytes, of the <c>SCHEDULE</c> structure, including the size of all of the elements and data of the
            <c>Schedules</c> array.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.SCHEDULE.Bandwidth">
            <summary>
            <para>Not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.SCHEDULE.NumberOfSchedules">
            <summary>
            <para>Contains the number of elements in the <c>Schedules</c> array.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NTDSApi.SCHEDULE._Schedules">
            <summary>
            <para>
            Contains an array of SCHEDULE_HEADER structures that contain the replication schedule data for the replication source. The
            <c>NumberOfSchedules</c> member contains the number of elements in this array. Currently, this array can only contain one element.
            </para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.SCHEDULE.Schedules">
            <summary>
            <para>
            Contains an array of SCHEDULE_HEADER structures that contain the replication schedule data for the replication source. The
            <c>NumberOfSchedules</c> member contains the number of elements in this array. Currently, this array can only contain one element.
            </para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.NTDSApi.SCHEDULE.ScheduleIntervals">
            <summary>
            <para>
            Gets a two-dimensional array of bytes for each schedule with 7 x 24 elements. Each byte in the array represents an hour of
            the week. The first hour is 00:00 on Sunday morning GMT.
            </para>
            <para>
            Each bit of the lower four bits of each byte represents a 15 minute block within the hour that the source is available for
            replication. The following list lists the binary values and describes each bit of the lower four bits of the hour value.
            </para>
            <list type="table">
            <listheader>
            <term>Binary value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>1000</term>
            <term>The source is available for replication from 0 to 14 minutes after the hour.</term>
            </item>
            <item>
            <term>0100</term>
            <term>The source is available for replication from 15 to 29 minutes after the hour.</term>
            </item>
            <item>
            <term>0010</term>
            <term>The source is available for replication from 30 to 44 minutes after the hour.</term>
            </item>
            <item>
            <term>0001</term>
            <term>The source is available for replication from 45 to 59 minutes after the hour.</term>
            </item>
            </list>
            <para>
            These bits can be combined to create multiple 15 minute blocks that the source is available. For example, a binary value of
            0111 indicates that the source is available from 0 to 44 minutes after the hour.
            </para>
            <para>The upper fours bits of each byte are not used.</para>
            </summary>
        </member>
    </members>
</doc>
